<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/10/2019 3:52:32 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PC1015238198"
  DTS:CreatorName="DB\raygozatorres.5"
  DTS:DTSID="{A0AB5E27-2BD3-41A3-BCC8-F7EF45B9E742}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.128"
  DTS:LocaleID="1033"
  DTS:ObjectName="Bonos"
  DTS:PackageType="5"
  DTS:VersionBuild="74"
  DTS:VersionGUID="{E6B79414-EF7A-41AE-8AE1-378037E80F55}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[10.152.32.165.ASN]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{587138F2-3508-4AB4-A5EF-A514BA53DA3D}"
      DTS:ObjectName="10.152.32.165.ASN">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=10.152.32.165;Initial Catalog=ASN;Integrated Security=True;Application Name=SSIS-Bonos-{587138F2-3508-4AB4-A5EF-A514BA53DA3D}10.152.32.165.ASN;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9AD3CF04-7738-4C9C-9640-92817D35CAD6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConexionBD">
      <DTS:VariableValue
        DTS:DataType="8">Server=PC1015238228;Database=ASN;User Id=sa;Password=Cr1pt0n0m1c0n;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{14C3EED8-9973-48B3-980F-0FBE5BD7B08A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Extension">
      <DTS:VariableValue
        DTS:DataType="8">.txt</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8F58A4B-16D4-4D53-947F-ABD2307152BC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="PaisId">
      <DTS:VariableValue
        DTS:DataType="3">239</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DD4F9381-BA34-4283-BCAF-748A6355AFAC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="PeriodoNominaId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2AE7F006-1F52-49D9-8D4B-E59D6A7EF63E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Resultado">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{80F59E18-0111-42E4-861A-5CC5AEA36235}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="TablaBonos">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DC605F5F-CF57-43B6-A0B8-543F9FB1FEB0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TipoPeriodo">
      <DTS:VariableValue
        DTS:DataType="8">O</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{679A37EB-EECB-4796-AAF9-2ACFF2E60069}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Unidad">
      <DTS:VariableValue
        DTS:DataType="8">Y:</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Borrar unidad de red"
      DTS:CreationName="Microsoft.ExecuteProcess"
      DTS:Description="Execute Process Task"
      DTS:DTSID="{121fd790-fe8d-4e65-b683-3d5e59d470a7}"
      DTS:ExecutableType="Microsoft.ExecuteProcess"
      DTS:LocaleID="-1"
      DTS:ObjectName="Borrar unidad de red"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecuteProcessData
          Executable="cmd.exe"
          RequireFullFileName="False"
          Arguments="/c NET USE Y:  /delete /y" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Crear unidad de red"
      DTS:CreationName="Microsoft.ExecuteProcess"
      DTS:Description="Execute Process Task"
      DTS:DTSID="{2338210b-9281-4a58-99bc-d396b00b6c78}"
      DTS:ExecutableType="Microsoft.ExecuteProcess"
      DTS:LocaleID="-1"
      DTS:ObjectName="Crear unidad de red"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecuteProcessData
          Executable="cmd.exe"
          RequireFullFileName="False"
          Arguments="/c &quot;NET USE y:  &quot;\\10.152.32.164\tp&quot;  /user:tpmty\peoplesoft.web Renovacion2016&quot;"
          WindowStyle="Hidden" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{45080C67-E1D5-4470-B6CA-D013444CAC3D}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{30385cf8-fdb9-4011-b4ea-14d6442da145}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Enviar Archivo o Depositar Archivo"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Tarea Script"
          DTS:DTSID="{8be5b052-643a-4edb-925f-326ac67e1742}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Enviar Archivo o Depositar Archivo"
          DTS:ThreadHint="0">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{D33E5513-617B-4BE6-8AEB-69F54910D0CF}"
              DTS:IncludeInDebugDump="2345"
              DTS:Namespace="User"
              DTS:ObjectName="NombrePeriodo">
              <DTS:VariableValue
                DTS:DataType="8">E</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_e851fcfedf22481580807873c773a266"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::ConexionBD,User::Extension,User::TablaBonos,User::TipoPeriodo,User::Unidad">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="MailHelper.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Net;
using System.Net.Mail;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    class MailHelper
    {
        private const int Timeout = 180000;
        private readonly string _host;
        private readonly int _port;
        private readonly string _user;
        private readonly string _pass;
        private readonly bool _ssl;
        private readonly MailAddress _sender;
        private readonly string testing;
        private readonly string testingMail;
        //private readonly MailAddress testingMail;

        public string Recipient { get; set; }
        public string RecipientCC { get; set; }
        public string RecipientCCO { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
        public bool IsBodyHtml { get; set; }
        public string AttachmentFile { get; set; }
        public Attachment archivo { get; set; }

        public MailHelper()
        {
            //MailServer - Represents the SMTP Server
            _host = "10.6.5.240";
            //Port- Represents the port number
            _port = 25;
            //MailAuthUser and MailAuthPass - Used for Authentication for sending email
            _sender = new MailAddress("RAFTool@teleperformance.com");
            _user = "";
            _pass = "";
            _ssl = true;
            testing = "0";
            //testingMail = new MailAddress(ConfigurationManager.AppSettings["testingMail"]);
            testingMail = "javier.raygoza@teleperformance.com";
        }

        public void Send()
        {
            try
            {

                Attachment att = null;
                var message = new MailMessage();

                if (testing == "1")
                {
                    foreach (var address in testingMail.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        message.To.Add(new MailAddress(address));
                    }

                    //message.To.Add(testingMail);
                }
                else
                {
                    //Split each email on the field
                    foreach (var address in Recipient.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        message.To.Add(new MailAddress(address));
                    }
                }

                message.Subject = Subject;
                message.From = _sender;
                message.Body = Body;
                message.IsBodyHtml = IsBodyHtml;

                if (testing != "1")
                {
                    if (!String.IsNullOrEmpty(RecipientCC))
                    {
                        foreach (var address in RecipientCC.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            message.CC.Add(address);
                        }
                    }

                    if (!String.IsNullOrEmpty(RecipientCCO))
                    {
                        foreach (var address in RecipientCCO.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            message.Bcc.Add(address);
                        }
                    }
                }

                var smtp = new SmtpClient(_host, _port);

                if (!String.IsNullOrEmpty(AttachmentFile))
                {
                    if (File.Exists(AttachmentFile))
                    {
                        att = new Attachment(AttachmentFile);
                        att.ContentId = "imagens";
                        message.Attachments.Add(att);
                    }
                }

                if (archivo != null)
                {
                    message.Attachments.Add(archivo);
                }

                if (_user.Length > 0 && _pass.Length > 0)
                {
                    smtp.UseDefaultCredentials = false;
                    smtp.Credentials = new NetworkCredential(_user, _pass);
                    smtp.EnableSsl = _ssl;
                }

                smtp.Send(message);

                if (att != null)
                    att.Dispose();
                message.Dispose();
                smtp.Dispose();
            }

            catch
            {
                //TODO: Enviar error a log de bd
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="RafToolObj.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    public class RafToolObj
    {
        public string Empleado { get; set; }
        public string Reg { get; set; }
        public string Concepto { get; set; }
        public string Accion { get; set; }
        public string Unidad { get; set; }
        public string Importe { get; set; }
        public string Porcentaje { get; set; }
        public string Fecha { get; set; }
        public string Semana { get; set; }
        public string Fecha_Ini { get; set; }
        public string Fecha_Fin { get; set; }
        public string Duracion { get; set; }
        public string Folio { get; set; }
        public string Consecuencia { get; set; }
        public string Control { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Settings.get_Default():ST_b5c21392dbc540afa85f849020efe0d2.Properties.Sett" +
    "ings")]

namespace ST_b5c21392dbc540afa85f849020efe0d2.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_b5c21392dbc540afa85f849020efe0d2</msb:CodeName>
		<msb:DisplayName>ST_b5c21392dbc540afa85f849020efe0d2</msb:DisplayName>
		<msb:ProjectId>{A3DDDEB1-E98D-4AC1-9980-1641336997C6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_e851fcfedf22481580807873c773a266.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="MailHelper.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="LogError.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="RafToolBonos.cs"/>
		<msb:File Include="RafToolObj.cs"/>
		<msb:File Include="BonoInfo.cs"/>
		<msb:Breakpoint Include="c34f8cf744d445cca90dfb3ae6f66e64">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>106</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="41d7659cb7a54370a51a9ad575f8127c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>21</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>162</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="d497b4bcb6ea48d4a3e78f4b28d5be9d">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>287</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="RafToolBonos.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    public class NMBonos
    {
        public string Empleado { get; set; }
		public string Reg { get; set; }
		public string Concepto { get; set; }
		public string Accion { get; set; }
        public string Unidad { get; set; }
        public string Importe { get; set; }
        public string Porcentaje { get; set; }
        public string Fecha { get; set; }
	    public string Semana { get; set; }
		public string Fecha_Ini { get; set; }
        public string Fecha_Fin { get; set; }
        public string Duracion { get; set; }
        public string Folio { get; set; }
        public string Consecuencia { get; set; }
        public string Control { get; set; }
        public string ID_Empresa { get; set; }
        public string CIA_IDReporteo { get; set; }
        public string Folder { get; set; }
        public string Compania { get; set; }
        public string ID_REP { get; set; }
        public string T_EX_DOB_SEM { get; set; }
        public string T_EXTRA_EXEN { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b5c21392dbc540afa85f849020efe0d2")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b5c21392dbc540afa85f849020efe0d2")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b5c21392dbc540afa85f849020efe0d2.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Reflection;
using System.Linq;
using System.Collections.Generic;
using System.Net.Mail;
#endregion

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            //using (var memoryStream = new MemoryStream())
            //using (var streamWriter = new StreamWriter(memoryStream))
            //using (var csvWriter = new CsvWriter(streamWriter))
            //{
            //    //csvWriter.WriteRecords(records);
            //    //streamWriter.Flush();
            //}

            var connections = Dts.Variables["User::ConexionBD"].Value.ToString();
            var unidad = Dts.Variables["User::Unidad"].Value.ToString();
            var extension = Dts.Variables["User::Extension"].Value.ToString();
            var TipoPeriodo = Dts.Variables["User::TipoPeriodo"].Value.ToString();

            try
            {
                //var people = new List<Person> { new Person("Matt", "Abbott"), new Person("John Smith","") };
                //WriteCSV(people, @"C:\DemoCSv\people.csv");
                //User::TablaReferidosConBono
                var records = new List<NMBonos>();
                //var FechaDeCreacion = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                var FechaDeCreacion = DateTime.Now.ToString("yyyyMMdd");
                var numerin = 1;
                var contador = 1;

                if (Dts.Variables.Contains("User::TablaBonos"))
                {
                    var x = (DataSet)Dts.Variables["User::TablaBonos"].Value;

                    DataTable dt = new DataTable();

                    dt = x.Tables["Table"];

                    

                    foreach (DataRow dr in dt.Rows)
                    {
                        var p = new NMBonos();

                        p.Empleado = dr["Empleado"].ToString();
                        p.Reg = dr["Reg"].ToString();
                        p.Concepto = dr["Concepto"].ToString();
                        p.Accion = dr["Accion"].ToString();
                        p.Unidad = dr["Unidad"].ToString();
                        p.Importe = dr["Importe"].ToString();
                        p.Porcentaje = dr["Porcentaje"].ToString();
                        p.Fecha = dr["Fecha"].ToString();
                        p.Semana = dr["Semana"].ToString();
                        p.Fecha_Ini = dr["Fecha_Ini"].ToString();
                        p.Fecha_Fin = dr["Fecha_Fin"].ToString();
                        p.Duracion = dr["Duracion"].ToString();
                        p.Folio = dr["Folio"].ToString();
                        p.Consecuencia = dr["Consecuencia"].ToString();
                        p.Control = dr["Control"].ToString();
                        p.ID_Empresa = dr["ID_Empresa"].ToString();
                        p.CIA_IDReporteo = dr["CIA_IDReporteo"].ToString();
                        p.Folder = dr["Folder"].ToString();
                        p.Compania = dr["Compania"].ToString();
                        p.ID_REP = dr["ID_REP"].ToString();
                        p.T_EX_DOB_SEM = dr["T_EX_DOB_SEM"].ToString();
                        p.T_EXTRA_EXEN = dr["T_EXTRA_EXEN"].ToString();

                        records.Add(p);
                    }

                    if (records.Count > 0)
                    {
                        var listaDeCIA = new List<string>();
                        var listaDeBonoInfo = new List<BonoInfo>();

                        listaDeCIA = records
                                      .GroupBy(p => p.CIA_IDReporteo)
                                      .Select(g => g.First().CIA_IDReporteo)
                                      .ToList();

                        foreach (var CIA in listaDeCIA)
                        {
                            var elBonoInfo = records.Where(v => v.CIA_IDReporteo == CIA).Take(1).Select(c =>
                               new BonoInfo
                               {
                                   ID = contador,
                                   CIA_IDReporteo = c.CIA_IDReporteo,
                                   Compania = c.Compania,
                                   Folder = c.Folder,
                                   ID_Empresa = c.ID_Empresa,
                                   ID_REP = c.ID_REP
                               }
                           ).SingleOrDefault();

                            contador++;

                            listaDeBonoInfo.Add(elBonoInfo);
                        }


                        foreach (var IDCIA in listaDeCIA)
                        {
                            var liston = new List<NMBonos>();
                            var bonosArchivo = new List<RafToolObj>();

                            var p1 = new RafToolObj();

                            p1.Empleado = "EMPLEADO";
                            p1.Reg = "REG";
                            p1.Concepto = "CONCEPTO";
                            p1.Accion = "ACCION";
                            p1.Unidad = "UNIDAD";
                            p1.Importe = "IMPORTE";
                            p1.Porcentaje = "PORCENTAJE";
                            p1.Fecha = "FECHA";
                            p1.Semana = "SEMANA";
                            p1.Fecha_Ini = "FECHA_INI";
                            p1.Fecha_Fin = "FECHA_FIN";
                            p1.Duracion = "DURACION";
                            p1.Folio = "FOLIO";
                            p1.Consecuencia = "CONSECUENCIA";
                            p1.Control = "CONTROL";

                            bonosArchivo.Add(p1);

                            liston = records.Where(morro => morro.CIA_IDReporteo == IDCIA).ToList();

                            foreach(var obj  in liston)
                            {
                                string numeroDeSemana = obj.T_EX_DOB_SEM == "1" ? "1" : "";

                                var bono = new RafToolObj();

                                bono.Empleado = obj.Empleado;
                                bono.Reg = obj.Reg;
                                bono.Concepto = obj.Concepto.ToUpper();
                                bono.Accion = obj.Accion;
                                bono.Unidad = obj.Unidad;
                                bono.Importe = obj.Importe;
                                bono.Porcentaje = obj.Porcentaje;
                                bono.Fecha = obj.Fecha;
                                bono.Semana = numeroDeSemana;
                                bono.Fecha_Ini = obj.Fecha_Ini;
                                bono.Fecha_Fin = obj.Fecha_Fin;
                                bono.Duracion = obj.Duracion;
                                bono.Folio = obj.Folio;
                                bono.Consecuencia = obj.Consecuencia;
                                bono.Control = obj.Control;

                                bonosArchivo.Add(bono);

                                //Estos dos siempre van juntos cuando se ponga el concepto de “T EX DOB SEM” siempre 
                                //debe ir acompañado de “T EXTRA EXEN” además de que en la columna de semana siempre va 
                                //el número 1 en ambos conceptos. Para el concepto “T EXTRA EXEN” la columna unidad va vacia.
                                //-Mireya Cavazos  Diciembre 2019
                                if (obj.T_EX_DOB_SEM == "1")
                                {
                                    if (numeroDeSemana == "1")
                                    {
                                        var ContadorTE = (from f in bonosArchivo
                                                          where f.Empleado == obj.Empleado.ToString() && f.Concepto == "T EX DOB SEM"
                                                          select f).Count();
                                        if (ContadorTE == 1)
                                        {
                                            numeroDeSemana = "2";
                                        }

                                    }
                                    var bonoTExtra = new RafToolObj();

                                    bonoTExtra.Empleado = obj.Empleado;
                                    bonoTExtra.Reg = obj.Reg;
                                    bonoTExtra.Concepto = obj.T_EXTRA_EXEN;
                                    bonoTExtra.Accion = obj.Accion;
                                    bonoTExtra.Unidad = "";
                                    bonoTExtra.Importe = obj.Importe;
                                    bonoTExtra.Porcentaje = obj.Porcentaje;
                                    bonoTExtra.Fecha = obj.Fecha;
                                    bonoTExtra.Semana = numeroDeSemana;
                                    bonoTExtra.Fecha_Ini = obj.Fecha_Ini;
                                    bonoTExtra.Fecha_Fin = obj.Fecha_Fin;
                                    bonoTExtra.Duracion = obj.Duracion;
                                    bonoTExtra.Folio = obj.Folio;
                                    bonoTExtra.Consecuencia = obj.Consecuencia;
                                    bonoTExtra.Control = obj.Control;

                                    bonosArchivo.Add(bonoTExtra);
                                }
                            }

                            var result = WriteCsvToMemory(bonosArchivo);
                            var memoryStream = new MemoryStream(result);

                            /// El numero 10 es simbolicos, solo es para comprobar que tegno registros, tratandose de Miles
                            /// deberia tener mas de 10 registros pues es segun los empleados que hay en la compañia con Miles.
                            if (records.Count > 0)
                            {
                                var IdentificadorArchivo = "TP_INCID";
                                var TipoNominas = "N" + TipoPeriodo;
                                var Compania = listaDeBonoInfo.Where(r => r.ID == numerin).SingleOrDefault().Compania.ToUpper();
                                var ID_REP = listaDeBonoInfo.Where(r => r.ID == numerin).SingleOrDefault().ID_REP.ToUpper();
                                var Ciudad = "ALL";
                                if (ID_REP == "ELO")
                                {
                                    Ciudad = "AGE";
                                }
                                var TipoIncidencia = "IMA";
                                var FolderPath = listaDeBonoInfo.Where(r => r.ID == numerin).SingleOrDefault().Folder.ToUpper();
                                var FolderPathSubtring = FolderPath.Substring(4, FolderPath.Length - 4);
                                var nombreArchivo = IdentificadorArchivo + "_" + TipoNominas + "_" + Compania + "_" + ID_REP + "_" + Ciudad + "_" + TipoIncidencia + "_" + FechaDeCreacion + extension;

                                //using (FileStream fs = new FileStream("Z:\\MILES\\ML_Miles_" + FechaDeCreacion + ".csv", FileMode.Create))
                                //using (FileStream fs = new FileStream("C:" + "//RafArchivo/basura/basuron" + "/" + nombreArchivo, FileMode.Create))
                                using (FileStream fs = new FileStream(unidad + FolderPathSubtring + "/" + nombreArchivo, FileMode.Create))
                                {
                                    numerin++;
                                    memoryStream.Seek(0, SeekOrigin.Begin);
                                    memoryStream.CopyTo(fs);
                                    fs.Flush();
                                }
                            }
                        }
                    }
                }

                //var records = new List<Person>();
                //records.Add(new Person { uno = "hola", dos = "mundo", tres = "ho1" });
                //records.Add(new Person { uno = "holas", dos = "mundos", tres = "ho2" });
                //records.Add(new Person { uno = "holas3", dos = "mundos3", tres = "ho3" });
                //records.Add(new Person { uno = "holas4", dos = "mundos4", tres = "ho4" });
                //records.Add(new Person { uno = "holas5", dos = "mundos5", tres = "ho5" });
                
                //var result = WriteCsvToMemory(records);
                //var memoryStream = new MemoryStream(result);

                ///// El numero 10 es simbolicos, solo es para comprobar que tegno registros, tratandose de Miles
                ///// deberia tener mas de 10 registros pues es segun los empleados que hay en la compañia con Miles.
                //if (records.Count > 10)
                //{
                //    //using (FileStream fs = new FileStream("Z:\\MILES\\ML_Miles_" + FechaDeCreacion + ".csv", FileMode.Create))
                //    using (FileStream fs = new FileStream("C:\\RafArchivo\\" + FechaDeCreacion + extension, FileMode.Create))
                //    {
                //        memoryStream.Seek(0, SeekOrigin.Begin);
                //        memoryStream.CopyTo(fs);
                //        fs.Flush();
                //    }
                //}

                //Attachment att = new Attachment(memoryStream, "test.csv");

                //MailHelper mail = new MailHelper();

                //mail.archivo = att;
                //mail.Recipient = Dts.Variables["User::EmailReport"].Value.ToString(); ;
                //mail.Subject = "test from dtsx email with csv";

                //if (records.Count > 0)
                //{
                //    mail.Send();
                //}
            }
            catch (Exception ex)
            {
                LogError log = new LogError();
                log.RecordError(ex, 1, connections);
            }

            // TODO: Add your code here

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        public byte[] WriteCsvToMemory(IEnumerable<RafToolObj> records)
        {


            using (var memoryStream = new MemoryStream())
            using (var streamWriter = new StreamWriter(memoryStream))
            //using (var csvWriter = new CsvWriter(streamWriter))
            {
                Type itemType = typeof(RafToolObj);
                var props = itemType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
                //.OrderBy(p => p.Name);

                //streamWriter.WriteLine(string.Join(", ", props.Select(p => p.Name)));

                foreach (var item in records)
                {
                    streamWriter.WriteLine(string.Join(",", props.Select(p => p.GetValue(item, null))));
                }

                //csvWriter.WriteRecords(records);
                //streamWriter.WriteLine(records);
                streamWriter.Flush();
                return memoryStream.ToArray();
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="BonoInfo.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    public class BonoInfo
    {
        public int ID { get; set; }
        public string ID_Empresa { get; set; }
        public string CIA_IDReporteo { get; set; }
        public string Folder { get; set; }
        public string Compania { get; set; }
        public string ID_REP { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_e851fcfedf22481580807873c773a266.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{F0113C09-E455-4949-946A-08358AF186B6}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_b5c21392dbc540afa85f849020efe0d2</RootNamespace><AssemblyName>ST_e851fcfedf22481580807873c773a266</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="BonoInfo.cs" /><Compile Include="LogError.cs" /><Compile Include="MailHelper.cs" /><Compile Include="RafToolBonos.cs" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="RafToolObj.cs" /><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST120</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="LogError.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Data.SqlClient;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    class LogError
    {
        public string LogErrorMessage { get; set; }
        public string StackTrace { get; set; }
        public string IpAddress { get; set; }
        public string Browser { get; set; }
        public Nullable<int> CreatedBy { get; set; }

        public void RecordError(Exception ex, int EID, string connections)
        {
            try
            {
                string MessageInnerEx = string.Format("[ExecUser:{2}]:_:[ex.Msg: {0}]:_:[ex.Src: {1}]"
                            , ex.Message, ex.Source, System.Security.Principal.WindowsIdentity.GetCurrent().Name);
                if (ex.InnerException != null)
                {
                    MessageInnerEx += string.Format(":_:[{0}]:_:[{1}]", ex.InnerException.Message, ex.InnerException.StackTrace);
                }

                SqlConnection conn = new SqlConnection(connections);

                SqlCommand cmd = new SqlCommand();

                cmd.CommandText = "601.CatLogErrorSi";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add("@LogErrorMessage", System.Data.SqlDbType.VarChar).Value = MessageInnerEx;
                cmd.Parameters.Add("@StackTrace", System.Data.SqlDbType.VarChar).Value = ex.StackTrace;
                cmd.Parameters.Add("@IpAddress", System.Data.SqlDbType.VarChar).Value = "Atuomatico";
                cmd.Parameters.Add("@Browser", System.Data.SqlDbType.VarChar).Value = "SSIS";
                cmd.Parameters.Add("@CreatedBy", System.Data.SqlDbType.Int).Value = 1;

                cmd.Connection = conn;
                cmd.CommandTimeout = 600;

                conn.Open();

                int i = cmd.ExecuteNonQuery();

                conn.Close();
            }
            catch (Exception exs)
            {

            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_e851fcfedf22481580807873c773a266.dll">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
AAp9TgAABBEFEQ/+BogAAAZzYQAACigEAAArFygFAAArEQR7SgAABCUtGiYRBBEE/gaDAAAGc2QA
AAolExF9SgAABBERKAYAACsoBwAAKxMQEQR7SAAABBMSEQQREhdYfUgAAAQRDREQb2YAAAoSDihn
AAAKOnj////eDhIO/hYIAAAbb1YAAArcEQxvXwAAChMOOMoFAABziQAABhMTERMSDihgAAAKfU8A
AARzSQAACiZzaAAAChMUc3cAAAYTFREVcj0EAHBvWgAABhEVck8EAHBvXAAABhEVclcEAHBvXgAA
BhEVcmkEAHBvYAAABhEVcncEAHBvYgAABhEVcoUEAHBvZAAABhEVcpUEAHBvZgAABhEVcqsEAHBv
aAAABhEVcrcEAHBvagAABhEVcsUEAHBvbAAABhEVctkEAHBvbgAABhEVcu0EAHBvcAAABhEVcv8E
AHBvcgAABhEVcgsFAHBvdAAABhEVciUFAHBvdgAABhEUERVvaQAAChEFERP+BooAAAZzYQAACigE
AAArKAgAACtvagAAChMXOMsCAABziwAABhMYERgSFyhrAAAKfVAAAAQRGHtQAAAEb1QAAAZy1wEA
cCgoAAAKLQdyiwEAcCsFctcBAHATGXN3AAAGExoRGhEYe1AAAARvLAAABm9aAAAGERoRGHtQAAAE
by4AAAZvXAAABhEaERh7UAAABG8wAAAGb2wAAApvXgAABhEaERh7UAAABG8yAAAGb2AAAAYRGhEY
e1AAAARvNAAABm9iAAAGERoRGHtQAAAEbzYAAAZvZAAABhEaERh7UAAABG84AAAGb2YAAAYRGhEY
e1AAAARvOgAABm9oAAAGERoRGW9qAAAGERoRGHtQAAAEbz4AAAZvbAAABhEaERh7UAAABG9AAAAG
b24AAAYRGhEYe1AAAARvQgAABm9wAAAGERoRGHtQAAAEb0QAAAZvcgAABhEaERh7UAAABG9GAAAG
b3QAAAYRGhEYe1AAAARvSAAABm92AAAGERQRGm9pAAAKERh7UAAABG9UAAAGctcBAHAoKAAACjlN
AQAAERly1wEAcCgoAAAKLCMRFBEY/gaMAAAGc20AAAooCQAAKygKAAArFzMHcjUFAHATGXN3AAAG
ExsRGxEYe1AAAARvLAAABm9aAAAGERsRGHtQAAAEby4AAAZvXAAABhEbERh7UAAABG9WAAAGb14A
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
EgDuChEMEgAVCREMBgC3AFADBgCGCGANBgBlEMkRCgDBEy8DBgAnCGANYwB0EAAABgDkAGANBgBF
DWQCBgA6DWQCBgCOAFADBgAvEGQCBgBMDx8OBgCpAFADBgBwDWANFgDrAKcPBgDJCYwQBgDVD8cQ
BgA3DwoODgCBCZcMDgD6CZcMDgBMCfUNBgBSFEwMBgCYC2ANCgBUB/YSCgBKB9YOCgDHCC8DCgBF
DvYSCgAiEPYSCgC5CC8DCgAWENYOBgC+AGANCgCoDtYOBgDoEWANDgBcDq0MBgCcAGYMBgB4CGQC
DgBkCa0MDgByDq0MDgA6DLISDgBsE7ISEgCFDBEMGgB2EY8IGgATCI8ICgC9Ei8DCgAJCC8DCgAx
Di8DCgCHDi8DCgAxCS8DFgAcCKcPBgCdB2QCBgBLDWQCBgCtDWQCBgDOCGANBgAzCGANBgCAER8O
BgA8EGQCBgAOFB8OAAAAALYBAAAAAAEAAQABABAAQw/3ADUAAQABAAAAEABcEPcANQAHAA4AAAAQ
AOUP9wA1AAwAGgABABAA+xH3ADUAHQAsAAEAEADeC/cANQAzAFkAAQAQAKIN9wBdAEIAeAAAABAA
zhAqETUAQgB7AAABEACNESoRsQBEAH8AAwEAAFASAACVAEUAggADARAAFwAAADUASACCAAMBEABu
AAAANQBOAIcAAwEQAMQAAAA1AE8AiQADARAAGwEAADUAUACLAAMhEABEAwAANQBRAI0AAwEQACwA
AAA1AFQAkQABALADhAMBAJ0EhwMBAC8GhwMBAJkGhwMBAGsEhwMBAB4EhwMBAO0EhwMBANEEhwMB
AMoGhwMBALEGhwMBABkHigNRgJYThAMhAH8ThwMhAF8ThAMhAPgPhwMhABIShwMhADUNkQMhAMkP
lAMhAKkLhwMhAL0MhwMBAP4GhwMBAJMDhwMBAAAEhwMBAOUGhwMBADQHhwMBAJMFkQMBACoFhwMB
AIAGmAMBABUGhwMBAGMFhwMBAGYGhwMBAP0FhwMBALkEhwMBAEoFhwMBAA4FhwMBADYEhwMBAIUE
hwMBAHgFhwMBAMgFhwMBAOMFhwMBAE8GhwMBAE0EhwMBAK8FhwMBAJ0EhwMBAC8GhwMBAJkGhwMB
AGsEhwMBAB4EhwMBAMQDhwMBAOIDhwMBABUGhwMBAGMFhwMBAGYGhwMBAP0FhwMBALkEhwMBAEoF
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
AAAAAIYYfxAGADwATCgAAAAAhgCoDQYAPAB0MwAAAACGACcUCQQ8AEQ0AAAAAIYYfxAGAD0AtiAA
AAAAgxh/EAYAPQBMNAAAAACTCNEPFQQ9AHg0AAAAAJMI7QgbBD0AfzQAAAAAkwj5CCEEPQCHNAAA
AACWCMsSKAQ+AI40AAAAAIYYfxAGAD4AljQAAAAAkRiFEC0EPgC2IAAAAACGGH8QBgA+AKQ0AAAA
AIMANwExBD4A/jQAAAAAgwCDATgEPwD+NAAAAACDAJUBOARAAP40AAAAAIMApwE4BEEAtiAAAAAA
hhh/EAYAQgAONQAAAACDANkAPgRCALYgAAAAAIYYfxAGAEMAITUAAAAAgwBCAT4EQwC2IAAAAACG
GH8QBgBEADQ1AAAAAIMATQFEBEQAZTUAAAAAkRiFEC0ERQC2IAAAAACGGH8QBgBFAHE1AAAAAIMA
CgBKBEUAeTUAAAAAgwBhAFAERgC2IAAAAACGGH8QBgBHAIY1AAAAAIMAQQBcBEcAAAABAGQLAAAB
AGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQL
AAABAMkTAAACAOwBAAADANwRAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAAB
AGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQL
AAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAAB
AGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQL
AAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAABAGQLAAAB
AGQLAAABAJ8QAAABAGQLAAABAGkDAAABAIoQAAABAIoQAAABAIoQAAABALcTAAABAG0PAAABAGoL
AAABAKUPAAABAK8LAAABAKUPCQB/EAEAEQB/EAYAGQB/EAoAKQB/EBAAMQB/EBAAOQB/EBAAQQB/
EBAASQB/EBAAUQB/EBAAWQB/EBAAYQB/EBAAcQB/EAYAsQB/EAYAOQF/EAYAWQF/EBUAaQB/EAYA
gQCmByIAgQCSByIAaQFKEyYAaQF9CCIAcQGFEiwAgQDDDjQAgQBkByIAcQGFEjkAcQF+EkAAiQB/
EBAAeQF/EAYAgQGnExAAgQHDCEYAeQEDEk0AkQGPA1MAqQFRC10AeQGZDmIAgQGLEwEAuQGBDQYA
gQEXFGgAuQFzCQYAkQB/EBAAoQB/EAYAcQE4FHwAcQHFEoIAoQDpDowADACPA5oAoQCfEhAAoQBn
DaAAoQABFBAAoQAADaYAcQFEFHwAcQFiFKsAoQDFAYwAyQGPAxAAoQBIA4wAqQB/ELAA2QFuEqsA
mQB/EBAA4QFrAxAAoQBeErYAFACPA5oAcQG3C2gAqQCmEaYA8QF/EMQAqQCWEcoAqQAnDaYAqQBf
B9EA4QF5CQYAoQB5CQYAqQB5CQYAuQBIEjwBAQJyEUIBCQJSDUgBEQJHC08BaQCWCyIAHAB/EAYA
yQC5E1oByQCWC18BCQLAEWQBIQJ/EAYAGQJnEWkBKQJSDW8BIQJ1EnYBOQJxEHwB0QA+E08B2QBS
DYEBHACPA5oA0QCeE4YB4QB5CQYAHABVE2gAJAB/EAYALAB/EAYANAB/EJ8BQQLoE6UBPAB/EJ8B
QQKrEtoBQQJlEwACJABxEBUCRAA+EyQCTAB/EJ8BQQLTCDECQQIECE8CVAB/EJ8BQQLXEnICLACP
A5oARACeE4YBXAB/EAYAXACPA5oAHABxEBUCZAA+EyQCcQHwDyIAbAB/EJ8BQQJZE58CZACeE4YB
+QB/EKsCdAB/EJ8BcQGfC7kCcQF+Er8CcQF+EsUCAQF/EM0CUQLtC9UCUQLwDt0CUQKxCwYAAQLn
EgEA+QB/EAYAEQF/EN0CYQJFCPsCYQJZEQQDfABxEBYDhAA+EyQCjAB/EJ8BcQG4DTgDeQKvCBAA
eQKxCwYA+QDwE0kDuQB/EAYAYQIKFE4DQQF/EFQDYQF/EAYAQQKFE3ICGQFbC1wDCAAwAHUDCAAY
AXoDCAAcAX8DIABjAH8DIQBjAH8DLgALAI0ELgATAJYELgAbALUELgAjAL4ELgArAOcELgAzAOcE
LgA7AOcELgBDAL4ELgBLAO0ELgBTAOcELgBbAAQFQABjAH8DQQBjAH8DYABjAH8DYQBjAH8DgABj
AH8DgQBjAH8DoABjAH8DoQBjAH8DwABjAH8DwQBjAH8D4ABjAH8D4QBjAH8D4wBrAH8DAAFjAH8D
AQFjAH8DAwFzAH8DIAFjAH8DIQFjAH8DQAFjAH8DQQFjAH8DYAFjAH8DYQFjAH8DYwFjAH8DgAFj
AH8DgwFjAH8DowFjAH8DwAFjAH8DwwFjAH8D4AFjAH8D4wFjAH8DAAJjAH8DAwJjAH8DIAJjAH8D
QAJjAH8DYAJjAH8DgAJjAH8DoAJjAH8DoQJjAH8DwAJjAH8DwQJjAH8D4AJjAH8D4QJjAH8DAQNj
AH8DIQNjAH8DQANjAH8DQQNjAH8DYANjAH8DYQNjAH8DgANjAH8DgQNjAH8DoANjAH8DoQNjAH8D
wANjAH8DwQNjAH8D4ANjAH8D4QNjAH8DAARjAH8DAQRjAH8DIARjAH8DIQRjAH8DQARjAH8DQQRj
AH8DYARjAH8DYQRjAH8DgARjAH8DgQRjAH8DoARjAH8DoQRjAH8DwARjAH8DwQRjAH8D4ARjAH8D
4QRjAH8DAAVjAH8DAQVjAH8DIAVjAH8DIQVjAH8DQQVjAH8DYQVjAH8DgAVjAH8DgQVjAH8DoAVj
AH8DoQVjAH8DwAVjAH8DwQVjAH8D4AVjAH8D4QVjAH8DAAZjAH8DAQZjAH8DIAZjAH8DIQZjAH8D
QAZjAH8DQQZjAH8DYAZjAH8DYQZjAH8DgAZjAH8DgQZjAH8DoAZjAH8DoQZjAH8DwAZjAH8DwQZj
AH8D4AZjAH8D4QZjAH8DAAdjAH8DAQdjAH8DIAdjAH8DIQdjAH8DKQd7ALUEQAdjAH8DQQdjAH8D
SQd7ALUEYAdjAH8DYQdjAH8DgAdjAH8DgQdjAH8DoAdjAH8DoQdjAH8DwAdjAH8DwQdjAH8D4Adj
AH8D4QdjAH8DAAhjAH8DAQhjAH8DIAhjAH8DIQhjAH8DQAhjAH8DYAhjAH8DgAhjAH8DgQhjAH8D
oAhjAH8DwAhjAH8D4AhjAH8DAAljAH8DIAljAH8DQAljAH8DYAljAH8DgAljAH8DoAljAH8DwAlj
AH8D4AljAH8DAApjAH8DIApjAH8DQApjAH8DYApjAH8DgApjAH8DoApjAH8DwApjAH8D4ApjAH8D
IAtjAH8DQAtjAH8DYAtjAH8DgAtjAH8DoAtjAH8DwAtjAH8D4AtjAH8DAAxjAH8DIAxjAH8DQAxj
AH8DYAxjAH8DgAxjAH8DoAxjAH8DwAxjAH8D4AxjAH8DAA1jAH8DIA1jAH8DQA1jAH8DYA1jAH8D
gA1jAH8DoA1jAH8DwA1jAH8D4A1jAH8DAA5jAH8DIA5jAH8DQA5jAH8DYA5jAH8DgA5jAH8DoA5j
AH8DwA5jAH8DHABsANcA5AICAAEAAwAHAAQADAAFABQABgAqAAgAOQAJADsAAAD7AWMEAAAkA2cE
AAAoD2cEAADCD2cEAADyAmcEAAB9AmcEAADWB2cEAAB3B2cEAAA+EmcEAAAOEGcEAADeE2sEAAAp
E2cEAADgAWcEAABXAmcEAACjEmcEAAAFFGcEAAAEDXMEAABuCGcEAACdD3cEAAAID2cEAAB4C2cE
AACED2cEAADuDWcEAACIA2cEAACmCWcEAAD5B2cEAAC5AmcEAAAKA2cEAADUC2cEAACYDWcEAADW
DWcEAABnD2cEAADUAmcEAAAfDWcEAAAkA2cEAAAoD2cEAADCD2cEAADyAmcEAAB9AmcEAAATAmcE
AAA1AmcEAAAID2cEAAB4C2cEAACED2cEAADuDWcEAACIA2cEAACmCWcEAAD5B2cEAAC5AmcEAAAK
A2cEAADUC2cEAACYDWcEAADWDWcEAABnD2cEAADUAmcEAAAfDWcEAADVD3wEAAANCYIEAADfEogE
AgABAAMAAQACAAMAAgADAAUAAQAEAAUAAgAFAAcAAQAGAAcAAgAHAAkAAQAIAAkAAgAJAAsAAQAK
AAsAAgALAA0AAQAMAA0AAgAOAA8AAQAPAA8AAgAQABEAAQARABEAAgASABMAAQATABMAAgAUABUA
AQAVABUAAgAWABcAAQAXABcAAgAaABkAAQAbABkAAgAcABsAAQAdABsAAgAeAB0AAQAfAB0AAgAg
AB8AAQAhAB8AAgAiACEAAQAjACEAAgAkACMAAQAlACMAAgAmACUAAQAnACUAAgAoACcAAQApACcA
AgAsACkAAQAtACkAAgAuACsAAQAvACsAAgAwAC0AAQAxAC0AAgAyAC8AAQAzAC8AAgA0ADEAAQA1
ADEAAgA2ADMAAQA3ADMAAgA4ADUAAQA5ADUAAgA6ADcAAQA7ADcAAgA8ADkAAQA9ADkAAgA+ADsA
AQA/ADsAAgBAAD0AAQBBAD0AAgBCAD8AAQBDAD8AAgBEAEEAAQBFAEEAAgBGAEMAAQBHAEMAAgBI
AEUAAQBJAEUAAgBKAEcAAQBLAEcAAgBMAEkAAQBNAEkAAgBOAEsAAQBPAEsAAgBQAE0AAQBRAE0A
AgBSAE8AAQBTAE8AAgBUAFEAAQBVAFEAAgBWAFMAAQBXAFMAAgBZAFUAAQBaAFUAAgBbAFcAAQBc
AFcAAgBdAFkAAQBeAFkAAgBfAFsAAQBgAFsAAgBhAF0AAQBiAF0AAgBjAF8AAQBkAF8AAgBlAGEA
AQBmAGEAAgBnAGMAAQBoAGMAAgBpAGUAAQBqAGUAAgBrAGcAAQBsAGcAAgBtAGkAAQBuAGkAAgBv
AGsAAQBwAGsAAgBxAG0AAQByAG0AAgBzAG8AAQB0AG8AAgB1AHEAAQB2AHEAAgB8AHMAAgB9AHUA
AQB+AHUAAgB/AHcAkgC8AFMBigGQAZcBzAEeAikCYgKEAosCkgKxAg4DIAMoAwSAAAABAAAAqx64
egAAAAAAAFgBAAAEAAAAAAAAAAAAAABjAzsDAAAAAAQAAAAAAAAAAAAAAGMDLwMAAAAABAAAAAAA
AAAAAAAAYwNgDQAAAAAMAAAAAAAAAAAAAABsA/ILAAAAAAQAAAAAAAAAAAAAAGMD2QgAAAAADAAA
AAAAAAAAAAAAbAOEAgAAAAAAAAAAAQAAANgQAAAKAAcACwAHAAwABwANAAcADgAHAA8ABwAQAAcA
twDGAbsA9AG9ABECxQBKAscASgK7AGsCywB/Ar0ASgLFAJoC3QCaAsUAfwK7ADEDAwFFAxMBSgIA
AAAAADw+OV9fMF8wADxNYWluPmJfXzBfMAA8PmNfX0Rpc3BsYXlDbGFzczBfMAA8PmNfX0Rpc3Bs
YXlDbGFzczFfMAA8V3JpdGVDc3ZUb01lbW9yeT5iX18wADw+OV9fMF8xADxNYWluPmJfXzBfMQA8
PmNfX0Rpc3BsYXlDbGFzczBfMQBOdWxsYWJsZWAxAElFbnVtZXJhYmxlYDEAQ29sbGVjdGlvbmAx
AElFbnVtZXJhdG9yYDEATGlzdGAxAEludDMyADw+Y19fRGlzcGxheUNsYXNzMF8yADxNYWluPmJf
XzIARnVuY2AyAElHcm91cGluZ2AyAFNUX2I1YzIxMzkyZGJjNTQwYWZhODVmODQ5MDIwZWZlMGQy
ADw+Y19fRGlzcGxheUNsYXNzMF8zADw+OV9fMwA8TWFpbj5iX18zADxNYWluPmJfXzQAPE1haW4+
Yl9fNQBTVF9lODUxZmNmZWRmMjI0ODE1ODA4MDc4NzNjNzczYTI2NgA8PjlfXzYAPE1haW4+Yl9f
NgA8PjlfXzcAPE1haW4+Yl9fNwA8PjlfXzgAPE1haW4+Yl9fOAA8PjkAPE1vZHVsZT4ASURDSUEA
Z2V0X0NDAGdldF9SZWNpcGllbnRDQwBzZXRfUmVjaXBpZW50Q0MARUlEAGdldF9JRABzZXRfSUQA
Z2V0X1RfRVhfRE9CX1NFTQBzZXRfVF9FWF9ET0JfU0VNAGdldF9UX0VYVFJBX0VYRU4Ac2V0X1Rf
RVhUUkFfRVhFTgBnZXRfUmVjaXBpZW50Q0NPAHNldF9SZWNpcGllbnRDQ08AU3lzdGVtLklPAGdl
dF9JRF9SRVAAc2V0X0lEX1JFUABNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVf
XwBnZXRfRmVjaGEAc2V0X0ZlY2hhAGdldF9Db25zZWN1ZW5jaWEAc2V0X0NvbnNlY3VlbmNpYQBn
ZXRfQ29tcGFuaWEAc2V0X0NvbXBhbmlhAGdldF9TZW1hbmEAc2V0X1NlbWFuYQBnZXRfSURfRW1w
cmVzYQBzZXRfSURfRW1wcmVzYQBTeXN0ZW0uRGF0YQBtc2NvcmxpYgA8PmMAZ2V0X0JjYwBTeXN0
ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBzZXRfQ29udGVudElkAGdldF9VbmlkYWQAc2V0X1VuaWRh
ZABBZGQAPFJlY2lwaWVudENDPmtfX0JhY2tpbmdGaWVsZAA8SUQ+a19fQmFja2luZ0ZpZWxkADxU
X0VYX0RPQl9TRU0+a19fQmFja2luZ0ZpZWxkADxUX0VYVFJBX0VYRU4+a19fQmFja2luZ0ZpZWxk
ADxSZWNpcGllbnRDQ08+a19fQmFja2luZ0ZpZWxkADxJRF9SRVA+a19fQmFja2luZ0ZpZWxkADxG
ZWNoYT5rX19CYWNraW5nRmllbGQAPENvbnNlY3VlbmNpYT5rX19CYWNraW5nRmllbGQAPENvbXBh
bmlhPmtfX0JhY2tpbmdGaWVsZAA8U2VtYW5hPmtfX0JhY2tpbmdGaWVsZAA8SURfRW1wcmVzYT5r
X19CYWNraW5nRmllbGQAPFVuaWRhZD5rX19CYWNraW5nRmllbGQAPFN0YWNrVHJhY2U+a19fQmFj
a2luZ0ZpZWxkADxMb2dFcnJvck1lc3NhZ2U+a19fQmFja2luZ0ZpZWxkADxQb3JjZW50YWplPmtf
X0JhY2tpbmdGaWVsZAA8QXR0YWNobWVudEZpbGU+a19fQmFja2luZ0ZpZWxkADxJbXBvcnRlPmtf
X0JhY2tpbmdGaWVsZAA8UmVnPmtfX0JhY2tpbmdGaWVsZAA8RmVjaGFfSW5pPmtfX0JhY2tpbmdG
aWVsZAA8SXNCb2R5SHRtbD5rX19CYWNraW5nRmllbGQAPENvbnRyb2w+a19fQmFja2luZ0ZpZWxk
ADxGZWNoYV9GaW4+a19fQmFja2luZ0ZpZWxkADxEdXJhY2lvbj5rX19CYWNraW5nRmllbGQAPEFj
Y2lvbj5rX19CYWNraW5nRmllbGQAPEVtcGxlYWRvPmtfX0JhY2tpbmdGaWVsZAA8Q0lBX0lEUmVw
b3J0ZW8+a19fQmFja2luZ0ZpZWxkADxGb2xpbz5rX19CYWNraW5nRmllbGQAPENvbmNlcHRvPmtf
X0JhY2tpbmdGaWVsZAA8YXJjaGl2bz5rX19CYWNraW5nRmllbGQAPEZvbGRlcj5rX19CYWNraW5n
RmllbGQAPEJyb3dzZXI+a19fQmFja2luZ0ZpZWxkADxJcEFkZHJlc3M+a19fQmFja2luZ0ZpZWxk
ADxTdWJqZWN0PmtfX0JhY2tpbmdGaWVsZAA8UmVjaXBpZW50PmtfX0JhY2tpbmdGaWVsZAA8Q3Jl
YXRlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8Qm9keT5rX19CYWNraW5nRmllbGQARGJDb21tYW5kAFNx
bENvbW1hbmQAU2VuZABnZXRfU3RhY2tUcmFjZQBzZXRfU3RhY2tUcmFjZQBkZWZhdWx0SW5zdGFu
Y2UAZ2V0X1NvdXJjZQBGaWxlTW9kZQBnZXRfTWVzc2FnZQBNYWlsTWVzc2FnZQBnZXRfTG9nRXJy
b3JNZXNzYWdlAHNldF9Mb2dFcnJvck1lc3NhZ2UAZ2V0X1BvcmNlbnRhamUAc2V0X1BvcmNlbnRh
amUAVGFrZQBEYXRhVGFibGUAVmFyaWFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1l
VHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBnZXRfQXR0YWNobWVudEZpbGUAc2V0X0F0dGFj
aG1lbnRGaWxlAGdldF9OYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUAV3JpdGVMaW5lAFNxbERiVHlwZQBzZXRfQ29tbWFuZFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUA
RmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9u
U2V0dGluZ3NCYXNlAEF0dGFjaG1lbnRCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxl
U3RhdGUAZ2V0X0ltcG9ydGUAc2V0X0ltcG9ydGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25B
dHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRp
b25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0
dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55
QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBzZXRfVmFs
dWUAR2V0VmFsdWUAdmFsdWUAZgBnZXRfUmVnAHNldF9SZWcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lv
bmluZwBUb1N0cmluZwBTdWJzdHJpbmcAdGVzdGluZwBGbHVzaABnZXRfTGVuZ3RoAGdldF9GZWNo
YV9JbmkAc2V0X0ZlY2hhX0luaQBSYWZUb29sT2JqAG9iagBTZWVrAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAE5l
dHdvcmtDcmVkZW50aWFsAFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwAU3lzdGVtLkNvbGxlY3Rp
b25zLk9iamVjdE1vZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABT
eXN0ZW0uTmV0Lk1haWwAdGVzdGluZ01haWwAU1RfZTg1MWZjZmVkZjIyNDgxNTgwODA3ODczYzc3
M2EyNjYuZGxsAGdldF9Jc0JvZHlIdG1sAHNldF9Jc0JvZHlIdG1sAGdldF9Db250cm9sAHNldF9D
b250cm9sAHNldF9FbmFibGVTc2wAX3NzbABGaWxlU3RyZWFtAE1lbW9yeVN0cmVhbQBnZXRfSXRl
bQBpdGVtAFN5c3RlbQBzZXRfRnJvbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AZ2V0X0ZlY2hhX0Zp
bgBzZXRfRmVjaGFfRmluAFNjcmlwdE1haW4AU2Vla09yaWdpbgBKb2luAG51bWVyaW4AZ2V0X0R1
cmFjaW9uAHNldF9EdXJhY2lvbgBnZXRfQWNjaW9uAHNldF9BY2Npb24AU3lzdGVtLkNvbmZpZ3Vy
YXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVRhYmxlQ29s
bGVjdGlvbgBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9uAE1haWxBZGRyZXNzQ29sbGVjdGlvbgBBdHRh
Y2htZW50Q29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBzZXRfQ29ubmVjdGlvbgBEYkNvbm5l
Y3Rpb24AU3FsQ29ubmVjdGlvbgBnZXRfSW5uZXJFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9u
AGdldF9UbwBDb3B5VG8AZ2V0X0VtcGxlYWRvAHNldF9FbXBsZWFkbwBnZXRfQ0lBX0lEUmVwb3J0
ZW8Ac2V0X0NJQV9JRFJlcG9ydGVvAEN1bHR1cmVJbmZvAEJvbm9JbmZvAFByb3BlcnR5SW5mbwBn
ZXRfRm9saW8Ac2V0X0ZvbGlvAG1vcnJvAGdldF9Db25jZXB0bwBzZXRfQ29uY2VwdG8AZ2V0X2Fy
Y2hpdm8Ac2V0X2FyY2hpdm8AcABTeXN0ZW0uTGlucQBnZXRfRm9sZGVyAHNldF9Gb2xkZXIAX3Nl
bmRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAE1haWxIZWxwZXIAVG9VcHBlcgBfdXNlcgBnZXRfQnJv
d3NlcgBzZXRfQnJvd3NlcgBEYlBhcmFtZXRlcgBTcWxQYXJhbWV0ZXIAU3RyZWFtV3JpdGVyAFRl
eHRXcml0ZXIAY29udGFkb3IAUmVjb3JkRXJyb3IATG9nRXJyb3IASUVudW1lcmF0b3IAR2V0RW51
bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAHJlY29yZHMAU3lzdGVtLlJ1
bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2I1YzIxMzkyZGJjNTQw
YWZhODVmODQ5MDIwZWZlMGQyLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dp
bmdNb2RlcwBTVF9iNWMyMTM5MmRiYzU0MGFmYTg1Zjg0OTAyMGVmZTBkMi5Qcm9wZXJ0aWVzAEdl
dFByb3BlcnRpZXMAZ2V0X1RhYmxlcwBnZXRfVmFyaWFibGVzAEJpbmRpbmdGbGFncwBTZXR0aW5n
cwBzZXRfQ3JlZGVudGlhbHMAc2V0X1VzZURlZmF1bHRDcmVkZW50aWFscwBDb250YWlucwBTeXN0
ZW0uQ29sbGVjdGlvbnMAY29ubmVjdGlvbnMAU3RyaW5nU3BsaXRPcHRpb25zAE5NQm9ub3MAZ2V0
X1BhcmFtZXRlcnMAX3Bhc3MAU3VjY2VzcwBNYWlsQWRkcmVzcwBnZXRfSXBBZGRyZXNzAHNldF9J
cEFkZHJlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9BdHRhY2htZW50cwBFeGlzdHMAZ2V0
X1Jvd3MAQ29uY2F0AEZvcm1hdABPYmplY3QAZ2V0X1N1YmplY3QAc2V0X1N1YmplY3QAU2VsZWN0
AFN5c3RlbS5OZXQARGF0YVNldABTcGxpdABnZXRfRGVmYXVsdABTaW5nbGVPckRlZmF1bHQAc2V0
X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFNtdHBDbGllbnQAZ2V0X1JlY2lwaWVu
dABzZXRfUmVjaXBpZW50AEF0dGFjaG1lbnQAZ2V0X0N1cnJlbnQAR2V0Q3VycmVudABnZXRfQ291
bnQAX3BvcnQAVG9MaXN0AElDcmVkZW50aWFsc0J5SG9zdABfaG9zdABGaXJzdABzZXRfQ29tbWFu
ZFRpbWVvdXQATW92ZU5leHQAc2V0X0NvbW1hbmRUZXh0AHYAZ2V0X05vdwBEYXRhUm93AGV4AGdl
dF9DcmVhdGVkQnkAc2V0X0NyZWF0ZWRCeQBHcm91cEJ5AFRvQXJyYXkAZ2V0X0JvZHkAc2V0X0Jv
ZHkAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVyeQBXcml0ZUNzdlRvTWVtb3J5AG9wX0VxdWFs
aXR5AG9wX0luZXF1YWxpdHkAV2luZG93c0lkZW50aXR5AElzTnVsbE9yRW1wdHkAAF1bAEUAeABl
AGMAVQBzAGUAcgA6AHsAMgB9AF0AOgBfADoAWwBlAHgALgBNAHMAZwA6ACAAewAwAH0AXQA6AF8A
OgBbAGUAeAAuAFMAcgBjADoAIAB7ADEAfQBdAAAhOgBfADoAWwB7ADAAfQBdADoAXwA6AFsAewAx
AH0AXQAAIzYAMAAxAC4AQwBhAHQATABvAGcARQByAHIAbwByAFMAaQAAIUAATABvAGcARQByAHIA
bwByAE0AZQBzAHMAYQBnAGUAABdAAFMAdABhAGMAawBUAHIAYQBjAGUAABVAAEkAcABBAGQAZABy
AGUAcwBzAAAVQQB0AHUAbwBtAGEAdABpAGMAbwAAEUAAQgByAG8AdwBzAGUAcgAACVMAUwBJAFMA
ABVAAEMAcgBlAGEAdABlAGQAQgB5AAAVMQAwAC4ANgAuADUALgAyADQAMAAAN1IAQQBGAFQAbwBv
AGwAQAB0AGUAbABlAHAAZQByAGYAbwByAG0AYQBuAGMAZQAuAGMAbwBtAAABAAMwAABFagBhAHYA
aQBlAHIALgByAGEAeQBnAG8AegBhAEAAdABlAGwAZQBwAGUAcgBmAG8AcgBtAGEAbgBjAGUALgBj
AG8AbQAAAzEAAAM7AAAPaQBtAGEAZwBlAG4AcwAAIVUAcwBlAHIAOgA6AEMAbwBuAGUAeABpAG8A
bgBCAEQAABlVAHMAZQByADoAOgBVAG4AaQBkAGEAZAAAH1UAcwBlAHIAOgA6AEUAeAB0AGUAbgBz
AGkAbwBuAAAjVQBzAGUAcgA6ADoAVABpAHAAbwBQAGUAcgBpAG8AZABvAAAReQB5AHkAeQBNAE0A
ZABkAAAhVQBzAGUAcgA6ADoAVABhAGIAbABhAEIAbwBuAG8AcwAAC1QAYQBiAGwAZQAAEUUAbQBw
AGwAZQBhAGQAbwAAB1IAZQBnAAARQwBvAG4AYwBlAHAAdABvAAANQQBjAGMAaQBvAG4AAA1VAG4A
aQBkAGEAZAAAD0kAbQBwAG8AcgB0AGUAABVQAG8AcgBjAGUAbgB0AGEAagBlAAALRgBlAGMAaABh
AAANUwBlAG0AYQBuAGEAABNGAGUAYwBoAGEAXwBJAG4AaQAAE0YAZQBjAGgAYQBfAEYAaQBuAAAR
RAB1AHIAYQBjAGkAbwBuAAALRgBvAGwAaQBvAAAZQwBvAG4AcwBlAGMAdQBlAG4AYwBpAGEAAA9D
AG8AbgB0AHIAbwBsAAAVSQBEAF8ARQBtAHAAcgBlAHMAYQAAHUMASQBBAF8ASQBEAFIAZQBwAG8A
cgB0AGUAbwAADUYAbwBsAGQAZQByAAARQwBvAG0AcABhAG4AaQBhAAANSQBEAF8AUgBFAFAAABlU
AF8ARQBYAF8ARABPAEIAXwBTAEUATQAAGVQAXwBFAFgAVABSAEEAXwBFAFgARQBOAAARRQBNAFAA
TABFAEEARABPAAAHUgBFAEcAABFDAE8ATgBDAEUAUABUAE8AAA1BAEMAQwBJAE8ATgAADVUATgBJ
AEQAQQBEAAAPSQBNAFAATwBSAFQARQAAFVAATwBSAEMARQBOAFQAQQBKAEUAAAtGAEUAQwBIAEEA
AA1TAEUATQBBAE4AQQAAE0YARQBDAEgAQQBfAEkATgBJAAATRgBFAEMASABBAF8ARgBJAE4AABFE
AFUAUgBBAEMASQBPAE4AAAtGAE8ATABJAE8AABlDAE8ATgBTAEUAQwBVAEUATgBDAEkAQQAAD0MA
TwBOAFQAUgBPAEwAAAMyAAARVABQAF8ASQBOAEMASQBEAAADTgAAB0EATABMAAAHRQBMAE8AAAdB
AEcARQAAB0kATQBBAAADXwAAAy8AAAMsAABxUwBUAF8AYgA1AGMAMgAxADMAOQAyAGQAYgBjADUA
NAAwAGEAZgBhADgANQBmADgANAA5ADAAMgAwAGUAZgBlADAAZAAyAC4AUAByAG8AcABlAHIAdABp
AGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAZVAAgAEUAWAAgAEQATwBCACAAUwBFAE0AAABDbi/A
ksvQS7N49vF2xawhAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAqQUHAg4SRQMgAA4FAAASgLUH
AAQODhwcHAQgABJBBgADDg4cHAUAAg4ODgYgAQERgMUFIAASgMkJIAISgM0OEYDRBCABARwFIAEB
EkUDIAAIDwcJEk0SURJVHQ4IDg4ODgUAAgIODgkgAh0OHQ4RgOEFIAASgOUHFRKA6QESSQUgAQET
AAUgAQESSQQgAQECBAABAg4FIAIBDggFIAASgPUHFRKA6QESTQUgAgEODgYgAQESgP0FIAEBElFk
BygODg4OEiwVEmEBEhQOEWUSaRJtEhQScRUSYQEOFRJhARIIFRF1AQ4SMBIIFRJ5AhIUEggIEjQV
EmEBEhgSGBJ9FRF1ARIUEjgOEhgSGA4ODg4ODg4ODhUSeQISCAISgIESQQUgABKBAQUgABKBBQYg
ARKBCRwDIAAcBhUSYQESFAQAABFlBCABDg4EIAECHAUgABKBFQYgARKBEQ4FIAASgRkEIAASaQQg
ARwOAyAAAgUVEmEBDgYVEmEBEggHFRJ5AhIUDgUgAgEcGCAQAgIVEoCFARUSgJkCHgEeABUSgIUB
HgAVEnkCHgAeAQUKAhIUDg0VEnkCFRKAmQIOEhQOGRACAhUSgIUBHgEVEoCFAR4AFRJ5Ah4AHgEL
CgIVEoCZAg4SFA4QEAEBFRJhAR4AFRKAhQEeAAMKAQ4IIAAVEXUBEwAFFRF1AQ4EIAATAAcVEnkC
EhQCGBABAhUSgIUBHgAVEoCFAR4AFRJ5Ah4AAgQKARIUEhABAhUSgIUBHgAVEoCFAR4ACAgVEnkC
EhQSCAYKAhIUEggMEAEBHgAVEoCFAR4ABAoBEggGFRJhARIYBhURdQESFAcVEnkCEhgCBAoBEhgL
EAEBCBUSgIUBHgAFIAEBHQUHFRJ5AhIIAgUgAg4ICAUAAQ4dDgcABA4ODg4OByACAQ4RgSUHIAIK
ChGBLQYgAQESgSkWBwYSfRKAiR0SgI0VEoCRARIYEkAdBQgAARKBMRGBNQkgAR0SgI0RgTkHFRKA
hQESGAkgABUSgJEBEwAHFRKAkQESGAgVEnkCEoCNHAYKAhKAjRwMEAECDg4VEoCFAR4AAwoBHAQg
AB0FBSAAEoFBByACAQ4SgUEGIAIcHB0cCLd6XFYZNOCJCImEXc2AgMyRBCC/AgAEAAAAAAQBAAAA
AgYIAgYOBgYVET0BCAIGAgMGEkkDBhJNBAYSgKEEBhKApQMGEiQDBhEoCQYVEnkCEhQSCAgGFRJ5
AhIIAgMGEhQDBhI8CAYVEnkCEhQODgYVEnkCFRKAmQIOEhQOAwYSGAcgABURPQEICCABARURPQEI
ByADARJBCA4EIAASTQUgAQESTQsgAR0FFRKAhQESGAUAABKAoQUAABKApQYAAQESgKUEAAASJAMA
AAEGIAESCBIUBSABAhIIBSABAhIUBSABAhIYBSABDhIUCyABDhUSgJkCDhIUBiABHBKAjQMoAAgD
KAAOBygAFRE9AQgDKAACBCgAEk0FCAASgKEFCAASgKUECAASJAgBAAgAAAAAAB4BAAEAVAIWV3Jh
cE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYjVjMjEzOTJkYmM1NDBhZmE4NWY4
NDkwMjBlZmUwZDIAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAARwEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAAJhyAAAAAAAAAAAAALJyAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkcgAA
AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAA
ADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYgAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8A
VgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABALh6qx4AAAEAuHqrHj8AAAAA
AAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQA
BAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBs
AGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQA
cwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABl
AEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYgA1AGMAMgAxADMAOQAyAGQAYgBjADUA
NAAwAGEAZgBhADgANQBmADgANAA5ADAAMgAwAGUAZgBlADAAZAAyAAAAPgAPAAEARgBpAGwAZQBW
AGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAOAA1ADEALgAzADEANAAxADYAAAAAAHAAKAABAEkA
bgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AZQA4ADUAMQBmAGMAZgBlAGQAZgAyADIANAA4
ADEANQA4ADAAOAAwADcAOAA3ADMAYwA3ADcAMwBhADIANgA2AC4AZABsAGwAAABIABIAAQBMAGUA
ZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAx
ADgAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8A
cgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBlADgANQAxAGYAYwBmAGUAZABm
ADIAMgA0ADgAMQA1ADgAMAA4ADAANwA4ADcAMwBjADcANwAzAGEAMgA2ADYALgBkAGwAbAAAAGgA
JAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYgA1AGMAMgAxADMAOQAyAGQAYgBj
ADUANAAwAGEAZgBhADgANQBmADgANAA5ADAAMgAwAGUAZgBlADAAZAAyAAAAQgAPAAEAUAByAG8A
ZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADgANQAxAC4AMwAxADQAMQA2AAAAAABG
AA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADgANQAxAC4A
MwAxADQAMQA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAcAAADAAAAMQyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAA==</BinaryItem>
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="106"
                Column="13" />
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="162"
                Column="21" />
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="287"
                Column="29" />
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Execute SQL Task"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{44ABD25F-C424-4CBA-B0BA-A3F53FAF4F27}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute SQL Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{587138F2-3508-4AB4-A5EF-A514BA53DA3D}"
              SQLTask:SqlStatementSource="SELECT&#x9;top 1  TipoPeriodo&#xA;FROM&#x9;[app620].[CatPeriodosNomina]&#xA;WHERE&#x9;convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaCierre)&#xA;      AND  countryidents = @PaisId&#xA;ORDER BY FechaCierre asc"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::TipoPeriodo" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@PaisId"
                SQLTask:DtsVariableName="User::PaisId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="11"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Obtener Bonos NM"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Tarea Ejecutar SQL"
          DTS:DTSID="{0ff9aceb-a392-44b4-a867-d811ea426550}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Obtener Bonos NM"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{587138F2-3508-4AB4-A5EF-A514BA53DA3D}"
              SQLTask:SqlStatementSource="EXEC  [app620].[GeneraArchivoSolicitudSel_ByPais] 239"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::TablaBonos" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@Pais"
                SQLTask:DtsVariableName="User::PaisId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="11"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{AF23F1C9-859F-43CE-9E47-6CC1EBF19D5E}"
          DTS:From="Package\Sequence Container\Execute SQL Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Sequence Container\Obtener Bonos NM" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{582f1871-cb80-4534-8e1a-66258fbab9a9}"
          DTS:From="Package\Sequence Container\Obtener Bonos NM"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container\Enviar Archivo o Depositar Archivo" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{35d9cd53-5c42-42d6-bbdc-16b608fcd133}"
      DTS:From="Package\Sequence Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Borrar unidad de red"
      DTS:Value="2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{5bd45943-d46d-4bd4-bcef-04e4621f0946}"
      DTS:From="Package\Crear unidad de red"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Sequence Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="177,42"
          Id="Package\Borrar unidad de red"
          TopLeft="114,411.357142857143" />
        <NodeLayout
          Size="173,42"
          Id="Package\Crear unidad de red"
          TopLeft="106.285714285714,0.785714285714285" />
        <NodeLayout
          Size="151,42"
          Id="Package\Data Flow Task"
          TopLeft="623.642857142857,81.6428571428572" />
        <NodeLayout
          Size="249,42"
          Id="Package\Sequence Container\Enviar Archivo o Depositar Archivo"
          TopLeft="27,165" />
        <NodeLayout
          Size="168,42"
          Id="Package\Sequence Container\Obtener Bonos NM"
          TopLeft="72.6666666666666,97.5" />
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint]"
          TopLeft="185,44.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-28.3333333333333,53"
              Start="0,0"
              End="-28.3333333333333,45.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,22.5"
                    Point2="0,26.5"
                    Point3="-4,26.5" />
                  <mssgle:LineSegment
                    End="-24.3333333333333,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-24.3333333333333,26.5"
                    Point2="-28.3333333333333,26.5"
                    Point3="-28.3333333333333,30.5" />
                  <mssgle:LineSegment
                    End="-28.3333333333333,45.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="154.083333333333,139.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25.5"
              Start="0,0"
              End="0,18">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="163,42"
          Id="Package\Sequence Container\Execute SQL Task"
          TopLeft="103.5,2.5" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="289,263"
          Size="289,306"
          Id="Package\Sequence Container"
          TopLeft="253.857142857143,57.5714285714286" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="398.357142857143,363.571428571429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-195.857142857143,47.7857142857144"
              Start="0,0"
              End="-195.857142857143,40.2857142857144">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.8928571428572" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.8928571428572"
                    Point2="0,23.8928571428572"
                    Point3="-4,23.8928571428572" />
                  <mssgle:LineSegment
                    End="-191.857142857143,23.8928571428572" />
                  <mssgle:CubicBezierSegment
                    Point1="-191.857142857143,23.8928571428572"
                    Point2="-195.857142857143,23.8928571428572"
                    Point3="-195.857142857143,27.8928571428572" />
                  <mssgle:LineSegment
                    End="-195.857142857143,40.2857142857144" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-123.233024553572,28.8928571428572,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="279.285714285714,21.7857142857143">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="119.071428571429,35.7857142857143"
              Start="0,0"
              End="119.071428571429,28.2857142857143">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="115.071428571429,0" />
                  <mssgle:CubicBezierSegment
                    Point1="115.071428571429,0"
                    Point2="119.071428571429,0"
                    Point3="119.071428571429,4" />
                  <mssgle:LineSegment
                    End="119.071428571429,28.2857142857143" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>