<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/10/2019 3:52:32 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PC1015238198"
  DTS:CreatorName="DB\raygozatorres.5"
  DTS:DTSID="{A0AB5E27-2BD3-41A3-BCC8-F7EF45B9E742}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.68"
  DTS:LocaleID="1033"
  DTS:ObjectName="Bonos"
  DTS:PackageType="5"
  DTS:VersionBuild="25"
  DTS:VersionGUID="{20B947C8-BA5E-4CED-8D84-77A5473DEF75}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9AD3CF04-7738-4C9C-9640-92817D35CAD6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConexionBD">
      <DTS:VariableValue
        DTS:DataType="8">Server=PC1015238228;Database=ASN;User Id=sa;Password=Cr1pt0n0m1c0n;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{14C3EED8-9973-48B3-980F-0FBE5BD7B08A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Extension">
      <DTS:VariableValue
        DTS:DataType="8">.txt</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2AE7F006-1F52-49D9-8D4B-E59D6A7EF63E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Resultado">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{80F59E18-0111-42E4-861A-5CC5AEA36235}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="TablaBonos">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{679A37EB-EECB-4796-AAF9-2ACFF2E60069}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Unidad">
      <DTS:VariableValue
        DTS:DataType="8">X:</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Borrar unidad de red"
      DTS:CreationName="Microsoft.ExecuteProcess"
      DTS:Description="Execute Process Task"
      DTS:DTSID="{121fd790-fe8d-4e65-b683-3d5e59d470a7}"
      DTS:ExecutableType="Microsoft.ExecuteProcess"
      DTS:LocaleID="-1"
      DTS:ObjectName="Borrar unidad de red"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecuteProcessData
          Executable="cmd.exe"
          RequireFullFileName="False"
          Arguments="/c NET USE X:  /delete /y" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Crear unidad de red"
      DTS:CreationName="Microsoft.ExecuteProcess"
      DTS:Description="Execute Process Task"
      DTS:DTSID="{2338210b-9281-4a58-99bc-d396b00b6c78}"
      DTS:ExecutableType="Microsoft.ExecuteProcess"
      DTS:LocaleID="-1"
      DTS:ObjectName="Crear unidad de red"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecuteProcessData
          Executable="cmd.exe"
          Arguments="/c NET USE X: &quot;C:\tp&quot; /user:consiss" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Sequence Container"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{30385cf8-fdb9-4011-b4ea-14d6442da145}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Sequence Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Enviar Archivo o Depositar Archivo"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Tarea Script"
          DTS:DTSID="{8be5b052-643a-4edb-925f-326ac67e1742}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Enviar Archivo o Depositar Archivo"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_e851fcfedf22481580807873c773a266"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::ConexionBD,User::Extension,User::TablaBonos,User::Unidad">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="MailHelper.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Net;
using System.Net.Mail;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    class MailHelper
    {
        private const int Timeout = 180000;
        private readonly string _host;
        private readonly int _port;
        private readonly string _user;
        private readonly string _pass;
        private readonly bool _ssl;
        private readonly MailAddress _sender;
        private readonly string testing;
        private readonly string testingMail;
        //private readonly MailAddress testingMail;

        public string Recipient { get; set; }
        public string RecipientCC { get; set; }
        public string RecipientCCO { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
        public bool IsBodyHtml { get; set; }
        public string AttachmentFile { get; set; }
        public Attachment archivo { get; set; }

        public MailHelper()
        {
            //MailServer - Represents the SMTP Server
            _host = "10.6.5.240";
            //Port- Represents the port number
            _port = 25;
            //MailAuthUser and MailAuthPass - Used for Authentication for sending email
            _sender = new MailAddress("RAFTool@teleperformance.com");
            _user = "";
            _pass = "";
            _ssl = true;
            testing = "0";
            //testingMail = new MailAddress(ConfigurationManager.AppSettings["testingMail"]);
            testingMail = "javier.raygoza@teleperformance.com";
        }

        public void Send()
        {
            try
            {

                Attachment att = null;
                var message = new MailMessage();

                if (testing == "1")
                {
                    foreach (var address in testingMail.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        message.To.Add(new MailAddress(address));
                    }

                    //message.To.Add(testingMail);
                }
                else
                {
                    //Split each email on the field
                    foreach (var address in Recipient.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        message.To.Add(new MailAddress(address));
                    }
                }

                message.Subject = Subject;
                message.From = _sender;
                message.Body = Body;
                message.IsBodyHtml = IsBodyHtml;

                if (testing != "1")
                {
                    if (!String.IsNullOrEmpty(RecipientCC))
                    {
                        foreach (var address in RecipientCC.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            message.CC.Add(address);
                        }
                    }

                    if (!String.IsNullOrEmpty(RecipientCCO))
                    {
                        foreach (var address in RecipientCCO.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            message.Bcc.Add(address);
                        }
                    }
                }

                var smtp = new SmtpClient(_host, _port);

                if (!String.IsNullOrEmpty(AttachmentFile))
                {
                    if (File.Exists(AttachmentFile))
                    {
                        att = new Attachment(AttachmentFile);
                        att.ContentId = "imagens";
                        message.Attachments.Add(att);
                    }
                }

                if (archivo != null)
                {
                    message.Attachments.Add(archivo);
                }

                if (_user.Length > 0 && _pass.Length > 0)
                {
                    smtp.UseDefaultCredentials = false;
                    smtp.Credentials = new NetworkCredential(_user, _pass);
                    smtp.EnableSsl = _ssl;
                }

                smtp.Send(message);

                if (att != null)
                    att.Dispose();
                message.Dispose();
                smtp.Dispose();
            }

            catch
            {
                //TODO: Enviar error a log de bd
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="RafToolObj.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    public class RafToolObj
    {
        public string Empleado { get; set; }
        public string Reg { get; set; }
        public string Concepto { get; set; }
        public string Accion { get; set; }
        public string Unidad { get; set; }
        public string Importe { get; set; }
        public string Porcentaje { get; set; }
        public string Fecha { get; set; }
        public string Semana { get; set; }
        public string Fecha_Ini { get; set; }
        public string Fecha_Fin { get; set; }
        public string Duracion { get; set; }
        public string Folio { get; set; }
        public string Consecuencia { get; set; }
        public string Control { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Settings.get_Default():ST_b5c21392dbc540afa85f849020efe0d2.Properties.Sett" +
    "ings")]

namespace ST_b5c21392dbc540afa85f849020efe0d2.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_b5c21392dbc540afa85f849020efe0d2</msb:CodeName>
		<msb:DisplayName>ST_b5c21392dbc540afa85f849020efe0d2</msb:DisplayName>
		<msb:ProjectId>{A3DDDEB1-E98D-4AC1-9980-1641336997C6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_e851fcfedf22481580807873c773a266.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="MailHelper.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="LogError.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="RafToolBonos.cs"/>
		<msb:File Include="RafToolObj.cs"/>
		<msb:File Include="BonoInfo.cs"/>
		<msb:Breakpoint Include="c34f8cf744d445cca90dfb3ae6f66e64">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>106</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="41d7659cb7a54370a51a9ad575f8127c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>21</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>161</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="d497b4bcb6ea48d4a3e78f4b28d5be9d">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>275</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="RafToolBonos.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    public class NMBonos
    {
        public string Empleado { get; set; }
		public string Reg { get; set; }
		public string Concepto { get; set; }
		public string Accion { get; set; }
        public string Unidad { get; set; }
        public string Importe { get; set; }
        public string Porcentaje { get; set; }
        public string Fecha { get; set; }
	    public string Semana { get; set; }
		public string Fecha_Ini { get; set; }
        public string Fecha_Fin { get; set; }
        public string Duracion { get; set; }
        public string Folio { get; set; }
        public string Consecuencia { get; set; }
        public string Control { get; set; }
        public string ID_Empresa { get; set; }
        public string CIA_IDReporteo { get; set; }
        public string Folder { get; set; }
        public string Compania { get; set; }
        public string ID_REP { get; set; }
        public string T_EX_DOB_SEM { get; set; }
        public string T_EXTRA_EXEN { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b5c21392dbc540afa85f849020efe0d2")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b5c21392dbc540afa85f849020efe0d2")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b5c21392dbc540afa85f849020efe0d2.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b5c21392dbc540afa85f849020efe0d2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Reflection;
using System.Linq;
using System.Collections.Generic;
using System.Net.Mail;
#endregion

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            //using (var memoryStream = new MemoryStream())
            //using (var streamWriter = new StreamWriter(memoryStream))
            //using (var csvWriter = new CsvWriter(streamWriter))
            //{
            //    //csvWriter.WriteRecords(records);
            //    //streamWriter.Flush();
            //}

            var connections = Dts.Variables["User::ConexionBD"].Value.ToString();
            var unidad = Dts.Variables["User::Unidad"].Value.ToString();
            var extension = Dts.Variables["User::Extension"].Value.ToString();

            try
            {
                //var people = new List<Person> { new Person("Matt", "Abbott"), new Person("John Smith","") };
                //WriteCSV(people, @"C:\DemoCSv\people.csv");
                //User::TablaReferidosConBono
                var records = new List<NMBonos>();
                //var FechaDeCreacion = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                var FechaDeCreacion = DateTime.Now.ToString("yyyyMMdd");
                var numerin = 1;
                var contador = 1;

                if (Dts.Variables.Contains("User::TablaBonos"))
                {
                    var x = (DataSet)Dts.Variables["User::TablaBonos"].Value;

                    DataTable dt = new DataTable();

                    dt = x.Tables["Table"];

                    

                    foreach (DataRow dr in dt.Rows)
                    {
                        var p = new NMBonos();

                        p.Empleado = dr["Empleado"].ToString();
                        p.Reg = dr["Reg"].ToString();
                        p.Concepto = dr["Concepto"].ToString();
                        p.Accion = dr["Accion"].ToString();
                        p.Unidad = dr["Unidad"].ToString();
                        p.Importe = dr["Importe"].ToString();
                        p.Porcentaje = dr["Porcentaje"].ToString();
                        p.Fecha = dr["Fecha"].ToString();
                        p.Semana = dr["Semana"].ToString();
                        p.Fecha_Ini = dr["Fecha_Ini"].ToString();
                        p.Fecha_Fin = dr["Fecha_Fin"].ToString();
                        p.Duracion = dr["Duracion"].ToString();
                        p.Folio = dr["Folio"].ToString();
                        p.Consecuencia = dr["Consecuencia"].ToString();
                        p.Control = dr["Control"].ToString();
                        p.ID_Empresa = dr["ID_Empresa"].ToString();
                        p.CIA_IDReporteo = dr["CIA_IDReporteo"].ToString();
                        p.Folder = dr["Folder"].ToString();
                        p.Compania = dr["Compania"].ToString();
                        p.ID_REP = dr["ID_REP"].ToString();
                        p.T_EX_DOB_SEM = dr["T_EX_DOB_SEM"].ToString();
                        p.T_EXTRA_EXEN = dr["T_EXTRA_EXEN"].ToString();

                        records.Add(p);
                    }

                    if (records.Count > 0)
                    {
                        var listaDeCIA = new List<string>();
                        var listaDeBonoInfo = new List<BonoInfo>();

                        listaDeCIA = records
                                      .GroupBy(p => p.CIA_IDReporteo)
                                      .Select(g => g.First().CIA_IDReporteo)
                                      .ToList();

                        foreach (var CIA in listaDeCIA)
                        {
                            var elBonoInfo = records.Where(v => v.CIA_IDReporteo == CIA).Take(1).Select(c =>
                               new BonoInfo
                               {
                                   ID = contador,
                                   CIA_IDReporteo = c.CIA_IDReporteo,
                                   Compania = c.Compania,
                                   Folder = c.Folder,
                                   ID_Empresa = c.ID_Empresa,
                                   ID_REP = c.ID_REP
                               }
                           ).SingleOrDefault();

                            contador++;

                            listaDeBonoInfo.Add(elBonoInfo);
                        }


                        foreach (var IDCIA in listaDeCIA)
                        {
                            var liston = new List<NMBonos>();
                            var bonosArchivo = new List<RafToolObj>();

                            var p1 = new RafToolObj();

                            p1.Empleado = "EMPLEADO";
                            p1.Reg = "REG";
                            p1.Concepto = "CONCEPTO";
                            p1.Accion = "ACCION";
                            p1.Unidad = "UNIDAD";
                            p1.Importe = "IMPORTE";
                            p1.Porcentaje = "PORCENTAJE";
                            p1.Fecha = "FECHA";
                            p1.Semana = "SEMANA";
                            p1.Fecha_Ini = "FECHA_INI";
                            p1.Fecha_Fin = "FECHA_FIN";
                            p1.Duracion = "DURACION";
                            p1.Folio = "FOLIO";
                            p1.Consecuencia = "CONSECUENCIA";
                            p1.Control = "CONTROL";

                            bonosArchivo.Add(p1);

                            liston = records.Where(morro => morro.CIA_IDReporteo == IDCIA).ToList();

                            foreach(var obj  in liston)
                            {
                                string numeroDeSemana = obj.T_EX_DOB_SEM == "1" ? "1" : "";

                                var bono = new RafToolObj();

                                bono.Empleado = obj.Empleado;
                                bono.Reg = obj.Reg;
                                bono.Concepto = obj.Concepto.ToUpper();
                                bono.Accion = obj.Accion;
                                bono.Unidad = obj.Unidad;
                                bono.Importe = obj.Importe;
                                bono.Porcentaje = obj.Porcentaje;
                                bono.Fecha = obj.Fecha;
                                bono.Semana = numeroDeSemana;
                                bono.Fecha_Ini = obj.Fecha_Ini;
                                bono.Fecha_Fin = obj.Fecha_Fin;
                                bono.Duracion = obj.Duracion;
                                bono.Folio = obj.Folio;
                                bono.Consecuencia = obj.Consecuencia;
                                bono.Control = obj.Control;

                                bonosArchivo.Add(bono);

                                //Estos dos siempre van juntos cuando se ponga el concepto de “T EX DOB SEM” siempre 
                                //debe ir acompañado de “T EXTRA EXEN” además de que en la columna de semana siempre va 
                                //el número 1 en ambos conceptos. Para el concepto “T EXTRA EXEN” la columna unidad va vacia.
                                //-Mireya Cavazos  Diciembre 2019
                                if (obj.T_EX_DOB_SEM == "1")
                                {
                                    var bonoTExtra = new RafToolObj();

                                    bonoTExtra.Empleado = obj.Empleado;
                                    bonoTExtra.Reg = obj.Reg;
                                    bonoTExtra.Concepto = obj.T_EXTRA_EXEN;
                                    bonoTExtra.Accion = obj.Accion;
                                    bonoTExtra.Unidad = "";
                                    bonoTExtra.Importe = obj.Importe;
                                    bonoTExtra.Porcentaje = obj.Porcentaje;
                                    bonoTExtra.Fecha = obj.Fecha;
                                    bonoTExtra.Semana = numeroDeSemana;
                                    bonoTExtra.Fecha_Ini = obj.Fecha_Ini;
                                    bonoTExtra.Fecha_Fin = obj.Fecha_Fin;
                                    bonoTExtra.Duracion = obj.Duracion;
                                    bonoTExtra.Folio = obj.Folio;
                                    bonoTExtra.Consecuencia = obj.Consecuencia;
                                    bonoTExtra.Control = obj.Control;

                                    bonosArchivo.Add(bonoTExtra);
                                }
                            }

                            var result = WriteCsvToMemory(bonosArchivo);
                            var memoryStream = new MemoryStream(result);

                            /// El numero 10 es simbolicos, solo es para comprobar que tegno registros, tratandose de Miles
                            /// deberia tener mas de 10 registros pues es segun los empleados que hay en la compañia con Miles.
                            if (records.Count > 0)
                            {
                                var IdentificadorArchivo = "TP_INCID";
                                var TipoNominas = "NO";
                                var Compania = listaDeBonoInfo.Where(r => r.ID == numerin).SingleOrDefault().Compania.ToUpper();
                                var ID_REP = listaDeBonoInfo.Where(r => r.ID == numerin).SingleOrDefault().ID_REP.ToUpper();
                                var Ciudad = "ALL";
                                var TipoIncidencia = "IMA";
                                var FolderPath = listaDeBonoInfo.Where(r => r.ID == numerin).SingleOrDefault().Folder.ToUpper();
                                var FolderPathSubtring = FolderPath.Substring(4, FolderPath.Length - 4);
                                var nombreArchivo = IdentificadorArchivo + "_" + TipoNominas + "_" + Compania + "_" + ID_REP + "_" + Ciudad + "_" + TipoIncidencia + "_" + FechaDeCreacion + extension;

                                //using (FileStream fs = new FileStream("Z:\\MILES\\ML_Miles_" + FechaDeCreacion + ".csv", FileMode.Create))
                                //using (FileStream fs = new FileStream("C:" + "//RafArchivo/basura/basuron" + "/" + nombreArchivo, FileMode.Create))
                                using (FileStream fs = new FileStream(unidad + FolderPathSubtring + "/" + nombreArchivo, FileMode.Create))
                                {
                                    numerin++;
                                    memoryStream.Seek(0, SeekOrigin.Begin);
                                    memoryStream.CopyTo(fs);
                                    fs.Flush();
                                }
                            }
                        }
                    }
                }

                //var records = new List<Person>();
                //records.Add(new Person { uno = "hola", dos = "mundo", tres = "ho1" });
                //records.Add(new Person { uno = "holas", dos = "mundos", tres = "ho2" });
                //records.Add(new Person { uno = "holas3", dos = "mundos3", tres = "ho3" });
                //records.Add(new Person { uno = "holas4", dos = "mundos4", tres = "ho4" });
                //records.Add(new Person { uno = "holas5", dos = "mundos5", tres = "ho5" });
                
                //var result = WriteCsvToMemory(records);
                //var memoryStream = new MemoryStream(result);

                ///// El numero 10 es simbolicos, solo es para comprobar que tegno registros, tratandose de Miles
                ///// deberia tener mas de 10 registros pues es segun los empleados que hay en la compañia con Miles.
                //if (records.Count > 10)
                //{
                //    //using (FileStream fs = new FileStream("Z:\\MILES\\ML_Miles_" + FechaDeCreacion + ".csv", FileMode.Create))
                //    using (FileStream fs = new FileStream("C:\\RafArchivo\\" + FechaDeCreacion + extension, FileMode.Create))
                //    {
                //        memoryStream.Seek(0, SeekOrigin.Begin);
                //        memoryStream.CopyTo(fs);
                //        fs.Flush();
                //    }
                //}

                //Attachment att = new Attachment(memoryStream, "test.csv");

                //MailHelper mail = new MailHelper();

                //mail.archivo = att;
                //mail.Recipient = Dts.Variables["User::EmailReport"].Value.ToString(); ;
                //mail.Subject = "test from dtsx email with csv";

                //if (records.Count > 0)
                //{
                //    mail.Send();
                //}
            }
            catch (Exception ex)
            {
                LogError log = new LogError();
                log.RecordError(ex, 1, connections);
            }

            // TODO: Add your code here

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        public byte[] WriteCsvToMemory(IEnumerable<RafToolObj> records)
        {


            using (var memoryStream = new MemoryStream())
            using (var streamWriter = new StreamWriter(memoryStream))
            //using (var csvWriter = new CsvWriter(streamWriter))
            {
                Type itemType = typeof(RafToolObj);
                var props = itemType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
                //.OrderBy(p => p.Name);

                //streamWriter.WriteLine(string.Join(", ", props.Select(p => p.Name)));

                foreach (var item in records)
                {
                    streamWriter.WriteLine(string.Join(",", props.Select(p => p.GetValue(item, null))));
                }

                //csvWriter.WriteRecords(records);
                //streamWriter.WriteLine(records);
                streamWriter.Flush();
                return memoryStream.ToArray();
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="BonoInfo.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    public class BonoInfo
    {
        public int ID { get; set; }
        public string ID_Empresa { get; set; }
        public string CIA_IDReporteo { get; set; }
        public string Folder { get; set; }
        public string Compania { get; set; }
        public string ID_REP { get; set; }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_e851fcfedf22481580807873c773a266.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{F0113C09-E455-4949-946A-08358AF186B6}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_b5c21392dbc540afa85f849020efe0d2</RootNamespace><AssemblyName>ST_e851fcfedf22481580807873c773a266</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="BonoInfo.cs" /><Compile Include="LogError.cs" /><Compile Include="MailHelper.cs" /><Compile Include="RafToolBonos.cs" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="RafToolObj.cs" /><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST120</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="LogError.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Data.SqlClient;

namespace ST_b5c21392dbc540afa85f849020efe0d2
{
    class LogError
    {
        public string LogErrorMessage { get; set; }
        public string StackTrace { get; set; }
        public string IpAddress { get; set; }
        public string Browser { get; set; }
        public Nullable<int> CreatedBy { get; set; }

        public void RecordError(Exception ex, int EID, string connections)
        {
            try
            {
                string MessageInnerEx = string.Format("[ExecUser:{2}]:_:[ex.Msg: {0}]:_:[ex.Src: {1}]"
                            , ex.Message, ex.Source, System.Security.Principal.WindowsIdentity.GetCurrent().Name);
                if (ex.InnerException != null)
                {
                    MessageInnerEx += string.Format(":_:[{0}]:_:[{1}]", ex.InnerException.Message, ex.InnerException.StackTrace);
                }

                SqlConnection conn = new SqlConnection(connections);

                SqlCommand cmd = new SqlCommand();

                cmd.CommandText = "601.CatLogErrorSi";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add("@LogErrorMessage", System.Data.SqlDbType.VarChar).Value = MessageInnerEx;
                cmd.Parameters.Add("@StackTrace", System.Data.SqlDbType.VarChar).Value = ex.StackTrace;
                cmd.Parameters.Add("@IpAddress", System.Data.SqlDbType.VarChar).Value = "Atuomatico";
                cmd.Parameters.Add("@Browser", System.Data.SqlDbType.VarChar).Value = "SSIS";
                cmd.Parameters.Add("@CreatedBy", System.Data.SqlDbType.Int).Value = 1;

                cmd.Connection = conn;
                cmd.CommandTimeout = 600;

                conn.Open();

                int i = cmd.ExecuteNonQuery();

                conn.Close();
            }
            catch (Exception exs)
            {

            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_e851fcfedf22481580807873c773a266.dll">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
SgAABCUtGCYJCf4GgwAABnNkAAAKJRMQfUoAAAQRECgGAAArKAcAACsTDwl7SAAABBMRCRERF1h9
SAAABBEMEQ9vZgAAChINKGcAAAotgN4OEg3+FggAABtvVgAACtwRC29fAAAKEw041gQAAHOJAAAG
ExIREhINKGAAAAp9TwAABHNJAAAKJnNoAAAKExNzdwAABhMUERRyGQQAcG9aAAAGERRyKwQAcG9c
AAAGERRyMwQAcG9eAAAGERRyRQQAcG9gAAAGERRyUwQAcG9iAAAGERRyYQQAcG9kAAAGERRycQQA
cG9mAAAGERRyhwQAcG9oAAAGERRykwQAcG9qAAAGERRyoQQAcG9sAAAGERRytQQAcG9uAAAGERRy
yQQAcG9wAAAGERRy2wQAcG9yAAAGERRy5wQAcG90AAAGERRyAQUAcG92AAAGERMRFG9pAAAKEQQR
Ev4GigAABnNhAAAKKAQAACsoCAAAK29qAAAKExY4/QEAABIWKGsAAAoTFxEXb1QAAAZy1wEAcCgo
AAAKLQdyiwEAcCsFctcBAHATGHN3AAAGExkRGREXbywAAAZvWgAABhEZERdvLgAABm9cAAAGERkR
F28wAAAGb2wAAApvXgAABhEZERdvMgAABm9gAAAGERkRF280AAAGb2IAAAYRGREXbzYAAAZvZAAA
BhEZERdvOAAABm9mAAAGERkRF286AAAGb2gAAAYRGREYb2oAAAYRGREXbz4AAAZvbAAABhEZERdv
QAAABm9uAAAGERkRF29CAAAGb3AAAAYRGREXb0QAAAZvcgAABhEZERdvRgAABm90AAAGERkRF29I
AAAGb3YAAAYRExEZb2kAAAoRF29UAAAGctcBAHAoKAAACjnbAAAAc3cAAAYTGhEaERdvLAAABm9a
AAAGERoRF28uAAAGb1wAAAYRGhEXb1YAAAZvXgAABhEaERdvMgAABm9gAAAGERpyiwEAcG9iAAAG
ERoRF282AAAGb2QAAAYRGhEXbzgAAAZvZgAABhEaERdvOgAABm9oAAAGERoRGG9qAAAGERoRF28+
AAAGb2wAAAYRGhEXb0AAAAZvbgAABhEaERdvQgAABm9wAAAGERoRF29EAAAGb3IAAAYRGhEXb0YA
AAZvdAAABhEaERdvSAAABm92AAAGERMRGm9pAAAKEhYobQAACjr3/f//3g4SFv4WDAAAG29WAAAK
3AIREyh5AAAGc24AAAoTFREEb1cAAAoWPpYBAAByEQUAcBMbciMFAHATHBEMCXtLAAAEJS0YJgkJ
/gaEAAAGc28AAAolEyR9SwAABBEkKAkAACsoBwAAK28JAAAGb2wAAAoTHREMCXtMAAAEJS0YJgkJ
/gaFAAAGc28AAAolEyR9TAAABBEkKAkAACsoBwAAK28LAAAGb2wAAAoTHnIpBQBwEx9yMQUAcBMg
EQwJe00AAAQlLRgmCQn+BoYAAAZzbwAACiUTJH1NAAAEESQoCQAAKygHAAArbwcAAAZvbAAAChMh
ESEaESFvOwAAChpZb3AAAAoTIh8OjS4AAAElFhEboiUXcjkFAHCiJRgRHKIlGXI5BQBwoiUaER2i
JRtyOQUAcKIlHBEeoiUdcjkFAHCiJR4RH6IlHwlyOQUAcKIlHwoRIKIlHwtyOQUAcKIlHwwRBaIl
Hw0IoihxAAAKEyMHESJyPQUAcBEjKHIAAAoYc3MAAAoTJQl7SQAABBMRCRERF1h9SQAABBEVFmoW
b3QAAAomERURJW91AAAKESVvdgAACt4MESUsBxElb1YAAArcEg0oZwAACjoe+///3g4SDf4WCAAA
G29WAAAK3N4SEyZzGQAABhEmFwZvGAAABt4AAihEAAAKFm93AAAKKkGUAAACAAAA6gAAAEECAAAr
AwAAFQAAAAAAAAACAAAAtQMAAIQAAAA5BAAADgAAAAAAAAACAAAAWwUAABACAABrBwAADgAAAAAA
AAACAAAA8AgAAC8AAAAfCQAADAAAAAAAAAACAAAAUAQAAOkEAAA5CQAADgAAAAAAAAAAAAAAYAAA
AOkIAABJCQAAEgAAABAAAAEbMAUAmgAAAAQAABFzeAAACgoGc3kAAAoL0AYAAAIoegAACh8Ub3sA
AAoMA298AAAKDSs3c48AAAYTBBEECW99AAAKfVMAAAQHckEFAHAIEQT+BpAAAAZzfgAACigKAAAr
KAsAACtvgAAACglvVQAACi3B3goJLAYJb1YAAArcB2+BAAAKBm+CAAAKEwXeFAcsBgdvVgAACtwG
LAYGb1YAAArcEQUqAAABKAAAAgAmAENpAAoAAAAAAgANAHaDAAoAAAAAAgAGAIeNAAoAAAAAHgIo
gwAACiqufkIAAAQtHnJFBQBw0AgAAAIoegAACm+EAAAKc4UAAAqAQgAABH5CAAAEKhp+QwAABCoe
AoBDAAAEKhp+RAAABCoeAiiGAAAKKi5zgAAABoBEAAAEKgAAEzADAE4AAAAAAAAAcw0AAAYlAntI
AAAEbwIAAAYlA29MAAAGbwYAAAYlA29QAAAGbwoAAAYlA29OAAAGbwgAAAYlA29KAAAGbwQAAAYl
A29SAAAGbwwAAAYqPgNvAQAABgJ7SQAABP4BKkoDb0wAAAYCe04AAAQoKAAACipKA29MAAAGAntP
AAAEKCgAAAoqLnOMAAAGgFAAAAQqHgNvTAAABioyAygMAAArb0wAAAYqOgMCe1MAAAQUb4gAAAoq
QlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAiBsAACN+AAD0GwAATBQAACNTdHJp
bmdzAAAAAEAwAAC4BQAAI1VTAPg1AAAQAAAAI0dVSUQAAAAINgAAKAUAACNCbG9iAAAAAAAAAAIA
AAFXHaIJCQsAAAD6ATMAFgAAAQAAAFAAAAAPAAAAUwAAAJAAAABGAAAAiAAAAAMAAAC9AAAABAAA
AAcAAAA7AAAAdAAAABAAAAABAAAABgAAAAEAAAAGAAAADAAAAAAAowwBAAAAAAAGAHoKgRAGAAkL
gRAGAMYJZhAPAPUQAAAGAPMJ+Q0GAF0K+Q0GAD4K+Q0GAPAK+Q0GAJoK+Q0GALMK+Q0GAAoK+Q0G
ACUKWgsGAGYSOg0GAI4JgRAGAIMAOg0GAKYOOg0KAI8O0BIOAPoRhwwOAA0ThwwOAJIHhwwOAOYS
hwwSAM4K6wsSAPUI6wsGALcAMAMGAGYIOg0GAD8QoxEKAJsTDwMGAAcIOg1jAE4QAAAGAOQAOg0G
AB8NRAIGABQNRAIGAI4AMAMGAAkQRAIGACYP+Q0GAKkAMAMGAEoNOg0WAOsAgQ8GAKkJZhAGAK8P
oRAGABEP5A0OAGEJcQwOANoJcQwOACwJzw0GACwUJgwGAHYLOg0KADQH0BIKACoHsA4KAKcIDwMK
AB8O0BIKAPwP0BIKAJkIDwMKAPAPsA4GAL4AOg0KAIIOsA4GAMIROg0OADYOhwwGAJwAQAwGAFgI
RAIOAEQJhwwOAEwOhwwOABQMjBIOAEYTjBISAF8M6wsaAFARbwgaAPMHbwgKAJcSDwMKAOkHDwMK
AAsODwMKAGEODwMKABEJDwMWAPwHgQ8GAH0HRAIGACUNRAIGAIcNRAIGAK4IOg0GABMIOg0GAFoR
+Q0GABYQRAIGAOgT+Q0AAAAAlgEAAAAAAQABAAEAEAAdD/cANQABAAEAAAAQADYQ9wA1AAcADgAA
ABAAvw/3ADUADAAaAAEAEADVEfcANQAdACwAAQAQALwL9wA1ADMAWQABABAAfA33AF0AQgB4AAAA
EACoEAQRNQBCAHsAAAEQAGcRBBGxAEQAfwADAQAAKhIAAJUARQCCAAMBEAAXAAAANQBIAIIAAwEQ
AG4AAAA1AE4AhwADARAAxAAAADUATwCJAAMhEAAkAwAANQBQAIsAAwEQACwAAAA1AFMAjwABAJAD
agMBAH0EbQMBAA8GbQMBAHkGbQMBAEsEbQMBAP4DbQMBAM0EbQMBALEEbQMBAKoGbQMBAJEGbQMB
APkGcANRgHATagMhAFkTbQMhADkTagMhANIPbQMhAOwRbQMhAA8NdwMhAKMPegMhAIcLbQMhAJcM
bQMBAN4GbQMBAHMDbQMBAOADbQMBAMUGbQMBABQHbQMBAHMFdwMBAAoFbQMBAGAGfgMBAPUFbQMB
AEMFbQMBAEYGbQMBAN0FbQMBAJkEbQMBACoFbQMBAO4EbQMBABYEbQMBAGUEbQMBAFgFbQMBAKgF
bQMBAMMFbQMBAC8GbQMBAC0EbQMBAI8FbQMBAH0EbQMBAA8GbQMBAHkGbQMBAEsEbQMBAP4DbQMB
AKQDbQMBAMIDbQMBAPUFbQMBAEMFbQMBAEYGbQMBAN0FbQMBAJkEbQMBACoFbQMBAO4EbQMBABYE
bQMBAGUEbQMBAFgFbQMBAKgFbQMBAMMFbQMBAC8GbQMBAC0EbQMBAI8FbQMRAE8NggMRAOUIhwMR
AGIHjAMGBoMCagNWgPIRkANWgMUIkAMGACEQagMGAJcNagMGABsBlAMGADgBngMGAG4BngMGAIAB
ngMGAKEBbQMGAJ8BbQM2AJIBpwMWAAEAqwMWAFgAtAMGADUNwwNQIAAAAACGCNABaAABAFggAAAA
AIYI1wEBAAEAYSAAAAAAhgjxAiIAAgBpIAAAAACGCAADEAACAHIgAAAAAIYI6w4iAAMAeiAAAAAA
hgj+DhAAAwCDIAAAAACGCI0PIgAEAIsgAAAAAIYImA8QAAQAlCAAAAAAhgjBAiIABQCcIAAAAACG
CM4CEAAFAKUgAAAAAIYITgIiAAYArSAAAAAAhghZAhAABgC2IAAAAACGGFkQBgAHAL4gAAAAAIYI
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
TgHZACwNgAEcAG8DmgDRAHgThQHhAFkJBgAcAC8TaAAkAFkQBgAsAFkQBgA0AFkQngFBAsITpAE8
AFkQngFBAoUS2QFBAj8T/wEkAEsQFAJEABgTIwJMAFkQngFBArMIMAJBAuQHTgJUAFkQngFBArES
cQIsAG8DmgBEAHgThQFcAFkQBgBcAG8DmgAcAEsQFAJkABgTIwJxAcoPIgBkAHgThQH5AFkQkQJs
AFkQngFxAX0LnwJxAVgSpQJxAVgSqwIBAVkQswJRAscLuwJRAsoOwwJRAo8LBgABAsESAQD5AFkQ
BgARAVkQwwJhAiUI4QJhAjMR6gJ0AEsQ/AJ8ABgTIwKEAFkQngFxAZINHgN5Ao8IEAB5Ao8LBgD5
AMoTLwO5AFkQBgBhAuQTNANBAVkQOgNhAVkQBgBBAl8TcQIZATsLQgMIADAAWwMIABgBYAMIABwB
ZQMgAGMAZQMhAGMAZQMuAAsAaQQuABMAcgQuABsAkQQuACMAmgQuACsAwwQuADMAwwQuADsAwwQu
AEMAmgQuAEsAyQQuAFMAwwQuAFsA4ARAAGMAZQNBAGMAZQNgAGMAZQNhAGMAZQOAAGMAZQOBAGMA
ZQOgAGMAZQOhAGMAZQPAAGMAZQPBAGMAZQPgAGMAZQPhAGMAZQPjAGsAZQMAAWMAZQMBAWMAZQMD
AXMAZQMgAWMAZQMhAWMAZQNAAWMAZQNBAWMAZQNgAWMAZQNhAWMAZQNjAWMAZQOAAWMAZQODAWMA
ZQOjAWMAZQPAAWMAZQPDAWMAZQPgAWMAZQPjAWMAZQMAAmMAZQMgAmMAZQNAAmMAZQNgAmMAZQOA
AmMAZQOgAmMAZQOhAmMAZQPAAmMAZQPBAmMAZQPgAmMAZQPhAmMAZQMBA2MAZQMhA2MAZQNAA2MA
ZQNBA2MAZQNgA2MAZQNhA2MAZQOAA2MAZQOBA2MAZQOgA2MAZQOhA2MAZQPAA2MAZQPBA2MAZQPg
A2MAZQPhA2MAZQMABGMAZQMBBGMAZQMgBGMAZQMhBGMAZQNABGMAZQNBBGMAZQNgBGMAZQNhBGMA
ZQOABGMAZQOBBGMAZQOgBGMAZQOhBGMAZQPABGMAZQPBBGMAZQPgBGMAZQPhBGMAZQMABWMAZQMB
BWMAZQMgBWMAZQMhBWMAZQNBBWMAZQNhBWMAZQOABWMAZQOBBWMAZQOgBWMAZQOhBWMAZQPABWMA
ZQPBBWMAZQPgBWMAZQPhBWMAZQMABmMAZQMBBmMAZQMgBmMAZQMhBmMAZQNABmMAZQNBBmMAZQNg
BmMAZQNhBmMAZQOABmMAZQOBBmMAZQOgBmMAZQOhBmMAZQPABmMAZQPBBmMAZQPgBmMAZQPhBmMA
ZQMAB2MAZQMBB2MAZQMgB2MAZQMhB2MAZQMpB3sAkQRAB2MAZQNBB2MAZQNJB3sAkQRgB2MAZQNh
B2MAZQOAB2MAZQOBB2MAZQOgB2MAZQOhB2MAZQPAB2MAZQPBB2MAZQPgB2MAZQPhB2MAZQMACGMA
ZQMBCGMAZQMgCGMAZQMhCGMAZQNACGMAZQNgCGMAZQOACGMAZQOBCGMAZQOgCGMAZQPACGMAZQPg
CGMAZQMACWMAZQMgCWMAZQNACWMAZQNgCWMAZQOACWMAZQOgCWMAZQPACWMAZQPgCWMAZQMACmMA
ZQMgCmMAZQNACmMAZQNgCmMAZQOACmMAZQOgCmMAZQPACmMAZQPgCmMAZQMgC2MAZQNAC2MAZQNg
C2MAZQOAC2MAZQOgC2MAZQPAC2MAZQPgC2MAZQMADGMAZQMgDGMAZQNADGMAZQNgDGMAZQOADGMA
ZQOgDGMAZQPADGMAZQPgDGMAZQMADWMAZQMgDWMAZQNADWMAZQNgDWMAZQOADWMAZQOgDWMAZQPA
DWMAZQPgDWMAZQMADmMAZQMgDmMAZQNADmMAZQNgDmMAZQOADmMAZQOgDmMAZQPADmMAZQMcAGwA
1wDKAgIAAQADAAcABAAMAAUAFAAGACoACAA5AAkAOwAAANsBPwQAAAQDQwQAAAIPQwQAAJwPQwQA
ANICQwQAAF0CQwQAALYHQwQAAFcHQwQAABgSQwQAAOgPQwQAALgTRwQAAAMTQwQAAMABQwQAADcC
QwQAAH0SQwQAAN8TQwQAAN4MTwQAAE4IQwQAAHcPUwQAAOIOQwQAAFYLQwQAAF4PQwQAAMgNQwQA
AGgDQwQAAIYJQwQAANkHQwQAAJkCQwQAAOoCQwQAALILQwQAAHINQwQAALANQwQAAEEPQwQAALQC
QwQAAPkMQwQAAAQDQwQAAAIPQwQAAJwPQwQAANICQwQAAF0CQwQAAPMBQwQAABUCQwQAAOIOQwQA
AFYLQwQAAF4PQwQAAMgNQwQAAGgDQwQAAIYJQwQAANkHQwQAAJkCQwQAAOoCQwQAALILQwQAAHIN
QwQAALANQwQAAEEPQwQAALQCQwQAAPkMQwQAAK8PWAQAAO0IXgQAALkSZAQCAAEAAwABAAIAAwAC
AAMABQABAAQABQACAAUABwABAAYABwACAAcACQABAAgACQACAAkACwABAAoACwACAAsADQABAAwA
DQACAA4ADwABAA8ADwACABAAEQABABEAEQACABIAEwABABMAEwACABQAFQABABUAFQACABYAFwAB
ABcAFwACABoAGQABABsAGQACABwAGwABAB0AGwACAB4AHQABAB8AHQACACAAHwABACEAHwACACIA
IQABACMAIQACACQAIwABACUAIwACACYAJQABACcAJQACACgAJwABACkAJwACACwAKQABAC0AKQAC
AC4AKwABAC8AKwACADAALQABADEALQACADIALwABADMALwACADQAMQABADUAMQACADYAMwABADcA
MwACADgANQABADkANQACADoANwABADsANwACADwAOQABAD0AOQACAD4AOwABAD8AOwACAEAAPQAB
AEEAPQACAEIAPwABAEMAPwACAEQAQQABAEUAQQACAEYAQwABAEcAQwACAEgARQABAEkARQACAEoA
RwABAEsARwACAEwASQABAE0ASQACAE4ASwABAE8ASwACAFAATQABAFEATQACAFIATwABAFMATwAC
AFQAUQABAFUAUQACAFYAUwABAFcAUwACAFkAVQABAFoAVQACAFsAVwABAFwAVwACAF0AWQABAF4A
WQACAF8AWwABAGAAWwACAGEAXQABAGIAXQACAGMAXwABAGQAXwACAGUAYQABAGYAYQACAGcAYwAB
AGgAYwACAGkAZQABAGoAZQACAGsAZwABAGwAZwACAG0AaQABAG4AaQACAG8AawABAHAAawACAHEA
bQABAHIAbQACAHMAbwABAHQAbwACAHUAcQABAHYAcQACAHwAcwACAH0AdQABAH4AdQACAH8AdwCS
ALwAUgGJAY8BlgHLAR0CKAJhAoMCigKXAvQCBgMOAwSAAAABAAAAdhzJUQAAAAAAAEoBAAAEAAAA
AAAAAAAAAABJAxsDAAAAAAQAAAAAAAAAAAAAAEkDDwMAAAAABAAAAAAAAAAAAAAASQM6DQAAAAAM
AAAAAAAAAAAAAABSA8wLAAAAAAQAAAAAAAAAAAAAAEkDuQgAAAAADAAAAAAAAAAAAAAAUgNkAgAA
AAAAAAAAAQAAALIQAAAKAAcACwAHAAwABwANAAcADgAHAA8ABwC3AMUBuwDzAb0AEALFAEkCxwBJ
ArsAagLLAH4CvQBJAsUAfgK7ABcD/wArAw8BSQIAAAA8PjlfXzBfMAA8TWFpbj5iX18wXzAAPD5j
X19EaXNwbGF5Q2xhc3MwXzAAPD5jX19EaXNwbGF5Q2xhc3MxXzAAPFdyaXRlQ3N2VG9NZW1vcnk+
Yl9fMAA8PjlfXzBfMQA8TWFpbj5iX18wXzEAPD5jX19EaXNwbGF5Q2xhc3MwXzEATnVsbGFibGVg
MQBJRW51bWVyYWJsZWAxAENvbGxlY3Rpb25gMQBJRW51bWVyYXRvcmAxAExpc3RgMQBJbnQzMgA8
PmNfX0Rpc3BsYXlDbGFzczBfMgA8TWFpbj5iX18yAEZ1bmNgMgBJR3JvdXBpbmdgMgBTVF9iNWMy
MTM5MmRiYzU0MGFmYTg1Zjg0OTAyMGVmZTBkMgA8PjlfXzMAPE1haW4+Yl9fMwA8TWFpbj5iX180
ADw+OV9fNQA8TWFpbj5iX181AFNUX2U4NTFmY2ZlZGYyMjQ4MTU4MDgwNzg3M2M3NzNhMjY2ADw+
OV9fNgA8TWFpbj5iX182ADw+OV9fNwA8TWFpbj5iX183ADw+OQA8TW9kdWxlPgBJRENJQQBnZXRf
Q0MAZ2V0X1JlY2lwaWVudENDAHNldF9SZWNpcGllbnRDQwBFSUQAZ2V0X0lEAHNldF9JRABnZXRf
VF9FWF9ET0JfU0VNAHNldF9UX0VYX0RPQl9TRU0AZ2V0X1RfRVhUUkFfRVhFTgBzZXRfVF9FWFRS
QV9FWEVOAGdldF9SZWNpcGllbnRDQ08Ac2V0X1JlY2lwaWVudENDTwBTeXN0ZW0uSU8AZ2V0X0lE
X1JFUABzZXRfSURfUkVQAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAGdl
dF9GZWNoYQBzZXRfRmVjaGEAZ2V0X0NvbnNlY3VlbmNpYQBzZXRfQ29uc2VjdWVuY2lhAGdldF9D
b21wYW5pYQBzZXRfQ29tcGFuaWEAZ2V0X1NlbWFuYQBzZXRfU2VtYW5hAGdldF9JRF9FbXByZXNh
AHNldF9JRF9FbXByZXNhAFN5c3RlbS5EYXRhAG1zY29ybGliADw+YwBnZXRfQmNjAFN5c3RlbS5D
b2xsZWN0aW9ucy5HZW5lcmljAHNldF9Db250ZW50SWQAZ2V0X1VuaWRhZABzZXRfVW5pZGFkAEFk
ZAA8UmVjaXBpZW50Q0M+a19fQmFja2luZ0ZpZWxkADxJRD5rX19CYWNraW5nRmllbGQAPFRfRVhf
RE9CX1NFTT5rX19CYWNraW5nRmllbGQAPFRfRVhUUkFfRVhFTj5rX19CYWNraW5nRmllbGQAPFJl
Y2lwaWVudENDTz5rX19CYWNraW5nRmllbGQAPElEX1JFUD5rX19CYWNraW5nRmllbGQAPEZlY2hh
PmtfX0JhY2tpbmdGaWVsZAA8Q29uc2VjdWVuY2lhPmtfX0JhY2tpbmdGaWVsZAA8Q29tcGFuaWE+
a19fQmFja2luZ0ZpZWxkADxTZW1hbmE+a19fQmFja2luZ0ZpZWxkADxJRF9FbXByZXNhPmtfX0Jh
Y2tpbmdGaWVsZAA8VW5pZGFkPmtfX0JhY2tpbmdGaWVsZAA8U3RhY2tUcmFjZT5rX19CYWNraW5n
RmllbGQAPExvZ0Vycm9yTWVzc2FnZT5rX19CYWNraW5nRmllbGQAPFBvcmNlbnRhamU+a19fQmFj
a2luZ0ZpZWxkADxBdHRhY2htZW50RmlsZT5rX19CYWNraW5nRmllbGQAPEltcG9ydGU+a19fQmFj
a2luZ0ZpZWxkADxSZWc+a19fQmFja2luZ0ZpZWxkADxGZWNoYV9Jbmk+a19fQmFja2luZ0ZpZWxk
ADxJc0JvZHlIdG1sPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJvbD5rX19CYWNraW5nRmllbGQAPEZl
Y2hhX0Zpbj5rX19CYWNraW5nRmllbGQAPER1cmFjaW9uPmtfX0JhY2tpbmdGaWVsZAA8QWNjaW9u
PmtfX0JhY2tpbmdGaWVsZAA8RW1wbGVhZG8+a19fQmFja2luZ0ZpZWxkADxDSUFfSURSZXBvcnRl
bz5rX19CYWNraW5nRmllbGQAPEZvbGlvPmtfX0JhY2tpbmdGaWVsZAA8Q29uY2VwdG8+a19fQmFj
a2luZ0ZpZWxkADxhcmNoaXZvPmtfX0JhY2tpbmdGaWVsZAA8Rm9sZGVyPmtfX0JhY2tpbmdGaWVs
ZAA8QnJvd3Nlcj5rX19CYWNraW5nRmllbGQAPElwQWRkcmVzcz5rX19CYWNraW5nRmllbGQAPFN1
YmplY3Q+a19fQmFja2luZ0ZpZWxkADxSZWNpcGllbnQ+a19fQmFja2luZ0ZpZWxkADxDcmVhdGVk
Qnk+a19fQmFja2luZ0ZpZWxkADxCb2R5PmtfX0JhY2tpbmdGaWVsZABEYkNvbW1hbmQAU3FsQ29t
bWFuZABTZW5kAGdldF9TdGFja1RyYWNlAHNldF9TdGFja1RyYWNlAGRlZmF1bHRJbnN0YW5jZQBn
ZXRfU291cmNlAEZpbGVNb2RlAGdldF9NZXNzYWdlAE1haWxNZXNzYWdlAGdldF9Mb2dFcnJvck1l
c3NhZ2UAc2V0X0xvZ0Vycm9yTWVzc2FnZQBnZXRfUG9yY2VudGFqZQBzZXRfUG9yY2VudGFqZQBU
YWtlAERhdGFUYWJsZQBWYXJpYWJsZQBFbnVtZXJhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBl
SGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9BdHRhY2htZW50RmlsZQBzZXRfQXR0YWNobWVu
dEZpbGUAZ2V0X05hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBX
cml0ZUxpbmUAU3FsRGJUeXBlAHNldF9Db21tYW5kVHlwZQBXaGVyZQBTeXN0ZW0uQ29yZQBGYWls
dXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRP
YmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0
aW5nc0Jhc2UAQXR0YWNobWVudEJhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0
ZQBnZXRfSW1wb3J0ZQBzZXRfSW1wb3J0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1
Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3Nh
YmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRy
aWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQBH
ZXRWYWx1ZQB2YWx1ZQBnZXRfUmVnAHNldF9SZWcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBU
b1N0cmluZwBTdWJzdHJpbmcAdGVzdGluZwBGbHVzaABnZXRfTGVuZ3RoAGdldF9GZWNoYV9JbmkA
c2V0X0ZlY2hhX0luaQBSYWZUb29sT2JqAFNlZWsATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRU
YXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sATmV0d29ya0NyZWRl
bnRpYWwAU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbABTeXN0ZW0uQ29sbGVjdGlvbnMuT2JqZWN0
TW9kZWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFN5c3RlbS5OZXQu
TWFpbAB0ZXN0aW5nTWFpbABTVF9lODUxZmNmZWRmMjI0ODE1ODA4MDc4NzNjNzczYTI2Ni5kbGwA
Z2V0X0lzQm9keUh0bWwAc2V0X0lzQm9keUh0bWwAZ2V0X0NvbnRyb2wAc2V0X0NvbnRyb2wAc2V0
X0VuYWJsZVNzbABfc3NsAEZpbGVTdHJlYW0ATWVtb3J5U3RyZWFtAGdldF9JdGVtAGl0ZW0AU3lz
dGVtAHNldF9Gcm9tAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBnZXRfRmVjaGFfRmluAHNldF9GZWNo
YV9GaW4AU2NyaXB0TWFpbgBTZWVrT3JpZ2luAEpvaW4AbnVtZXJpbgBnZXRfRHVyYWNpb24Ac2V0
X0R1cmFjaW9uAGdldF9BY2Npb24Ac2V0X0FjY2lvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhVGFibGVDb2xsZWN0aW9uAFNx
bFBhcmFtZXRlckNvbGxlY3Rpb24ATWFpbEFkZHJlc3NDb2xsZWN0aW9uAEF0dGFjaG1lbnRDb2xs
ZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAHNldF9Db25uZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxD
b25uZWN0aW9uAGdldF9Jbm5lckV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AZ2V0X1RvAENv
cHlUbwBnZXRfRW1wbGVhZG8Ac2V0X0VtcGxlYWRvAGdldF9DSUFfSURSZXBvcnRlbwBzZXRfQ0lB
X0lEUmVwb3J0ZW8AQ3VsdHVyZUluZm8AQm9ub0luZm8AUHJvcGVydHlJbmZvAGdldF9Gb2xpbwBz
ZXRfRm9saW8AbW9ycm8AZ2V0X0NvbmNlcHRvAHNldF9Db25jZXB0bwBnZXRfYXJjaGl2bwBzZXRf
YXJjaGl2bwBwAFN5c3RlbS5MaW5xAGdldF9Gb2xkZXIAc2V0X0ZvbGRlcgBfc2VuZGVyAGdldF9S
ZXNvdXJjZU1hbmFnZXIATWFpbEhlbHBlcgBUb1VwcGVyAF91c2VyAGdldF9Ccm93c2VyAHNldF9C
cm93c2VyAERiUGFyYW1ldGVyAFNxbFBhcmFtZXRlcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBj
b250YWRvcgBSZWNvcmRFcnJvcgBMb2dFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAcmVjb3JkcwBTeXN0ZW0uUnVudGltZS5Db21w
aWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfYjVjMjEzOTJkYmM1NDBhZmE4NWY4NDkw
MjBlZmUwZDIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNU
X2I1YzIxMzkyZGJjNTQwYWZhODVmODQ5MDIwZWZlMGQyLlByb3BlcnRpZXMAR2V0UHJvcGVydGll
cwBnZXRfVGFibGVzAGdldF9WYXJpYWJsZXMAQmluZGluZ0ZsYWdzAFNldHRpbmdzAHNldF9DcmVk
ZW50aWFscwBzZXRfVXNlRGVmYXVsdENyZWRlbnRpYWxzAENvbnRhaW5zAFN5c3RlbS5Db2xsZWN0
aW9ucwBjb25uZWN0aW9ucwBTdHJpbmdTcGxpdE9wdGlvbnMATk1Cb25vcwBnZXRfUGFyYW1ldGVy
cwBfcGFzcwBTdWNjZXNzAE1haWxBZGRyZXNzAGdldF9JcEFkZHJlc3MAc2V0X0lwQWRkcmVzcwBn
ZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X0F0dGFjaG1lbnRzAEV4aXN0cwBnZXRfUm93cwBDb25j
YXQARm9ybWF0AE9iamVjdABnZXRfU3ViamVjdABzZXRfU3ViamVjdABTZWxlY3QAU3lzdGVtLk5l
dABEYXRhU2V0AFNwbGl0AGdldF9EZWZhdWx0AFNpbmdsZU9yRGVmYXVsdABzZXRfVGFza1Jlc3Vs
dABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU210cENsaWVudABnZXRfUmVjaXBpZW50AHNldF9SZWNp
cGllbnQAQXR0YWNobWVudABnZXRfQ3VycmVudABHZXRDdXJyZW50AGdldF9Db3VudABfcG9ydABU
b0xpc3QASUNyZWRlbnRpYWxzQnlIb3N0AF9ob3N0AEZpcnN0AHNldF9Db21tYW5kVGltZW91dABN
b3ZlTmV4dABzZXRfQ29tbWFuZFRleHQAdgBnZXRfTm93AERhdGFSb3cAZXgAZ2V0X0NyZWF0ZWRC
eQBzZXRfQ3JlYXRlZEJ5AEdyb3VwQnkAVG9BcnJheQBnZXRfQm9keQBzZXRfQm9keQBnZXRfQXNz
ZW1ibHkARXhlY3V0ZU5vblF1ZXJ5AFdyaXRlQ3N2VG9NZW1vcnkAb3BfRXF1YWxpdHkAb3BfSW5l
cXVhbGl0eQBXaW5kb3dzSWRlbnRpdHkASXNOdWxsT3JFbXB0eQAAAABdWwBFAHgAZQBjAFUAcwBl
AHIAOgB7ADIAfQBdADoAXwA6AFsAZQB4AC4ATQBzAGcAOgAgAHsAMAB9AF0AOgBfADoAWwBlAHgA
LgBTAHIAYwA6ACAAewAxAH0AXQAAIToAXwA6AFsAewAwAH0AXQA6AF8AOgBbAHsAMQB9AF0AACM2
ADAAMQAuAEMAYQB0AEwAbwBnAEUAcgByAG8AcgBTAGkAACFAAEwAbwBnAEUAcgByAG8AcgBNAGUA
cwBzAGEAZwBlAAAXQABTAHQAYQBjAGsAVAByAGEAYwBlAAAVQABJAHAAQQBkAGQAcgBlAHMAcwAA
FUEAdAB1AG8AbQBhAHQAaQBjAG8AABFAAEIAcgBvAHcAcwBlAHIAAAlTAFMASQBTAAAVQABDAHIA
ZQBhAHQAZQBkAEIAeQAAFTEAMAAuADYALgA1AC4AMgA0ADAAADdSAEEARgBUAG8AbwBsAEAAdABl
AGwAZQBwAGUAcgBmAG8AcgBtAGEAbgBjAGUALgBjAG8AbQAAAQADMAAARWoAYQB2AGkAZQByAC4A
cgBhAHkAZwBvAHoAYQBAAHQAZQBsAGUAcABlAHIAZgBvAHIAbQBhAG4AYwBlAC4AYwBvAG0AAAMx
AAADOwAAD2kAbQBhAGcAZQBuAHMAACFVAHMAZQByADoAOgBDAG8AbgBlAHgAaQBvAG4AQgBEAAAZ
VQBzAGUAcgA6ADoAVQBuAGkAZABhAGQAAB9VAHMAZQByADoAOgBFAHgAdABlAG4AcwBpAG8AbgAA
EXkAeQB5AHkATQBNAGQAZAAAIVUAcwBlAHIAOgA6AFQAYQBiAGwAYQBCAG8AbgBvAHMAAAtUAGEA
YgBsAGUAABFFAG0AcABsAGUAYQBkAG8AAAdSAGUAZwAAEUMAbwBuAGMAZQBwAHQAbwAADUEAYwBj
AGkAbwBuAAANVQBuAGkAZABhAGQAAA9JAG0AcABvAHIAdABlAAAVUABvAHIAYwBlAG4AdABhAGoA
ZQAAC0YAZQBjAGgAYQAADVMAZQBtAGEAbgBhAAATRgBlAGMAaABhAF8ASQBuAGkAABNGAGUAYwBo
AGEAXwBGAGkAbgAAEUQAdQByAGEAYwBpAG8AbgAAC0YAbwBsAGkAbwAAGUMAbwBuAHMAZQBjAHUA
ZQBuAGMAaQBhAAAPQwBvAG4AdAByAG8AbAAAFUkARABfAEUAbQBwAHIAZQBzAGEAAB1DAEkAQQBf
AEkARABSAGUAcABvAHIAdABlAG8AAA1GAG8AbABkAGUAcgAAEUMAbwBtAHAAYQBuAGkAYQAADUkA
RABfAFIARQBQAAAZVABfAEUAWABfAEQATwBCAF8AUwBFAE0AABlUAF8ARQBYAFQAUgBBAF8ARQBY
AEUATgAAEUUATQBQAEwARQBBAEQATwAAB1IARQBHAAARQwBPAE4AQwBFAFAAVABPAAANQQBDAEMA
SQBPAE4AAA1VAE4ASQBEAEEARAAAD0kATQBQAE8AUgBUAEUAABVQAE8AUgBDAEUATgBUAEEASgBF
AAALRgBFAEMASABBAAANUwBFAE0AQQBOAEEAABNGAEUAQwBIAEEAXwBJAE4ASQAAE0YARQBDAEgA
QQBfAEYASQBOAAARRABVAFIAQQBDAEkATwBOAAALRgBPAEwASQBPAAAZQwBPAE4AUwBFAEMAVQBF
AE4AQwBJAEEAAA9DAE8ATgBUAFIATwBMAAARVABQAF8ASQBOAEMASQBEAAAFTgBPAAAHQQBMAEwA
AAdJAE0AQQAAA18AAAMvAAADLAAAcVMAVABfAGIANQBjADIAMQAzADkAMgBkAGIAYwA1ADQAMABh
AGYAYQA4ADUAZgA4ADQAOQAwADIAMABlAGYAZQAwAGQAMgAuAFAAcgBvAHAAZQByAHQAaQBlAHMA
LgBSAGUAcwBvAHUAcgBjAGUAcwAAAC2Mg7vthv1NgAi/I5pflJ0ABCABAQgDIAABBSABARERBCAB
AQ4GIAEBEYCpBQcCDhJFAyAADgUAABKAtQcABA4OHBwcBCAAEkEGAAMODhwcBQACDg4OBiABARGA
xQUgABKAyQkgAhKAzQ4RgNEEIAEBHAUgAQESRQMgAAgPBwkSTRJRElUdDggODg4OBQACAg4OCSAC
HQ4dDhGA4QUgABKA5QcVEoDpARJJBSABARMABSABARJJBCABAQIEAAECDgUgAgEOCAUgABKA9QcV
EoDpARJNBSACAQ4OBiABARKA/QUgAQESUWMHJw4ODhIsFRJhARIUDhFlEmkSbRIUEnEVEmEBDhUS
YQESCBURdQEOEjASCBUSeQISFBIICBI0FRJhARIYEhgSfRURdQESFBIUDhIYEhgODg4ODg4ODg4V
EnkCEggCEoCBEkEFIAASgQEFIAASgQUGIAESgQkcAyAAHAYVEmEBEhQEAAARZQQgAQ4OBCABAhwF
IAASgRUGIAESgREOBSAAEoEZBCAAEmkEIAEcDgMgAAIFFRJhAQ4GFRJhARIIBxUSeQISFA4FIAIB
HBggEAICFRKAhQEVEoCZAh4BHgAVEoCFAR4AFRJ5Ah4AHgEFCgISFA4NFRJ5AhUSgJkCDhIUDhkQ
AgIVEoCFAR4BFRKAhQEeABUSeQIeAB4BCwoCFRKAmQIOEhQOEBABARUSYQEeABUSgIUBHgADCgEO
CCAAFRF1ARMABRURdQEOBCAAEwAHFRJ5AhIUAhgQAQIVEoCFAR4AFRKAhQEeABUSeQIeAAIECgES
FBIQAQIVEoCFAR4AFRKAhQEeAAgIFRJ5AhIUEggGCgISFBIIDBABAR4AFRKAhQEeAAQKARIIBhUS
YQESGAYVEXUBEhQFIAEBHQUHFRJ5AhIIAgUgAg4ICAUAAQ4dDgcABA4ODg4OByACAQ4RgSUHIAIK
ChGBLQYgAQESgSkWBwYSfRKAiR0SgI0VEoCRARIYEjwdBQgAARKBMRGBNQkgAR0SgI0RgTkHFRKA
hQESGAkgABUSgJEBEwAHFRKAkQESGAgVEnkCEoCNHAYKAhKAjRwMEAECDg4VEoCFAR4AAwoBHAQg
AB0FBSAAEoFBByACAQ4SgUEGIAIcHB0cCLd6XFYZNOCJCImEXc2AgMyRBCC/AgAEAAAAAAQBAAAA
AgYIAgYOBgYVET0BCAIGAgMGEkkDBhJNBAYSgKEEBhKApQMGEiQDBhEoCQYVEnkCEhQSCAgGFRJ5
AhIIAgMGEjgIBhUSeQISFA4OBhUSeQIVEoCZAg4SFA4DBhIYByAAFRE9AQgIIAEBFRE9AQgHIAMB
EkEIDgQgABJNBSABARJNCyABHQUVEoCFARIYBQAAEoChBQAAEoClBgABARKApQQAABIkAwAAAQYg
ARIIEhQFIAECEggFIAECEhQFIAEOEhQLIAEOFRKAmQIOEhQGIAEcEoCNAygACAMoAA4HKAAVET0B
CAMoAAIEKAASTQUIABKAoQUIABKApQQIABIkCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9iNWMyMTM5MmRiYzU0MGFmYTg1Zjg0OTAyMGVmZTBk
MgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE4AABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDS0AAAAzsrvvgEA
AACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9u
PTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4
OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0
AAAAVHAAAAAAAAAAAAAAbnAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBwAAAAAAAAAAAAAAAA
X0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEA
AAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBf
AFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQDJUXYcAAABAMlRdhw/AAAA
AAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAk
AAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkA
bABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0
AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwA
ZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGIANQBjADIAMQAzADkAMgBkAGIAYwA1
ADQAMABhAGYAYQA4ADUAZgA4ADQAOQAwADIAMABlAGYAZQAwAGQAMgAAAD4ADwABAEYAaQBsAGUA
VgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADIAOAA2AC4AMgAwADkAMwA3AAAAAABwACgAAQBJ
AG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGUAOAA1ADEAZgBjAGYAZQBkAGYAMgAyADQA
OAAxADUAOAAwADgAMAA3ADgANwAzAGMANwA3ADMAYQAyADYANgAuAGQAbABsAAAASAASAAEATABl
AGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAA
MQA4AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBP
AHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AZQA4ADUAMQBmAGMAZgBlAGQA
ZgAyADIANAA4ADEANQA4ADAAOAAwADcAOAA3ADMAYwA3ADcAMwBhADIANgA2AC4AZABsAGwAAABo
ACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGIANQBjADIAMQAzADkAMgBkAGIA
YwA1ADQAMABhAGYAYQA4ADUAZgA4ADQAOQAwADIAMABlAGYAZQAwAGQAMgAAAEIADwABAFAAcgBv
AGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAyADgANgAuADIAMAA5ADMANwAAAAAA
RgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAyADgANgAu
ADIAMAA5ADMANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAHAAAAwAAACAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAA=</BinaryItem>
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="106"
                Column="13" />
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="161"
                Column="21" />
              <Breakpoint
                Enabled="True"
                File="ScriptMain.cs"
                Line="275"
                Column="29" />
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Sequence Container\Obtener Bonos NM"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Tarea Ejecutar SQL"
          DTS:DTSID="{0ff9aceb-a392-44b4-a867-d811ea426550}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Obtener Bonos NM"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{11BD71C3-8FDB-42CD-B64B-4F013F27BF83}"
              SQLTask:SqlStatementSource="EXEC  [app620].[GeneraArchivoSolicitudSel] 1"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::TablaBonos" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{582f1871-cb80-4534-8e1a-66258fbab9a9}"
          DTS:From="Package\Sequence Container\Obtener Bonos NM"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Sequence Container\Enviar Archivo o Depositar Archivo" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{35d9cd53-5c42-42d6-bbdc-16b608fcd133}"
      DTS:From="Package\Sequence Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Borrar unidad de red"
      DTS:Value="2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{5bd45943-d46d-4bd4-bcef-04e4621f0946}"
      DTS:From="Package\Crear unidad de red"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Sequence Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="177,42"
          Id="Package\Borrar unidad de red"
          TopLeft="114,408.5" />
        <NodeLayout
          Size="173,42"
          Id="Package\Crear unidad de red"
          TopLeft="452,176.5" />
        <NodeLayout
          Size="249,42"
          Id="Package\Sequence Container\Enviar Archivo o Depositar Archivo"
          TopLeft="25,126" />
        <NodeLayout
          Size="178,42"
          Id="Package\Sequence Container\Obtener Bonos NM"
          TopLeft="57,27" />
        <EdgeLayout
          Id="Package\Sequence Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="147.75,69">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,57"
              Start="0,0"
              End="0,49.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,49.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="289,233"
          Size="289,276"
          Id="Package\Sequence Container"
          TopLeft="60,60" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="203.5,336">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,72.5"
              Start="0,0"
              End="0,65">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.304453125,26.6953125,50.60890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="452,197.75">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-103,0"
              Start="0,0"
              End="-95.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-95.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>