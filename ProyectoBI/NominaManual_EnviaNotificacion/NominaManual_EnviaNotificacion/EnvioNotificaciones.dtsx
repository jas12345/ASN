<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="9/5/2019 3:29:56 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PC1015238163A"
  DTS:CreatorName="DB\guerrerolopez.8"
  DTS:DTSID="{C11E06EE-0EAC-43A0-B742-422CAD499EF7}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.0900.40"
  DTS:LocaleID="2058"
  DTS:ObjectName="EnvioNotificaciones"
  DTS:PackageType="5"
  DTS:VersionBuild="12"
  DTS:VersionGUID="{1759E97B-030A-4FA0-8D8C-089A377850DD}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ASN.adonet]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{B2C20C7A-D09B-4EBD-BC3D-8F54AF464E13}"
      DTS:ObjectName="ASN.adonet">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=10.152.32.132;Initial Catalog=ASN2;Integrated Security=True;Application Name=SSIS-Package-{B2C20C7A-D09B-4EBD-BC3D-8F54AF464E13}10.152.32.132.ASN21;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ASN.oledb]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{25D37666-04A4-4D9E-8EE4-149A703D1324}"
      DTS:ObjectName="ASN.oledb">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=10.152.32.132;Initial Catalog=ASN2;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Tarea Script"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Tarea Script"
      DTS:DTSID="{7B6923AC-3A69-4ABE-BA1E-37FE39FCD20D}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Tarea Script"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9a77a874f91d46d599e7dff0b73fd2ce"
          VSTAMajorVersion="2"
          VSTAMinorVersion="2"
          Language="CSharp">
          <ProjectItem
            Name="MailHelper.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Mail;
using System.IO;

namespace ST_9a77a874f91d46d599e7dff0b73fd2ce
{
    class MailHelper
    {
        private const int Timeout = 180000;
        private readonly string _host;
        private readonly int _port;
        private readonly string _user;
        private readonly string _pass;
        private readonly bool _ssl;
        private readonly MailAddress _sender;
        private readonly string testing;
        private readonly string testingMail;
        //private readonly MailAddress testingMail;

        public string Recipient { get; set; }
        public string RecipientCC { get; set; }
        public string RecipientCCO { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
        public bool IsBodyHtml { get; set; }
        public string AttachmentFile { get; set; }

        public MailHelper()
        {
            //MailServer - Represents the SMTP Server
            _host = "10.6.5.240"; //ConfigurationManager.AppSettings["MailServer"];
            //Port- Represents the port number
            _port = 25; //int.Parse(ConfigurationManager.AppSettings["Port"]);
            //MailAuthUser and MailAuthPass - Used for Authentication for sending email
            _sender = new MailAddress("nm@tpnsr.com");  //new MailAddress(ConfigurationManager.AppSettings["EmailFromAddress"]);
            _user = ""; //ConfigurationManager.AppSettings["MailAuthUser"];
            _pass = ""; //ConfigurationManager.AppSettings["MailAuthPass"];
            _ssl = true; //Convert.ToBoolean(ConfigurationManager.AppSettings["EnableSSL"]);
            testing = "0";  //ConfigurationManager.AppSettings["testing"];
            //testingMail = new MailAddress(ConfigurationManager.AppSettings["testingMail"]);
            testingMail = "alfredo.guerrero@teleperformance.com"; //ConfigurationManager.AppSettings["testingMail"];
        }

        public void Send()
        {
            try
            {

                Attachment att = null;
                var message = new MailMessage();

                if (testing == "1")
                {
                    foreach (var address in testingMail.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        message.To.Add(new MailAddress(address));
                    }

                    //message.To.Add(testingMail);
                }
                else
                {
                    //Split each email on the field
                    foreach (var address in Recipient.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        message.To.Add(new MailAddress(address));
                    }
                }

                message.Subject = Subject;
                message.From = _sender;
                message.Body = Body;
                message.IsBodyHtml = IsBodyHtml;

                if (testing != "1")
                {
                    if (!String.IsNullOrEmpty(RecipientCC))
                    {
                        foreach (var address in RecipientCC.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            message.CC.Add(address);
                        }
                    }

                    if (!String.IsNullOrEmpty(RecipientCCO))
                    {
                        foreach (var address in RecipientCCO.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            message.Bcc.Add(address);
                        }
                    }
                }

                var smtp = new SmtpClient(_host, _port);

                if (!String.IsNullOrEmpty(AttachmentFile))
                {
                    if (File.Exists(AttachmentFile))
                    {
                        att = new Attachment(AttachmentFile);
                        att.ContentId = "imagens";
                        message.Attachments.Add(att);
                    }
                }

                if (_user.Length > 0 && _pass.Length > 0)
                {
                    smtp.UseDefaultCredentials = false;
                    smtp.Credentials = new NetworkCredential(_user, _pass);
                    smtp.EnableSsl = _ssl;
                }

                smtp.Send(message);

                if (att != null)
                    att.Dispose();
                message.Dispose();
                smtp.Dispose();
            }

            catch (Exception ex)
            {
                //LogError log = new LogError();
                //log.RecordError(ex, 1);
                //TODO: Enviar error a log de bd
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9a77a874f91d46d599e7dff0b73fd2ce")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_9a77a874f91d46d599e7dff0b73fd2ce")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_9a77a874f91d46d599e7dff0b73fd2ce
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>

        public void Main()
        {
            // TODO: Add your code here
            EnviaNotificacionesSolicitante();
            EnviaNotificacionesAutorizante();

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        private void EnviaNotificacionesSolicitante()
        {
            ConnectionManager cm;
            System.Data.SqlClient.SqlConnection sqlConn;
            System.Data.SqlClient.SqlCommand sqlComm;

            cm = Dts.Connections["ASN.adonet"];

            sqlConn = (System.Data.SqlClient.SqlConnection)cm.AcquireConnection(Dts.Transaction);
            sqlComm = new System.Data.SqlClient.SqlCommand("app620.SolicitantePendienteDeEnviarSel", sqlConn);
            sqlComm.CommandType = CommandType.StoredProcedure;
            //sqlComm.ExecuteNonQuery();
            System.Data.SqlClient.SqlDataReader exc = sqlComm.ExecuteReader(CommandBehavior.CloseConnection);

            //cm.ReleaseConnection(sqlConn);

            while (exc.Read())
            {
                //string mensaje = "";
                DataTable dt = new DataTable();
                sqlConn = (System.Data.SqlClient.SqlConnection)cm.AcquireConnection(Dts.Transaction);
                sqlComm = new System.Data.SqlClient.SqlCommand("app620.EnviaNotificacionSolicitante", sqlConn);
                sqlComm.CommandType = CommandType.StoredProcedure;
                sqlComm.Parameters.AddWithValue("@CCMSID", exc["Solicitante_Ident"].ToString());
                //mensaje = sqlComm.ExecuteScalar().ToString();

                System.Data.SqlClient.SqlDataAdapter da = new System.Data.SqlClient.SqlDataAdapter(sqlComm);
                da.Fill(dt);
                cm.ReleaseConnection(sqlConn);

                if (dt.Rows.Count > 0)
                {
                    var mail = new MailHelper();

                    mail.IsBodyHtml = true;
                    mail.Recipient = dt.Rows[0]["CorreoSolicitante"].ToString();
                    //mail.RecipientCCO = liston.Take(1).SingleOrDefault().EmailCCO;
                    mail.Subject = dt.Rows[0]["Subject"].ToString();
                    mail.Body = dt.Rows[0]["Body"].ToString();
                    mail.Send();
                }
            }
        }

        private void EnviaNotificacionesAutorizante()
        {
            ConnectionManager cm;
            System.Data.SqlClient.SqlConnection sqlConn;
            System.Data.SqlClient.SqlCommand sqlComm;

            cm = Dts.Connections["ASN.adonet"];

            sqlConn = (System.Data.SqlClient.SqlConnection)cm.AcquireConnection(Dts.Transaction);
            sqlComm = new System.Data.SqlClient.SqlCommand("app620.AutorizantePendienteDeAutorizarSel", sqlConn);
            sqlComm.CommandType = CommandType.StoredProcedure;
            //sqlComm.ExecuteNonQuery();
            System.Data.SqlClient.SqlDataReader exc = sqlComm.ExecuteReader(CommandBehavior.CloseConnection);

            //cm.ReleaseConnection(sqlConn);

            while (exc.Read())
            {
                //string mensaje = "";
                DataTable dt = new DataTable();
                sqlConn = (System.Data.SqlClient.SqlConnection)cm.AcquireConnection(Dts.Transaction);
                sqlComm = new System.Data.SqlClient.SqlCommand("app620.EnviaNotificacionAutorizante", sqlConn);
                sqlComm.CommandType = CommandType.StoredProcedure;
                sqlComm.Parameters.AddWithValue("@CCMSID", exc["Autorizador_Ident"].ToString());
                //mensaje = sqlComm.ExecuteScalar().ToString();
                
                System.Data.SqlClient.SqlDataAdapter da = new System.Data.SqlClient.SqlDataAdapter(sqlComm);
                da.Fill(dt);
                cm.ReleaseConnection(sqlConn);

                if (dt.Rows.Count > 0)
                {
                    var mail = new MailHelper();

                    mail.IsBodyHtml = true;
                    mail.Recipient = dt.Rows[0]["CorreoAutorizador"].ToString();
                    //mail.RecipientCCO = liston.Take(1).SingleOrDefault().EmailCCO;
                    mail.Subject = dt.Rows[0]["Subject"].ToString();
                    mail.Body = dt.Rows[0]["Body"].ToString();
                    mail.Send();
                }
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_9a77a874f91d46d599e7dff0b73fd2ce.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8B934715-3008-49BF-AEE3-BC873417B09C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9a77a874f91d46d599e7dff0b73fd2ce</RootNamespace>
    <AssemblyName>ST_9a77a874f91d46d599e7dff0b73fd2ce</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="MailHelper.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_9a77a874f91d46d599e7dff0b73fd2ce</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_9a77a874f91d46d599e7dff0b73fd2ce</msb:DisplayName>
    <msb:ProjectId>{DCE857B1-23C5-40CE-8A7D-641FF142B2F7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_9a77a874f91d46d599e7dff0b73fd2ce.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="MailHelper.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="439a68543f1e4d6bb321aab1d1eaede1">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>132</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties.Settings.get_Default():ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties.Sett" +
    "ings")]

namespace ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9a77a874f91d46d599e7dff0b73fd2ce.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_9a77a874f91d46d599e7dff0b73fd2ce.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAA7jd10AAAAAAAAAAOAAIiALATAAACIAAAAIAAAAAAAAhkAA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADRAAABPAAAAAGAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAjCAAAAAgAAAAIgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAYAAAAAYAAAAkAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAKgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABo
QAAAAAAAAEgAAAACAAUAsCYAAMwYAAABAAAAAAAAAHw/AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CewoAAAQqIgIDfQoAAAQqHgJ7CwAABCoiAgN9CwAABCoe
AnsMAAAEKiICA30MAAAEKh4Cew0AAAQqIgIDfQ0AAAQqHgJ7DgAABCoiAgN9DgAABCoeAnsPAAAE
KiICA30PAAAEKh4CexAAAAQqIgIDfRAAAAQqABMwAgBdAAAAAAAAAAIoEAAACgJyAQAAcH0CAAAE
Ah8ZfQMAAAQCchcAAHBzEQAACn0HAAAEAnIxAABwfQQAAAQCcjEAAHB9BQAABAIXfQYAAAQCcjMA
AHB9CAAABAJyNwAAcH0JAAAEKgAAABswBQA8AgAAAQAAERQKcxIAAAoLAnsIAAAEcoEAAHAoEwAA
CixHAnsJAAAEF40hAAABJRZyhQAAcKIXbxQAAAoNFhMEKx4JEQSaEwUHbxUAAAoRBXMRAAAKbxYA
AAoRBBdYEwQRBAmOaTLbK0UCKAEAAAYXjSEAAAElFnKFAABwohdvFAAACg0WEwQrHgkRBJoTBgdv
FQAAChEGcxEAAApvFgAAChEEF1gTBBEECY5pMtsHAigHAAAGbxcAAAoHAnsHAAAEbxgAAAoHAigJ
AAAGbxkAAAoHAigLAAAGbxoAAAoCewgAAARygQAAcCgbAAAKOZoAAAACKAMAAAYoHAAACi1AAigD
AAAGF40hAAABJRZyhQAAcKIXbxQAAAoNFhMEKxkJEQSaEwcHbx0AAAoRB28eAAAKEQQXWBMEEQQJ
jmky4AIoBQAABigcAAAKLUACKAUAAAYXjSEAAAElFnKFAABwohdvFAAACg0WEwQrGQkRBJoTCAdv
HwAAChEIbx4AAAoRBBdYEwQRBAmOaTLgAnsCAAAEAnsDAAAEcyAAAAoMAigNAAAGKBwAAAotMAIo
DQAABighAAAKLCMCKA0AAAZzIgAACgoGcokAAHBvIwAACgdvJAAACgZvJQAACgJ7BAAABG8mAAAK
FjE4AnsFAAAEbyYAAAoWMSoIFm8nAAAKCAJ7BAAABAJ7BQAABHMoAAAKbykAAAoIAnsGAAAEbyoA
AAoIB28rAAAKBiwGBm8sAAAKB28tAAAKCG8uAAAK3gMm3gAqQRwAAAAAAAAAAAAAOAIAADgCAAAD
AAAAEwAAAWYCKBIAAAYCKBMAAAYCKC8AAAoWbzAAAAoqAAATMAUAPQEAAAIAABECKC8AAApvMQAA
CnKZAABwbzIAAAoKBgIoLwAACm8zAAAKbzQAAAp0FwAAAQtyrwAAcAdzNQAACiUabzYAAAofIG83
AAAKDDjlAAAAczgAAAoNBgIoLwAACm8zAAAKbzQAAAp0FwAAAQty/QAAcAdzNQAACiUabzYAAAol
bzkAAApyRQEAcAhyVQEAcG86AAAKbzsAAApvPAAACiZzPQAACglvPgAACiYGB28/AAAKCW9AAAAK
b0EAAAoWMXRzDwAABiUXbwwAAAYlCW9AAAAKFm9CAAAKcnkBAHBvQwAACm87AAAKbwIAAAYlCW9A
AAAKFm9CAAAKcp0BAHBvQwAACm87AAAKbwgAAAYlCW9AAAAKFm9CAAAKcq0BAHBvQwAACm87AAAK
bwoAAAZvEAAABghvRAAACjoQ////KgAAABMwBQA9AQAAAgAAEQIoLwAACm8xAAAKcpkAAHBvMgAA
CgoGAigvAAAKbzMAAApvNAAACnQXAAABC3K3AQBwB3M1AAAKJRpvNgAACh8gbzcAAAoMOOUAAABz
OAAACg0GAigvAAAKbzMAAApvNAAACnQXAAABC3ILAgBwB3M1AAAKJRpvNgAACiVvOQAACnJFAQBw
CHJTAgBwbzoAAApvOwAACm88AAAKJnM9AAAKCW8+AAAKJgYHbz8AAAoJb0AAAApvQQAAChYxdHMP
AAAGJRdvDAAABiUJb0AAAAoWb0IAAApydwIAcG9DAAAKbzsAAApvAgAABiUJb0AAAAoWb0IAAApy
nQEAcG9DAAAKbzsAAApvCAAABiUJb0AAAAoWb0IAAApyrQEAcG9DAAAKbzsAAApvCgAABm8QAAAG
CG9EAAAKOhD///8qHgIoRQAACioeAigQAAAKKq5+EQAABC0ecpsCAHDQBAAAAihGAAAKb0cAAApz
SAAACoARAAAEfhEAAAQqGn4SAAAEKh4CgBIAAAQqGn4TAAAEKh4CKEkAAAoqLnMaAAAGgBMAAAQq
AEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAADgIAAAjfgAApAgAAMAKAAAjU3Ry
aW5ncwAAAABkEwAAEAMAACNVUwB0FgAAEAAAACNHVUlEAAAAhBYAAEgCAAAjQmxvYgAAAAAAAAAC
AAABVx2iCQkDAAAA+gEzABYAAAEAAAA6AAAABgAAABYAAAAbAAAACAAAAEkAAAADAAAAJQAAAAIA
AAADAAAACgAAABIAAAACAAAAAQAAAAUAAAABAAAAAQAAAAAA7AUBAAAAAAAGADkEQwgGAMgEQwgG
AIUDMAgPALcIAAAGALIDuQYGABwEuQYGAP0DuQYGAK8EuQYGAFkEuQYGAHIEuQYGAMkDuQYGAOQD
+QQGAKoJUwYKAGgJ0AUGAE0DQwgKADIK0AUKANQB0AUKAAsK0AUGAFEHUwYOAI0ETgUOAJQCTgUS
AMYHNAIWAEMH9QkWAI4H9QkWAOABkQAGAGMGUwYGAGgDMAgGALYHYwgGAHUHlAYKAPoCugUKAJkD
ugUKAMsCfwYGABUFUwYGADgJUwYKAOIG0AUGAAEAiQUGAC8CYAAKAOMC0AUKAPgG0AUKAHcFyQkK
AE0KyQkOAKgFTgUSACwJNAIWAJAB9QkWAIYBWwcWAFgCkQAWABMIkQAWAMsG9QkWAIEHWwcWAOkH
9QkWAAQI9QkWAPYHWwcWAA0HkQAWALACkQAWAG4KkQAGAF8CUwYGAOoBUwYGAIwKuQYAAAAADgAA
AAAAAQABAAAAEADYB6ABNQABAAEAAQAQAHQGoAFVABEAEQAAABAAagjGCDUAEQAVAAABEAD1CMYI
gQATABkAAwEAAHwJAABpABQAHABRgGYKOAEhAGAKOwEhAEcKOAEhAOMHOwEhAFoJOwEhAEUGPgEh
AKoHQQEhABwFOwEhAOAFOwEBAFUBOwEBAMUAOwEBAOIAOwEBADwBOwEBAHABOwEBACABPgEBAAAB
OwERAGgGRQERAIQCSQERAMQBTQEGBokAOAFWgGAJUQFWgGQCUQFQIAAAAACGCBYK0QABAFggAAAA
AIYIJAoQAAEAYSAAAAAAhggeANEAAgBpIAAAAACGCC4AEAACAHIgAAAAAIYIPgDRAAMAeiAAAAAA
hghPABAAAwCDIAAAAACGCLEJ0QAEAIsgAAAAAIYIvQkQAAQAlCAAAAAAhgh2CtEABQCcIAAAAACG
CH8KEAAFAKUgAAAAAIYIGQb8AAYArSAAAAAAhggoBlUABgC2IAAAAACGCA4C0QAHAL4gAAAAAIYI
IQIQAAcAyCAAAAAAhhgjCAYACAA0IQAAAACGAJsBBgAIAJgjAAAAAIYAegYGAAgAtCMAAAAAgQAP
AwYACAAAJQAAAACBAC4DBgAIAEkmAAAAAIYYIwgGAAgAUSYAAAAAgxgjCAYACABZJgAAAACTCLIH
VQEIAIUmAAAAAJMIbAJaAQgAjCYAAAAAkwh4Al8BCACUJgAAAACWCNoJZQEJAJsmAAAAAIYYIwgG
AAkAoyYAAAAAkRgpCGoBCQAAAAEA8wQAAAEA8wQAAAEA8wQAAAEA8wQAAAEA8wQAAAEA8wQAAAEA
8wQAAAEA8wQJACMIAQARACMIBgAZACMICgApACMIEAAxACMIEAA5ACMIEABBACMIEABJACMIEABR
ACMIEABZACMIEABhACMIEAB5ACMIBgChACMIBgDZACMIBgD5ACMIFQBpACMIBgBxACMIEACJACMI
BgAJAZUKKwAJAdQJMQCJAG4HOwAMAMEASQCJAL0JEACJAFoGTwCJAH8KEACJACgGVQAJAaEKKwAJ
Aa8KWgCJABcAOwAZAcEAEACJAKYAOwCRACMIXwApAZoJWgCBACMIEAAxAa4AEACJAIoJZQAUAMEA
SQAJASQFcwCRAA4JVQBBASMIdwCRAP4IfQCRADcGVQCRAJsBhAAxAfICBgCJAPICBgCRAPICBgCp
AHQJigBRAeYJAQBRASgJmwBZAUoGoQBRAakGpwCxAB8HqwBhASMIsABpAVQCtwBhAZwHvgDJACMI
BgBhAUsJxgCJAUoGzABpABMF0QCBAeYE1QCZASMI3QChARQG5ACxADEH6gDJAKEJ7wCxAT0KcwCp
AUoG9QC5AUoGzACJAbwA/ACpACMIBgDBAfwBAAHBAYgKCQHhACMIDwEBASMIBgAIAAQAKQEIAFQA
LgEIAFgAMwEgAGMAMwEuAAsAhQEuABMAjgEuABsArQEuACMAtgEuACsA3wEuADMA3wEuADsA3wEu
AEMAtgEuAEsA5QEuAFMA3wEuAFsA/AFAAGMAMwFgAGMAMwFjAGsAMwGAAGMAMwGDAHMAMwGgAGMA
MwHAAGMAMwHgAGMAMwEAAWMAMwEJAXsArQEgAWMAMwEpAXsArQFAAWMAMwFBAWMAMwFgAWMAMwFh
AWMAMwGAAWMAMwGBAWMAMwGgAWMAMwGhAWMAMwHAAWMAMwHBAWMAMwHhAWMAMwEBAmMAMwFhAmMA
MwEbAJAAAgABAAQACAAFAAoAAAAoCm4BAAAyAG4BAABTAG4BAADBCW4BAACDCm4BAAAsBnIBAAAl
Am4BAAC2B3YBAACMAnsBAADeCYABAgABAAMAAQACAAMAAgADAAUAAQAEAAUAAgAFAAcAAQAGAAcA
AgAHAAkAAQAIAAkAAgAJAAsAAQAKAAsAAgALAA0AAQAMAA0AAgANAA8AAQAOAA8AAgAWABEAAgAX
ABMAAQAYABMAAgAZABUAQQBrAASAAAABAAAAGByfWgAAAAAAAKABAAAEAAAAAAAAAAAAAAAXAZ0A
AAAAAAQAAAAAAAAAAAAAABcBUwYAAAAADgAAAAAAAAAAAAAAIAEvBQAAAAAOAAAAAAAAAAAAAAAg
AWoAAAAAAAQAAAAAAAAAAAAAABcBkQAAAAAAAAAAAAEAAAB0CAAABgADAAAAAAAAQ29sbGVjdGlv
bmAxADxNb2R1bGU+AGdldF9DQwBnZXRfUmVjaXBpZW50Q0MAc2V0X1JlY2lwaWVudENDAGdldF9S
ZWNpcGllbnRDQ08Ac2V0X1JlY2lwaWVudENDTwBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZl
ci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAbXNjb3JsaWIAZ2V0X0JjYwBzZXRfQ29u
dGVudElkAFJlYWQAQWRkADxSZWNpcGllbnRDQz5rX19CYWNraW5nRmllbGQAPFJlY2lwaWVudEND
Tz5rX19CYWNraW5nRmllbGQAPEF0dGFjaG1lbnRGaWxlPmtfX0JhY2tpbmdGaWVsZAA8SXNCb2R5
SHRtbD5rX19CYWNraW5nRmllbGQAPFN1YmplY3Q+a19fQmFja2luZ0ZpZWxkADxSZWNpcGllbnQ+
a19fQmFja2luZ0ZpZWxkADxCb2R5PmtfX0JhY2tpbmdGaWVsZABEYkNvbW1hbmQAU3FsQ29tbWFu
ZABTZW5kAFNUXzlhNzdhODc0ZjkxZDQ2ZDU5OWU3ZGZmMGI3M2ZkMmNlAGRlZmF1bHRJbnN0YW5j
ZQBNYWlsTWVzc2FnZQBEYXRhVGFibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5k
bGUAZ2V0X0F0dGFjaG1lbnRGaWxlAHNldF9BdHRhY2htZW50RmlsZQBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lAHNldF9Db21tYW5kVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9D
dWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJu
YWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQXR0YWNobWVudEJh
c2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBFbnZpYU5vdGlmaWNhY2lvbmVzU29saWNp
dGFudGUARW52aWFOb3RpZmljYWNpb25lc0F1dG9yaXphbnRlAENvbXBpbGVyR2VuZXJhdGVkQXR0
cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBF
ZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRy
YWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1
cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25S
ZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBBZGRXaXRoVmFs
dWUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwB0ZXN0aW5nAGdldF9M
ZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlRhc2tzLlNjcmlwdFRhc2sATmV0d29ya0NyZWRlbnRpYWwAU3lzdGVtLkNvbGxlY3Rpb25z
Lk9iamVjdE1vZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTeXN0
ZW0uTmV0Lk1haWwAdGVzdGluZ01haWwAU1RfOWE3N2E4NzRmOTFkNDZkNTk5ZTdkZmYwYjczZmQy
Y2UuZGxsAEZpbGwAZ2V0X0lzQm9keUh0bWwAc2V0X0lzQm9keUh0bWwAc2V0X0VuYWJsZVNzbABf
c3NsAGdldF9JdGVtAFN5c3RlbQBzZXRfRnJvbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4A
U3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9u
AFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24ATWFpbEFkZHJlc3NDb2xs
ZWN0aW9uAEF0dGFjaG1lbnRDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAEFjcXVpcmVDb25u
ZWN0aW9uAFJlbGVhc2VDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5E
YXRhLkNvbW1vbgBnZXRfVG8AQ3VsdHVyZUluZm8ARGJEYXRhUmVhZGVyAFNxbERhdGFSZWFkZXIA
RXhlY3V0ZVJlYWRlcgBfc2VuZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFn
ZXIATWFpbEhlbHBlcgBfdXNlcgBTcWxQYXJhbWV0ZXIARGJEYXRhQWRhcHRlcgBTcWxEYXRhQWRh
cHRlcgBDb21tYW5kQmVoYXZpb3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOWE3N2E4NzRm
OTFkNDZkNTk5ZTdkZmYwYjczZmQyY2UuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERl
YnVnZ2luZ01vZGVzAFNUXzlhNzdhODc0ZjkxZDQ2ZDU5OWU3ZGZmMGI3M2ZkMmNlLlByb3BlcnRp
ZXMAU2V0dGluZ3MAc2V0X0NyZWRlbnRpYWxzAHNldF9Vc2VEZWZhdWx0Q3JlZGVudGlhbHMAZ2V0
X0Nvbm5lY3Rpb25zAFN0cmluZ1NwbGl0T3B0aW9ucwBnZXRfUGFyYW1ldGVycwBfcGFzcwBTdWNj
ZXNzAE1haWxBZGRyZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfQXR0YWNobWVudHMARXhp
c3RzAGdldF9Sb3dzAE9iamVjdABnZXRfU3ViamVjdABzZXRfU3ViamVjdABTeXN0ZW0uTmV0AFNw
bGl0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABTbXRw
Q2xpZW50AGdldF9SZWNpcGllbnQAc2V0X1JlY2lwaWVudABBdHRhY2htZW50AGdldF9Db3VudABf
cG9ydABJQ3JlZGVudGlhbHNCeUhvc3QAX2hvc3QAVGltZW91dABEYXRhUm93AGdldF9Cb2R5AHNl
dF9Cb2R5AGdldF9Bc3NlbWJseQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5AElzTnVsbE9yRW1w
dHkAAAAAABUxADAALgA2AC4ANQAuADIANAAwAAAZbgBtAEAAdABwAG4AcwByAC4AYwBvAG0AAAEA
AzAAAElhAGwAZgByAGUAZABvAC4AZwB1AGUAcgByAGUAcgBvAEAAdABlAGwAZQBwAGUAcgBmAG8A
cgBtAGEAbgBjAGUALgBjAG8AbQAAAzEAAAM7AAAPaQBtAGEAZwBlAG4AcwAAFUEAUwBOAC4AYQBk
AG8AbgBlAHQAAE1hAHAAcAA2ADIAMAAuAFMAbwBsAGkAYwBpAHQAYQBuAHQAZQBQAGUAbgBkAGkA
ZQBuAHQAZQBEAGUARQBuAHYAaQBhAHIAUwBlAGwAAEdhAHAAcAA2ADIAMAAuAEUAbgB2AGkAYQBO
AG8AdABpAGYAaQBjAGEAYwBpAG8AbgBTAG8AbABpAGMAaQB0AGEAbgB0AGUAAA9AAEMAQwBNAFMA
SQBEAAAjUwBvAGwAaQBjAGkAdABhAG4AdABlAF8ASQBkAGUAbgB0AAAjQwBvAHIAcgBlAG8AUwBv
AGwAaQBjAGkAdABhAG4AdABlAAAPUwB1AGIAagBlAGMAdAAACUIAbwBkAHkAAFNhAHAAcAA2ADIA
MAAuAEEAdQB0AG8AcgBpAHoAYQBuAHQAZQBQAGUAbgBkAGkAZQBuAHQAZQBEAGUAQQB1AHQAbwBy
AGkAegBhAHIAUwBlAGwAAEdhAHAAcAA2ADIAMAAuAEUAbgB2AGkAYQBOAG8AdABpAGYAaQBjAGEA
YwBpAG8AbgBBAHUAdABvAHIAaQB6AGEAbgB0AGUAACNBAHUAdABvAHIAaQB6AGEAZABvAHIAXwBJ
AGQAZQBuAHQAACNDAG8AcgByAGUAbwBBAHUAdABvAHIAaQB6AGEAZABvAHIAAHFTAFQAXwA5AGEA
NwA3AGEAOAA3ADQAZgA5ADEAZAA0ADYAZAA1ADkAOQBlADcAZABmAGYAMABiADcAMwBmAGQAMgBj
AGUALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAAJ2a4QyYnUNM
gYfSBZFqF+sABCABAQgDIAABBSABARERBCABAQ4FIAEBEXkPBwkSQRJFEkkdDggODg4OBQACAg4O
CSACHQ4dDhGAiQUgABKAjQcVEoCRARI5BSABARMABSABARI5BCABAQIEAAECDgUgAgEOCAUgABKA
nQcVEoCRARJBAyAACAUgAgEODgYgAQESgKUFIAEBEkUFIAASgKkKBwQSWRJdEmESZQUgABKArQUg
ARJZHAMgABwEIAEcHAYgAgEOEl0GIAEBEYC5ByABEmERgL0FIAASgMEEIAEcDgMgAA4HIAISgMkO
HAYgAQESgLEFIAEIEmUEIAEBHAUgABKA1QYgARKA3QgDIAACCAABEoDhEYDlBSAAEoDpByACAQ4S
gOkIt3pcVhk04IkIiYRdzYCAzJEEIL8CAAQAAAAABAEAAAACBggCBg4CBgIDBhI5AwYScQMGEnUD
BhIUAwYRGAQAABJxBAAAEnUFAAEBEnUEAAASFAMAAAEDKAAOAygAAgQIABJxBAgAEnUECAASFAgB
AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfOWE3
N2E4NzRmOTFkNDZkNTk5ZTdkZmYwYjczZmQyY2UAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAx
OQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
ZRIuTkVUIEZyYW1ld29yayA0LjUAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5S
ZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGlt
ZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABcQAAAAAAAAAAAAAB2QAAAACAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAaEAAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAA
AAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAA
ABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQCfWhgcAAABAJ9aGBw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADkAYQA3ADcAYQA4ADcANABmADkAMQBkADQANgBkADUAOQA5AGUANwBkAGYAZgAwAGIANwAzAGYA
ZAAyAGMAZQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADEAOQAy
AC4AMgAzADEAOQA5AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADkA
YQA3ADcAYQA4ADcANABmADkAMQBkADQANgBkADUAOQA5AGUANwBkAGYAZgAwAGIANwAzAGYAZAAy
AGMAZQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAA
eQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA5AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBt
AGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AOQBhADcANwBhADgANwA0AGYAOQAxAGQANAA2AGQANQA5ADkAZQA3AGQAZgBmADAAYgA3
ADMAZgBkADIAYwBlAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADkAYQA3ADcAYQA4ADcANABmADkAMQBkADQANgBkADUAOQA5AGUANwBkAGYAZgAwAGIANwAz
AGYAZAAyAGMAZQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwAxADkAMgAuADIAMwAxADkAOQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANwAxADkAMgAuADIAMwAxADkAOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAACIMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="132"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="139,42"
          Id="Package\Tarea Script"
          TopLeft="501,66" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>