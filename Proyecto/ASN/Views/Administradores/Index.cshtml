@using ASN.Models;

@{
    ViewBag.Title = "Administradores";
}

<style>
    #grid {
        height: 99%;
    }

    #parent {
        overflow: hidden;
    }

    html,
    body {
        height: 100%;
    }
</style>

@if (User.Identity.IsAuthenticated)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <label>Adminsitradores</label>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div id="parent">
                    @(Html.Kendo().Grid<CatAdminSel_Result>()
                           .Name("grid")
                           .Columns(columns =>
                           {
                               columns.Command(command => { command.Edit().Text("Edit").UpdateText("Save").CancelText("Cancel"); }).Width(75);
                               columns.Bound(c => c.RelUserRoleId).Title("id").Visible(false).Filterable(false);
                               //columns.ForeignKey(c => c.CatRoleId, (System.Collections.IEnumerable)ViewData["roles"], "Id", "Valor").Width(125).Title("Rol");
                               columns.Bound(c => c.UserCCMSId).Width(100).Title("CCMSID").Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                               columns.Bound(c => c.Nombre).Width(175).Title("Nombre");
                               columns.Bound(c => c.Active).Width(50).Title("Activo").Filterable(false).ClientTemplate("#:Active  ? 'Si' : 'No' #");
                           }
                           )
                           .ToolBar(toolBar =>
                           {
                               toolBar.Create().Text("Nuevo");
                               toolBar.Excel().Text("Exportar a excel");
                           })
                           .Excel(ex => ex.AllPages(true))
                           //.HtmlAttributes(new { style = "height: 700px;" })
                           .Scrollable(sorteable => sorteable.Virtual(false))
                           .Sortable()
                           .Resizable(c => c.Columns(true))
                           //.Editable(editable => editable.Mode(GridEditMode.InCell))
                           .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("UsuariosPopUp"))
                           .Events(eve => eve.Edit("edit"))
                           .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                           .DataSource(dataSource => dataSource
                               .Ajax()
                               .Batch(true)
                               .ServerOperation(false)
                               .Model(model =>
                               {
                                   model.Id(c => c.RelUserRoleId);
                                   model.Field(c => c.RelUserRoleId).Editable(false);
                                   model.Field(c => c.UserCCMSId).Editable(true);
                                   model.Field(c => c.Nombre).Editable(true);
                                   model.Field(c => c.Active).Editable(true).DefaultValue(true);
                               })
                               .Read(read => read.Action("GetUsuarios", "Administradores"))
                               .Update(update => update.Action("UpdateUsuario", "Administradores").Type(HttpVerbs.Post))
                               .Create(create => create.Action("CreateUsuario", "Administradores").Type(HttpVerbs.Post))
                               .PageSize(10)
                               .Events(ev => ev.Error("errores").RequestEnd("reload"))
                           )
                           .Navigatable()
                           .Pageable(pageable => pageable
                               .Refresh(true)
                               .PageSizes(true)
                               .ButtonCount(5)
                               .Numeric(true)
                               .PreviousNext(true)
                           //.Messages(messages =>
                           //{
                           //    messages.ItemsPerPage("Registros por página");
                           //    messages.Empty("Sin información para mostrar");
                           //    messages.First("Primera");
                           //    messages.Page("Página");
                           //    messages.Last("Última");
                           //    messages.Previous("Anterior");
                           //    messages.Next("Siguiente");
                           //    messages.Refresh("Actualizar");
                           //    messages.Of("De");
                           //    messages.MorePages("Mas páginas");
                           //    //messages.Display("Prueba");
                           //    messages.Display("{0} a {1} de {2}");
                           //})
                           )
                    )
                </div>
            </div>
        </div>
    </div>

}
else
{
    <p>You are not logged in</p>
}

@Scripts.Render("~/bundles/Administradores")