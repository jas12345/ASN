
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .k-grid .k-hierarchy-col {
        width: 6px;
    }

    #grid {
        height: 99%;
    }

    #parent {
        
        overflow: hidden;
    }

    html,
    body {
        height: 100%;
    }

</style>

@if (User.Identity.IsAuthenticated)
{
    <div class="container-fluid">
        <div class="col-lg-12 col-md-12">
            <div class="row">
                @Html.Label("Reporte Auditorias", new { style = "font-size: 18px" })
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div id="parent">
                    @(Html.Kendo().Grid<ASN.Models.ReporteAuditoriasSel_Result>()
                            .Name("grid")
                            .Columns(columns =>
                            {
                                columns.Bound(e => e.Anio).Title("Año").Width(25).Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                                columns.Bound(e => e.PeriodoNominaId).Width(25).Title("Periodo").Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                                columns.Bound(e => e.FolioSolicitud).Width(25).Title("Folio").Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                                columns.Bound(e => e.Fecha_Solicitud).Title("Fecha de solicitud").Format("{0:yyyy-MM-dd}").Filterable(true).Width(30).Filterable(fil => fil.Cell(cc => cc.ShowOperators(false).Template("dateFilter")));
                                columns.Bound(e => e.FechaDeModificacion).Title("Fecha de modificación").Format("{0:yyyy-MM-dd}").Filterable(true).Width(30).Filterable(fil => fil.Cell(cc => cc.ShowOperators(false).Template("dateFilter")));
                                columns.Bound(e => e.Solicitante_Ident).Width(35).Title("Solicitante CCMSID").Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false))); ;
                                columns.Bound(e => e.NombreDelSolicitante).Width(100).Title("Nombre del solicitante");
                                columns.Bound(e => e.EstatusSolicitudId).Title("Estatus").Width(30);
                            })
                            .ToolBar(tools => tools.Excel().Text("Exportar Solicitudes"))
                            .Excel(excel => excel.FileName(DateTime.Now.ToString("yyyy-MM-dd_HH:mm:ss")).AllPages(true).Filterable(true))
                            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                            .Sortable()
                            .Scrollable()
                            .ClientDetailTemplateId("template")
                            //.HtmlAttributes(new { style = "height: 775px;" })
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Batch(true)
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(c => c.PeriodoNominaId);
                                })
                                .Read(read => read.Action("GetSolicitudes", "ReporteAuditoria"))
                            )
                            .Navigatable()
                            //.Events(e => e.DataBound("dataBound").ExcelExport("excelexport").DetailInit("detailInit"))
                            //.Events(e => e.DataBound("dataBound"))
                            .Events(e => e.ExcelExport("columnas"))
                            .Pageable(pageable => pageable
                                .Refresh(true)
                                .PageSizes(true)
                                .ButtonCount(5)
                                .Numeric(true)
                                .PreviousNext(true)
                                .Messages(messages =>
                                {
                                    messages.ItemsPerPage("Registros por página");
                                    messages.Empty("Sin información para mostrar");
                                    messages.First("Primera");
                                    messages.Page("Página");
                                    messages.Last("Última");
                                    messages.Previous("Anterior");
                                    messages.Next("Siguiente");
                                    messages.Refresh("Actualizar");
                                    messages.Of("De");
                                    messages.MorePages("Mas páginas");
                                    //messages.Display("Prueba");
                                    messages.Display("{0} a {1} de {2}");
                                })
                            )
                    )
                </div>
                
            </div>
        </div>
    </div>

    <script id="template" type="text/kendo-tmpl">
        <h3>Conceptos</h3>
        @(Html.Kendo().Grid<ASN.Models.ReporteAuditoriasDetalleSel_Result>()
                    .Name("grid_#=FolioSolicitud#") // template expression, to be evaluated in the master context
                    .Columns(columns =>
                    {
                        columns.Bound(o => o.FolioSolicitud).Title("FolioId").Width(15).Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                        columns.Bound(o => o.FechaDeCreacion).Width(30).Format("{0:yyyy-MM-dd}").Filterable(true).Filterable(fil => fil.Cell(cc => cc.ShowOperators(false).Template("dateFilter")));
                        columns.Bound(o => o.FechaDeModificacion).Width(30).Format("{0:yyyy-MM-dd}").Filterable(true).Filterable(fil => fil.Cell(cc => cc.ShowOperators(false).Template("dateFilter")));
                        columns.Bound(o => o.Empleado_Ident).Width(30).Title("Empleado CCMSID");
                        columns.Bound(o => o.NombreEmpleado).Width(65).Title("Nombre Empleado");
                        columns.Bound(o => o.ConceptoDesc).Width(50).Title("Concepto");
                        columns.Bound(o => o.MotivoSolicitudDesc).Width(50).Title("Motivo solicitud");
                        columns.Bound(o => o.EstatusSolicitudId).Width(25).Title("Estatus solicitud");
                    })
                    .ClientDetailTemplateId("template2")
                    //.Events(e => e.DataBound("dataBound"))
                    //.Events(e => e.ExcelExport("employees_excelExport2").DetailInit("employees_detailInit2"))
                    .Events(e => e.ExcelExport("columnas"))
                    .ToolBar(tools => tools.Excel().Text("ExportarConceptos"))
                    .Excel(excel => excel.FileName(DateTime.Now.ToString("yyyy-MM-dd_HH:mm:ss") + "_Conceptos_Detalle").AllPages(true).Filterable(true))

                    .HtmlAttributes(new { style = "height: 450px;" })
                    .Scrollable()
                    .Sortable()
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Read(read => read.Action("GetSolicitudesDetalle", "ReporteAuditoria", new { folioId = "#=FolioSolicitud#" }))
                    )
                    .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(10)
                        .Numeric(true)
                        .PreviousNext(true)
                        .Messages(messages =>
                        {
                            messages.ItemsPerPage("Registros por página");
                            messages.Empty("Sin información para mostrar");
                            messages.First("Primera");
                            messages.Page("Página");
                            messages.Last("Última");
                            messages.Previous("Anterior");
                            messages.Next("Siguiente");
                            messages.Refresh("Actualizar");
                            messages.Of("De");
                            messages.MorePages("Mas páginas");
                            //messages.Display("Prueba");
                            messages.Display("{0} a {1} de {2}");
                        })
                    )
                    .Sortable()
                    .ToClientTemplate()
        )
        <br />
        <h3>Autorizadores</h3>
        @(Html.Kendo().Grid<ASN.Models.ReporteAuditoriasDetalleAutorizadoresSel_Result>()
                    .Name("grid_#=FolioSolicitud#_a") // template expression, to be evaluated in the master context
                    .Columns(columns =>
                    {
                        columns.Bound(o => o.FolioSolicitud).Title("FolioId").Width(15).Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                        columns.Bound(o => o.Autorizador_Ident).Width(50).Title("Autorizador CCMSID");
                        columns.Bound(o => o.Nombre).Width(50).Title("Nombre de autorizador");
                        columns.Bound(o => o.Empleado_Ident).Width(50).Title("Empleado CCMSID");
                        columns.Bound(o => o.ConceptoDesc).Width(50).Title("Nombre de concepto");
                        columns.Bound(o => o.NivelAutorizacion).Width(50).Title("Nivel de autorización");
                    })
                    .ClientDetailTemplateId("template3")
                    .ToolBar(tools => tools.Excel().Text("ExportarAutorizadores"))
                    .Excel(excel => excel.FileName(DateTime.Now.ToString("yyyy-MM-dd_HH:mm:ss") + "_Autorizadores_Detalle").AllPages(true).Filterable(true))
                    .Events(e => e.ExcelExport("columnas"))
                    //.Events(e => e.DataBound("dataBound"))
                    //.Events(e => e.ExcelExport("employees_excelExport3").DetailInit("employees_detailInit3"))
                    .HtmlAttributes(new { style = "height: 450px;" })
                    .Scrollable()
                    .Sortable()
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Read(read => read.Action("GetSolicitudesDetalleAutorizadores", "ReporteAuditoria", new { folioId = "#=FolioSolicitud#" }))
                    )
                    .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(10)
                        .Numeric(true)
                        .PreviousNext(true)
                        .Messages(messages =>
                        {
                            messages.ItemsPerPage("Registros por página");
                            messages.Empty("Sin información para mostrar");
                            messages.First("Primera");
                            messages.Page("Página");
                            messages.Last("Última");
                            messages.Previous("Anterior");
                            messages.Next("Siguiente");
                            messages.Refresh("Actualizar");
                            messages.Of("De");
                            messages.MorePages("Mas páginas");
                            //messages.Display("Prueba");
                            messages.Display("{0} a {1} de {2}");
                        })
                    )
                    .Sortable()
                    .ToClientTemplate()
        )
    </script>

    <script id="template2" type="text/kendo-tmpl">
        <h3>Historial de movimientos</h3>
        @(Html.Kendo().Grid<ASN.Models.ReporteAuditoriasDetalleHistorialSel_Result>()
            .Name("grid_#=FolioSolicitud#_#=ConceptoId#_#=Empleado_Ident#_x") // template expression, to be evaluated in the master context
            .Columns(columns =>
            {
                columns.Bound(o => o.Monto).Width(30).Title("Monto");
                columns.Bound(o => o.ConceptoMotivoDesc).Width(30).Title("Concepto motivo");
                columns.Bound(o => o.MotivoSolicitudDesc).Width(30).Title("Motivo");
                columns.Bound(o => o.FechaModificacion).Title("Fecha del movimiento").Width(150).Format("{0:yyyy-MM-dd}").Filterable(true).Width(30).Filterable(fil => fil.Cell(cc => cc.ShowOperators(false).Template("dateFilter"))); ;
                //columns.Bound(o => o.NombreResponsable).Width(30);
                //columns.Bound(o => o.NombreAutorizador).Width(30).Title("Autorizador");
                //columns.Bound(o => o.NivelAutorizacion).Width(30).Title("Nivel");
                //columns.Bound(o => o.Accion).Width(25).Title("Accion");
                //columns.Bound(o => o.EstatusSolicitudId).Width(25).Title("Estatus");
            })
            .HtmlAttributes(new { style = "height: 350px;" })
            //.Scrollable()
            .Scrollable(scrollable => scrollable.Virtual(true))
            .Sortable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(100)
                .Read(read => read.Action("GetSolicitudesDetalleHistorial", "ReporteAuditoria", new { folioId = "#=FolioSolicitud#", eid = "#=Empleado_Ident#", conceptoId = "#=ConceptoId#" }))
                .ServerOperation(true)
                .Batch(true)
            )
            .Pageable(pageable => pageable
                .Refresh(true)
                //.PageSizes(true)
                //.ButtonCount(5)
                //.Numeric(true)
                //.PreviousNext(true)
                .Messages(messages =>
                {
                    messages.ItemsPerPage("Registros por página");
                    messages.Empty("Sin información para mostrar");
                    messages.First("Primera");
                    messages.Page("Página");
                    messages.Last("Última");
                    messages.Previous("Anterior");
                    messages.Next("Siguiente");
                    messages.Refresh("Actualizar");
                    messages.Of("De");
                    messages.MorePages("Mas páginas");
                    //messages.Display("Prueba");
                    messages.Display("{0} a {1} de {2}");
                })
            )
            .ToClientTemplate()
        )
    </script>

    <script id="template3" type="text/kendo-tmpl">
        <h3>Historial de movimientos</h3>
        @(Html.Kendo().Grid<ASN.Models.ReporteAuditoriasDetalleHistorialAutorizadoresSel_Result>()
            .Name("grid_#=FolioSolicitud#_#=ConceptoId#_#=Autorizador_Ident#_a") // template expression, to be evaluated in the master context
            .Columns(columns =>
            {
                //columns.Bound(o => o.Autorizador_Ident).Width(25).Title("Autorizador CCMSID");
                //columns.Bound(o => o.Nombre).Width(25).Title("Nombre del autorizador");
                columns.Bound(o => o.FechaModificacion).Title("Fecha del movimiento").Width(150).Format("{0:yyyy-MM-dd}").Filterable(true).Width(30).Filterable(fil => fil.Cell(cc => cc.ShowOperators(false).Template("dateFilter"))); ;
                columns.Bound(o => o.ConceptoDesc).Width(30).Title("Concepto");
                columns.Bound(o => o.Empleado_Ident).Title("FolioId").Width(15).Filterable(ftb => ftb.Cell(cell => cell.Template("gridFilterIntegerNumericTextbox").ShowOperators(false)));
                //columns.Bound(o => o.NombreAutorizador).Width(30).Title("Autorizador");
                //columns.Bound(o => o.NivelAutorizacion).Width(30).Title("Nivel");
                columns.Bound(o => o.Accion).Width(25).Title("Accion");
                //columns.Bound(o => o.EstatusSolicitudId).Width(25).Title("Estatus");
            })
            .HtmlAttributes(new { style = "height: 350px;" })
            //.Scrollable()
            .Scrollable(scrollable => scrollable.Virtual(true))
            .Sortable()
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(100)
                .Read(read => read.Action("GetSolicitudesDetalleHistorialAutorizadores", "ReporteAuditoria", new { folioId = "#=FolioSolicitud#", eid = "#=Autorizador_Ident#", conceptoId = "#=ConceptoId#" }))
                .ServerOperation(true)
                .Batch(true)
            )
            .Pageable(pageable => pageable
                .Refresh(true)
                //.PageSizes(true)
                //.ButtonCount(5)
                //.Numeric(true)
                //.PreviousNext(true)
                .Messages(messages =>
                {
                    messages.ItemsPerPage("Registros por página");
                    messages.Empty("Sin información para mostrar");
                    messages.First("Primera");
                    messages.Page("Página");
                    messages.Last("Última");
                    messages.Previous("Anterior");
                    messages.Next("Siguiente");
                    messages.Refresh("Actualizar");
                    messages.Of("De");
                    messages.MorePages("Mas páginas");
                    //messages.Display("Prueba");
                    messages.Display("{0} a {1} de {2}");
                })
            )
            .ToClientTemplate()
        )
    </script>
}
else
{
    <script type="text/javascript">
$(function(){
    window.location.href = "@Url.Action("Index","Inicio")";
});
    </script>
}

<script>

    //$('#expand').click(function (e) {
    //    var grid = $("#grid").data("kendoGrid");
    //    $(".k-master-row").each(function (index) {
    //        grid.expandRow(this);
    //    });
    //})

    //$('#collapse').click(function (e) {
    //    var grid = $("#grid").data("kendoGrid");
    //    $(".k-master-row").each(function (index) {
    //        grid.collapseRow(this);
    //    });
    //})

    //var detailExportPromises = [];

    //function dataBound() {
    //    detailExportPromises = [];
    //    //this.expandRow(this.tbody.find("tr.k-master-row").first());
    //    this.expandRow(this.tbody.find("tr.k-master-row"));
    //    this.collapseRow(this.tbody.find("tr.k-master-row"));
    //}

    //function excelexport(e) {
    //    e.preventDefault();

    //    var workbook = e.workbook;

    //    detailExportPromises = [];

    //    var masterData = e.data;

    //    for (var rowIndex = 0; rowIndex < masterData.length; rowIndex++) {
    //        exportChildData(masterData[rowIndex].FolioSolicitud, rowIndex);
    //    }

    //    $.when.apply(null, detailExportPromises)
    //        .then(function () {
    //            // Get the export results.
    //            var detailExports = $.makeArray(arguments);

    //            // Sort by masterRowIndex.
    //            detailExports.sort(function (a, b) {
    //                return a.masterRowIndex - b.masterRowIndex;
    //            });

    //            // Add an empty column.
    //            workbook.sheets[0].columns.unshift({
    //                width: 30
    //            });

    //            // Prepend an empty cell to each row.
    //            for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
    //                workbook.sheets[0].rows[i].cells.unshift({});
    //            }

    //            // Merge the detail export sheet rows with the master sheet rows.
    //            // Loop backwards so the masterRowIndex does not need to be updated.
    //            for (var i = detailExports.length - 1; i >= 0; i--) {
    //                var masterRowIndex = detailExports[i].masterRowIndex + 1; // compensate for the header row

    //                var sheet = detailExports[i].sheet;

    //                // Prepend an empty cell to each row.
    //                for (var ci = 0; ci < sheet.rows.length; ci++) {
    //                    if (sheet.rows[ci].cells[0].value) {
    //                        sheet.rows[ci].cells.unshift({});
    //                    }
    //                }

    //                // Insert the detail sheet rows after the master row.
    //                [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
    //            }

    //            // Save the workbook.
    //            kendo.saveAs({
    //                dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
    //                fileName: "Export.xlsx"
    //            });


    //        });
    //}


    //function exportChildData(FolioSolicitud, rowIndex) {
    //    var deferred = $.Deferred();

    //    detailExportPromises.push(deferred);

    //    //var rows = [{
    //    //    cells: [
    //    //        { value: "FolioId" },
    //    //        { value: "Fecha_De_Creacion" },
    //    //        { value: "Fecha_De_Modificacion" },
    //    //        { value: "Empleado_CCMSID" },
    //    //        { value: "Nombre_Empleado" },
    //    //        { value: "Concepto" },
    //    //        { value: "Motivo_Solicitud" },
    //    //        { value: "Estatus" }
    //    //    ]
    //    //}];

    //    var gridName1 = "grid_" + FolioSolicitud;
    //    var gridName2 = "grid_" + FolioSolicitud + "_a";

    //    dataSource1 = $("#" + gridName1).data().kendoGrid.dataSource;
    //    //dataSource2 = $("#" + gridName2).data().kendoGrid.dataSource;

    //    dataSource1.filter({ field: "FolioId", operator: "eq", value: FolioSolicitud });
    //    //dataSource2.filter({ field: "FolioId", operator: "eq", value: FolioSolicitud });

    //    var exporter = new kendo.ExcelExporter({
    //        columns: [{
    //            field: "FolioId"
    //             }, {
    //                field: "FechaDeCreacion"
    //            }, {
    //                field: "FechaDeModificacion"
    //            }, {
    //                field: "EmpleadoCCMSID"
    //            }, {
    //                field: "NombreEmpleado"
    //            }, {
    //                field: "Concepto"
    //            }, {
    //                field: "MotivoSolicitud"
    //            }, {
    //                field: "Estatus"
    //            }
    //        ],
    //        dataSource: dataSource1
    //    });

    //    //var exporter2 = new kendo.ExcelExporter({
    //    //    columns: [{
    //    //        field: "FolioSolicitud"
    //    //    }, {
    //    //        field: "Autorizador_Ident"
    //    //    }, {
    //    //        field: "Nombre"
    //    //    }, {
    //    //        field: "Empleado_Ident"
    //    //    }, {
    //    //        field: "ConceptoDesc"
    //    //    }, {
    //    //        field: "NivelAutorizacion"
    //    //    }
    //    //    ],
    //    //    dataSource: dataSource2
    //    //});

    //    exporter.workbook().then(function (book, data) {
    //        deferred.resolve({
    //            masterRowIndex: rowIndex,
    //            sheet: book.sheets[0]
    //        });
    //    });
    //}


    //function detailInit(e) {
    //    // Initiallize a new jQuery Deferred http://api.jquery.com/jQuery.Deferred/
    //    // var deferred = $.Deferred();

    //    // Get the index of the master row
    //    // var masterRowIndex = e.masterRow.index(".k-master-row");

    //    // Add the deferred to the list of promises
    //    // detailExportPromises.push(deferred);

    //    //$("<div/>").appendTo(e.detailCell).kendoGrid({
    //    //    dataSource: {
    //    //        type: "odata",
    //    //        transport: {
    //    //            read: "https://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"
    //    //        },
    //    //        serverPaging: true,
    //    //        serverSorting: true,
    //    //        serverFiltering: true,
    //    //        pageSize: 10,
    //    //        filter: { field: "EmployeeID", operator: "eq", value: e.data.EmployeeID }
    //    //    },
    //    //    excelExport: function (e) {
    //    //        // Prevent the saving of the file.
    //    //        e.preventDefault();

    //    //        // Resolve the deferred
    //    //        // deferred.resolve({
    //    //        //  masterRowIndex: masterRowIndex,
    //    //        //  sheet: e.workbook.sheets[0]
    //    //        //});
    //    //    },
    //    //    scrollable: false,
    //    //    pageable: true,
    //    //    columns: [
    //    //        { field: "OrderID", width: "70px" },
    //    //        { field: "ShipCountry", title: "Ship Country", width: "110px" },
    //    //        { field: "ShipAddress", title: "Ship Address" },
    //    //        { field: "ShipName", title: "Ship Name", width: "300px" }
    //    //    ]
    //    //});
    //}


    //var deferred1;
    //var deferred2;
    //var deferred3;
    //var masterRowIndex;
    //var detailExportPromises = [];

    //function dataBound() {
    //    detailExportPromises = [];
    //    //this.expandRow(this.tbody.find("tr.k-master-row").first());
    //    //this.expandRow(this.tbody.find("tr.k-master-row"));
    //}

    
    //function employees_detailInit(e) {
    //    deferred1 = $.Deferred();
    //    // get the index of the master row
    //    masterRowIndex = e.masterRow.index(".k-master-row");
    //    // add the deferred to the list of promises
    //    detailExportPromises.push(deferred1);

    //    //deferred1.resolve({
    //    //    masterRowIndex: masterRowIndex,
    //    //    sheet: e.workbook.sheets[0]
    //    //});

    //    var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");
    //    detailGrid.bind("excelExport", function (e) {
    //        // prevent saving the file
    //        e.preventDefault();
    //        // resolve the deferred
    //        deferred1.resolve({
    //            masterRowIndex: masterRowIndex,
    //            sheet: e.workbook.sheets[0]
    //        });
    //    });
    //}

    //function employees_detailInit2(e) {
    //    // initiallize a new jQuery Deferred http://api.jquery.com/jQuery.Deferred/
    //    deferred2 = $.Deferred();

    //    // get the index of the master row
    //    masterRowIndex = e.masterRow.index(".k-master-row");

    //    // add the deferred to the list of promises
    //    detailExportPromises.push(deferred2);

    //    //deferred2.resolve({
    //    //    masterRowIndex: masterRowIndex,
    //    //    sheet: e.workbook.sheets[0]
    //    //});

    //    var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");
    //    detailGrid.bind("excelExport", function (e) {
    //        // prevent saving the file
    //        e.preventDefault();
    //        // resolve the deferred
    //        deferred2.resolve({
    //            masterRowIndex: masterRowIndex,
    //            sheet: e.workbook.sheets[0]
    //        });
    //    });
    //}

    //function employees_detailInit3(e) {
    //    // initiallize a new jQuery Deferred http://api.jquery.com/jQuery.Deferred/
    //    deferred3 = $.Deferred();

    //    // get the index of the master row
    //    masterRowIndex = e.masterRow.index(".k-master-row");

    //    // add the deferred to the list of promises
    //    detailExportPromises.push(deferred3);

    //    //deferred3.resolve({
    //    //    masterRowIndex: masterRowIndex,
    //    //    sheet: e.workbook.sheets[0]
    //    //});

    //    var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");
    //    detailGrid.bind("excelExport", function (e) {
    //        // prevent saving the file
    //        e.preventDefault();
    //        // resolve the deferred
    //        deferred3.resolve({
    //            masterRowIndex: masterRowIndex,
    //            sheet: e.workbook.sheets[0]
    //        });
    //    });
    //}

    //function employees_excelExport3(e) {
    //    // prevent saving the file
    //    e.preventDefault();

    //    // resolve the deferred
    //    //deferred3.resolve({
    //    //    masterRowIndex: masterRowIndex,
    //    //    //isDetailGrid2: true,
    //    //    sheet: e.workbook.sheets[0]
    //    //});
    //}

    //function employees_excelExport2(e) {
    //    // prevent saving the file
    //    e.preventDefault();

    //    // resolve the deferred
    //    //deferred2.resolve({
    //    //    masterRowIndex: masterRowIndex,
    //    //    //isDetailGrid2: true,
    //    //    sheet: e.workbook.sheets[0]
    //    //});
    //}

    //function employees_excelExport(e) {
    //    // prevent saving the file because we will update the workbook
    //    e.preventDefault();
    //    var workbook = e.workbook;

    //    var workbook = e.workbook;

    //    // Export all detail grids
    //    $("#grid [data-role=grid]").each(function () {
    //        $(this).data("kendoGrid").saveAsExcel();
    //    });

    //    // wait for all detail grids to finish exporting
    //    $.when.apply(null, detailExportPromises).then(function () {
    //        // get the export results
    //        var detailExports = $.makeArray(arguments);

    //        /*
    //           need to recalculate the master row indexes of each export
    //           everytime you click expand in the master grid, the master row indexes are recalculated by Kendo
    //           e.g. you expand row 4 (which will display a grid with 6 rows), then you expand row 1 (which will display a grid with 12 rows)
    //           when you do this, the index of "row 4" is updated with 4 + 12. So the new index of "row 4" is actually 16
    //        */

    //        // first we need to create a copy of the original values, otherwise every subsequent export will have the already updated rows and it will try to update again
    //        for (var i = 0; i < detailExports.length; i++)
    //            detailExports[i].newMasterRowIndex = detailExports[i].masterRowIndex;

    //        for (var i = 1; i < detailExports.length; i++) {
    //            if (!detailExports[i].isDetailGrid2) {
    //                for (var j = 0; j < i; j++) {
    //                    if (detailExports[i].newMasterRowIndex <= detailExports[j].newMasterRowIndex) {
    //                        detailExports[j].newMasterRowIndex = detailExports[j].newMasterRowIndex + detailExports[i].sheet.rows.length - 1; // -1 to discount header
    //                        if (detailExports[i].sheet.rows[detailExports[i].sheet.rows.length - 1].type == "footer")
    //                            detailExports[j].newMasterRowIndex = detailExports[j].newMasterRowIndex - 1
    //                    }
    //                }
    //            }
    //        }

    //        // sort by masterRowIndex
    //        detailExports.sort(function (a, b) {
    //            return a.newMasterRowIndex - b.newMasterRowIndex;
    //        });

    //        // merge the detail export sheet rows with the master sheet rows
    //        var rowCount = 0;
    //        for (var i = 0; i < detailExports.length; i++) {
    //            // we need to recalculate the masterRowIndex everytime because the detailGrid2 should be inserted "in the middle" of the detailGrid
    //            // and not simply after it as you would normally do when you have only two grids
    //            var masterRowIndex = rowCount + detailExports[i].newMasterRowIndex + 1; // +1 to compensate for the header row

    //            var sheet = detailExports[i].sheet;

    //            if (sheet.rows[sheet.rows.length - 1].type == "footer")
    //                sheet.rows.splice(-1, 1); // don't export the footer

    //            if (detailExports[i].isDetailGrid2) {
    //                // prepend two empty cells to each row
    //                for (var ci = 0; ci < sheet.rows.length; ci++) {
    //                    if (sheet.rows[ci].cells[0].value) {
    //                        sheet.rows[ci].cells.unshift({});
    //                        sheet.rows[ci].cells.unshift({});
    //                    }
    //                    for (var cellIndex = 2; cellIndex < sheet.rows[ci].cells.length; cellIndex++) {
    //                        var colTitle = sheet.rows[ci].cells[cellIndex].value;
    //                        sheet.rows[ci].cells[cellIndex].background = "#C7D4E9";
    //                    }
    //                }
    //                rowCount = rowCount + sheet.rows.length;
    //            }
    //            else {

    //                // prepend an empty cell to each row
    //                for (var ci = 0; ci < sheet.rows.length; ci++) {
    //                    if (sheet.rows[ci].cells[0].value) {
    //                        sheet.rows[ci].cells.unshift({});
    //                    }
    //                    for (var cellIndex = 1; cellIndex < sheet.rows[ci].cells.length; cellIndex++) {
    //                        var colTitle = sheet.rows[ci].cells[cellIndex].value;
    //                        sheet.rows[ci].cells[cellIndex].background = "#CEE3F6";
    //                    }
    //                }
    //                rowCount = rowCount + 1;
    //            }
    //            // insert the detail sheet rows in the correct place
    //            [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
    //        }

    //        // update the indexes of the rows so they are exported correctly
    //        for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
    //            workbook.sheets[0].rows[i].index = i;
    //        }

    //        // save the workbook
    //        kendo.saveAs({
    //            dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
    //            fileName: "Export.xlsx"
    //        })
    //    });



    //    //// Export all detail grids
    //    //$("[data-role=grid]", this.element).each(function () {
    //    //    $(this).data("kendoGrid").saveAsExcel();
    //    //});
    //    //// wait for all detail grids to finish exporting
    //    //$.when.apply(null, detailExportPromises)
    //    //    .then(function () {
    //    //        // get the export results
    //    //        var detailExports = $.makeArray(arguments);
    //    //        // sort by masterRowIndex
    //    //        detailExports.sort(function (a, b) {
    //    //            return a.masterRowIndex - b.masterRowIndex;
    //    //        });
    //    //        // add an empty column
    //    //        workbook.sheets[0].columns.unshift({ width: 30 });
    //    //        // prepend an empty cell to each row
    //    //        for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
    //    //            workbook.sheets[0].rows[i].cells.unshift({});
    //    //        }
    //    //        // merge the detail export sheet rows with the master sheet rows
    //    //        // loop backwards so the masterRowIndex doesn't need to be updated
    //    //        for (var i = detailExports.length - 1; i >= 0; i--) {
    //    //            var masterRowIndex = detailExports[i].masterRowIndex + 1;
    //    //            var sheet = detailExports[i].sheet;
    //    //            // prepend an empty cell to each row
    //    //            for (var ci = 0; ci < sheet.rows.length; ci++) {
    //    //                if (sheet.rows[ci].cells[0].value) {
    //    //                    sheet.rows[ci].cells.unshift({});
    //    //                }
    //    //            }
    //    //            // insert the detail sheet rows after the master row
    //    //            [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
    //    //        }
    //    //        // save the workbook
    //    //        kendo.saveAs({
    //    //            dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
    //    //            //fileName: "Export.xlsx"
    //    //        });
    //    //    });
    //}
</script>

@Scripts.Render("~/bundles/ReporteAuditoria");