
@{
    ViewBag.Title = "Index";
}

@if (User.Identity.IsAuthenticated)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12 col-md-12">
                @Html.Label("Catálogo de Periodos de Nómina")
            </div>

        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                @(Html.Kendo().Grid<ASN.Models.PeriodoNominaViewModel>
    ()
    .Name("grid")
    .Columns(column =>
    {
        column.ForeignKey(c => c.AnioId, (System.Collections.IEnumerable)ViewData["Anios"], "Ident", "Valor").Width(75).Title("Año").Visible(true).Filterable(true);
        column.ForeignKey(c => c.MesId, (System.Collections.IEnumerable)ViewData["Meses"], "Ident", "Valor").Width(75).Title("Mes").Visible(true).Filterable(true);
        column.ForeignKey(c => c.PeriodicidadNominaId, (System.Collections.IEnumerable)ViewData["PeriodicidadNomina"], "Ident", "Valor").Width(85).Title("Periodicidad Nomina").Filterable(true).Visible(true);
        column.ForeignKey(c => c.ConsecutivoId, (System.Collections.IEnumerable)ViewData["Consecutivos"], "Ident", "Valor").Width(70).Title("Consecutivo").Visible(true).Filterable(true);
        column.ForeignKey(c => c.TipoPeriodo, (System.Collections.IEnumerable)ViewData["TipoPeriodicidad"], "Id", "Value").Width(85).Title("Tipo Periodo").Filterable(true);
        column.ForeignKey(c => c.TipoConsecutivoId, (System.Collections.IEnumerable)ViewData["TipoConsecutivo"], "Id", "Value").Width(85).Title("Tipo Consecutivo").Filterable(true);
        column.Bound(c => c.NombrePeriodo).Width(85).Title("Nombre Periodo").Filterable(false);
        column.Bound(c => c.FechaInicio).Visible(false).Filterable(false);
        column.Bound(c => c.FechaFin).Visible(false).Filterable(false);
        column.Bound(c => c.FechaCaptura).Visible(false).Filterable(false);
        column.Bound(c => c.FechaCierre).Visible(false).Filterable(false);
        column.Bound(c => c.CountryIdents).Visible(false).Filterable(false);
        column.Bound(c => c.EstatusPeriodo).Visible(true).Title("Estatus").Filterable(false).Width(40);
        column.Bound(c => c.TipoConsecutivoId).Visible(false);
        column.Bound(c => c.Active).Width(30).Title("Activo").Filterable(false).ClientTemplate("#:Active  ? 'Si' : 'No' #");
        column.Command(command => { command.Edit().Text("Editar").UpdateText("Guardar").CancelText("Cancelar"); }).Width(75);
    })
    .ToolBar(toolBar =>
    {
        toolBar.Create().Text("Nuevo");
        toolBar.Excel().Text("Exportar a excel");
    })
    .Excel(ex => ex.AllPages(true))
    .HtmlAttributes(new { style = "height: 700px;" })
    .Scrollable(sorteable => sorteable.Virtual(false))
    .Sortable()
    .Resizable(c => c.Columns(true))
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("PeriodoNominaPopUp").Window(x => x.Width(530).HtmlAttributes(new { style = "width: 530px" })))//
    .Events(eve => eve.SaveChanges("onSave").Edit("edit"))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(c => c.PeriodicidadNominaId);
        model.Field(c => c.AnioId).Editable(true);
        model.Field(c => c.MesId).Editable(true);
        model.Field(c => c.ConsecutivoId).Editable(true);
        model.Field(c => c.TipoPeriodo).Editable(true);
        model.Field(c => c.FechaInicio).Editable(true);
        model.Field(c => c.FechaFin).Editable(true);
        model.Field(c => c.FechaCaptura).Editable(false);
        model.Field(c => c.FechaCierre).Editable(true);
        model.Field(c => c.CountryIdents).Editable(true);
        model.Field(c => c.NombrePeriodo).Editable(true);
        model.Field(c => c.Active).Editable(true).DefaultValue(true);
    })
    .Read(read => read.Action("GetPeriodosNomina", "PeriodoNomina"))
    .Update(update => update.Action("UpdatePerdiodoNomina", "PeriodoNomina").Type(HttpVerbs.Post).Data("fechasValor"))
    .Create(create => create.Action("CreatePeriodoNomina", "PeriodoNomina").Type(HttpVerbs.Post).Data("fechasValor"))
    .PageSize(10)
    .Events(ev => ev.Error("errorsote").RequestEnd("valida"))
    )
    .Navigatable()
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5)
    .Numeric(true)
    .PreviousNext(true)
    .Messages(messages =>
    {
        messages.ItemsPerPage("Registros por página");
        messages.Empty("Sin información para mostrar");
        messages.First("Primera");
        messages.Page("Página");
        messages.Last("Última");
        messages.Previous("Anterior");
        messages.Next("Siguiente");
        messages.Refresh("Actualizar");
        messages.Of("De");
        messages.MorePages("Mas páginas");
        messages.Display("{0} a {1} de {2}");
    })
    )
    )

</div>
        </div>
    </div>
    <script>
        var urlFechasMes = '@Url.Action("GetFechasMes","ConsecutivoPeriodos")';
        var urlValidaPeriodoNomina = '@Url.Action("ValidaPeriodoNomina", "PeriodoNomina")';
    </script>
}
else
{
    <p>You are not logged in</p>
}

@Scripts.Render("~/bundles/PeriodoNomina")
