@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #grid {
        height: 99%;
        min-height: 99%;
        height: auto;
    }

    #parent {
        overflow: hidden;
    }

    html,
    body {
        min-height: 100%;
        height: auto;
        height: 100%;
    }

    .padding-0 {
        margin: 0 !important;
        padding: 0 !important;
    }
</style>

@if (User.Identity.IsAuthenticated)
{
    @Html.Hidden("PerfilGrid")
    <div class="container-fluid">

        <div class="row">
            <div class="col-lg-8">
                @Html.Label("Catálago de perfil de Empleados", new { id = "lblTitulo", style = "font-size: 18px" })
            </div>

            @*<div class="col-lg-2">
                    @Html.Label("Carga Masiva")
                </div>*@

            <div class="row">
                <div class="col-lg-5">
                    <div class="k-form-field">
                        <div class="col-lg-4">
                            Seleccion de perfil
                        </div>
                        <div class="editor-field">
                            @(Html.Kendo().DropDownList()
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetPerfilAllCMB", "PerfilEmpleados");
                            });
                        })
                        .Filter("contains")
                        .OptionLabel("- Seleccione perfil de empleados- ")
                        .DataValueField("Ident")
                        .DataTextField("Valor")
                        .Name("PerfilUsuarioId")
                        .HtmlAttributes(new { required = "required", style = "text-align:center;width: 22.4em", validationMessage = "Este campo es requerido." })
                        .Events(e=>e.Change("onChangePerfil"))
                    )
                        </div>
                    </div>
                </div>

                <div class="col-lg-5">
                    <div class="k-form-field">
                        <div class="col-lg-4">
                            Seleccion de Empleados
                        </div>
                        <div class="editor-field">
                            @(Html.Kendo().DropDownList()
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetEmpleadoPerfilEmpleadosAccesosCMB", "PerfilEmpleados");
                            });
                        })
                        .Filter("contains")
                        .OptionLabel("- Seleccione Empleados - ")
                        .DataValueField("Ident")
                        .DataTextField("Valor")
                        .Name("EmpleadoPerfil")
                        .HtmlAttributes(new { required = "required", style = "text-align:center;width: 22.4em", validationMessage = "Este campo es requerido." })
                        .Events(e=>e.Change("onChangeEmpleado"))
                    )
                        </div>
                    </div>
                </div>

                @if (@User.Identity.Name == "3818974")
                {

                    <div class="col-lg-2 text-right k-align">
                        Carga Masiva
                    </div>
                    <div class=" col-sm-2 ">
                        @(Html.Kendo().Upload()
                                .Name("filesPE")
                                .Async(a => a
                                    .Save("Async_CreaPerfilEmpleadosMasiva", "PerfilEmpleados")
                                    .AutoUpload(true)
                                     )
                                .Events(e => e
                                .Success("onSuccess")
                                    )
                                .Validation(val => val.AllowedExtensions(new string[] { ".csv" }))
                                )


                    </div>
                    <div class=" col-lg-offset-3">

                    </div>
                }
                else
                {
                    <div class=" col-lg-offset-7">

                    </div>
                }

            </div>



        </div>
        <div class="row">
            <div class="col-lg-12">
                <div id="parent">
                    @(Html.Kendo().Grid<ASN.Models.CatPerfilEmpleadosViewModel>()
                        .Name("grid")
                        .Columns(columns =>
                        {
                            columns.Command(command => { command.Edit().Text("Editar").UpdateText("Guardar").CancelText("Cancelar"); }).Width(100);
                            columns.Bound(c => c.Perfil_Ident).Title("Perfil").Visible(false).Filterable(false).Width(50);
                            columns.Bound(c => c.NombrePerfilEmpleados).Title("Nombre de Perfil").Width(220);
                            columns.ForeignKey(c => c.Country_Ident, (System.Collections.IEnumerable)ViewData["Pais"], "Id", "Value").Title("Pais").Visible(true).Filterable(true).Width(220);
                            columns.ForeignKey(c => c.City_Ident, (System.Collections.IEnumerable)ViewData["Ciudad"], "Id", "Value").Title("Ciudad").Visible(true).Filterable(true).Width(220);
                            columns.ForeignKey(c => c.Location_Ident, (System.Collections.IEnumerable)ViewData["Site"], "Id", "Value").Title("Site").Visible(true).Filterable(true).Width(220);
                            //columns.ForeignKey(c => c.Client_Ident, (System.Collections.IEnumerable)ViewData["Cliente"], "Id", "Value").Title("Cliente").Visible(true).Filterable(true).Width(220);
                            columns.ForeignKey(c => c.Program_Ident, (System.Collections.IEnumerable)ViewData["Programa"], "Id", "Value").Title("Programa").Visible(true).Filterable(true).Width(220);
                            //columns.ForeignKey(c => c.Contract_Type_Ident, (System.Collections.IEnumerable)ViewData["Tipocontrato"], "Id", "Value").Title("Tipo de Contrato").Visible(true).Filterable(true).Width(220);
                            //columns.ForeignKey(c => c.ConceptoId, (System.Collections.IEnumerable)ViewData["Concepto"], "Ident", "Valor").Title("Concepto").Visible(false).Filterable(true).Width(220);
                            //columns.Bound(c => c.Concepto).Title("Concepto").Width(220);
                            columns.ForeignKey(c => c.TipoAccesoId, (System.Collections.IEnumerable)ViewData["TipoAcceso"], "Ident", "Valor").Title("Tipo de Acceso").Visible(true).Filterable(true).Width(220);
                            columns.Bound(c => c.Active).Title("Activo").Filterable(false).ClientTemplate("#:Active  ? 'Si' : 'No' #").Width(100);
                        })
                        .ToolBar(toolBar =>
                        {
                            toolBar.Create().Text("Nuevo");
                            toolBar.Excel().Text("Exportar a excel");
                        })
                        .Excel(ex => ex.AllPages(true))
                        //.HtmlAttributes(new { style = "height: 475px;" })
                        .Scrollable(sorteable => sorteable.Virtual(false))
                        .Sortable()
                        .Resizable(c => c.Columns(true))

                        //.Editable(editable => editable.Mode(GridEditMode.InCell))
                        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("PerfilEmpleadosPopUp"))
                        .Events(eve => eve.Edit("edit"))
                        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)

                            .Model(model =>
                            {
                                model.Id(c => c.Perfil_Ident);
                                model.Field(c => c.NombrePerfilEmpleados).Editable(true);
                                model.Field(c => c.Country_Ident).Editable(true).DefaultValue("0");
                                model.Field(c => c.City_Ident).Editable(true);
                                model.Field(c => c.Location_Ident).Editable(true);
                                model.Field(c => c.Client_Ident).Editable(true).DefaultValue("0");
                                model.Field(c => c.Client_Name).Editable(true).DefaultValue("0");
                                model.Field(c => c.Program_Ident).Editable(true);
                                model.Field(c => c.Contract_Type_Ident).Editable(true);
                                model.Field(c => c.ConceptoId).Editable(true);
                                model.Field(c => c.ConceptoNombre).Editable(true).DefaultValue("");
                                model.Field(c => c.TipoAccesoId).Editable(true);
                                model.Field(c => c.Active).Editable(true).DefaultValue(true);
                            })
                            .Read(read => read.Action("GetPerfilEmpleados", "PerfilEmpleados").Data("GetPerfil"))
                            .Update(update => update.Action("UpdatePerfilEmpleados", "PerfilEmpleados").Type(HttpVerbs.Post).Data("MultiClientesMultiConceptos"))
                            .Create(create => create.Action("CreatePerfilEmpleados", "PerfilEmpleados").Type(HttpVerbs.Post).Data("MultiClientesMultiConceptos"))

                            //.Copy(copy => create.Action("CopyPerfilEmpleados", "PerfilEmpleados").Type(HttpVerbs.Post))
                            .PageSize(10)
                        .Events(events => events
                                        .Error("errorsote").RequestEnd("hola")







                                )

                        )
                        .Navigatable()
                        .Pageable(pageable => pageable
                            .Refresh(true)
                            .PageSizes(true)
                            .ButtonCount(5)
                            .Numeric(true)
                            .PreviousNext(true)
                        .Messages(messages =>
                        {
                            messages.ItemsPerPage("Registros por página");
                            messages.Empty("Sin información para mostrar");
                            messages.First("Primera");
                            messages.Page("Página");
                            messages.Last("Última");
                            messages.Previous("Anterior");
                            messages.Next("Siguiente");
                            messages.Refresh("Actualizar");
                            messages.Of("De");
                            messages.MorePages("Mas páginas");
                            //messages.Display("Prueba");
                            messages.Display("{0} a {1} de {2}");
                        })
                        )
                    )
                </div>
            </div>
        </div>
    </div>
    <script>
        //Copia de Perfil de Empleados
        var urlCopyPerfilEmpleados = '@Url.Action("CopyPerfilEmpleados", "PerfilEmpleados")';
        var urlGetPerfilEmpleados = '@Url.Action("GetPerfilEmpleados", "PerfilEmpleados")';


        function onSuccess(e)
        {
                const jsonObject = JSON.stringify(e.response);
                const csv = convertToCSV(jsonObject);
                var d = new Date();


            const exportName = "Errores de la cara masiva_" + d.getDate + '-' + d.getMonth + '-' + d.getFullYear + '.csv';
            const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
            if (navigator.msSaveBlob) {
                navigator.msSaveBlob(blob, exportName);
            } else {
                const link = document.createElement("a");
                if (link.download !== undefined) {
                    const url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", exportName);
                    link.style.visibility = "hidden";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            }
                //const url = URL.createObjectURL(csv);
                //// Create a new anchor element
                //const a = document.createElement('a');
                //a.href = url;
                //a.download = 'Errores Carga Masiva_'+ fecha + '.csv';
                //a.click();
                //a.remove();
            //});



                //    $.ajax({
                //        url: url
                //        method: 'post',
                //        contentType: 'application/json',
                //        dataType: 'json',
                //        data: JSON.stringify(data),
                //        traditional: true,
                //        success: function (d) {
                //            //do stuff
                //        }
                //    });
        }

        function convertToCSV(objArray) {
            const array = typeof objArray != "object" ? JSON.parse(objArray) : objArray;
            let str = "";
            for (let i = 0; i < array.length; i++) {
                let line = "";
                for (let index in array[i]) {
                    if (line != "") line += ",";
                    line += array[i][index];
                }
                str += line + "\r\n";
            }
            return str;
        }

    </script>
}
else
{
    <p>You are not logged in</p>
}

@Scripts.Render("~/bundles/PerfilEmpleados")