
@{
    ViewBag.Title = "Seleccionar Personal";
    var SolicitudId = TempData["SolicitudId"];
}

@if (User.Identity.IsAuthenticated)
{
    <div class="container-fluid">
        <div class="row">
            <div id="tab1">
                <div class="container-fluid">
                    <div class="col-lg-12 col-md-12">
                        <div class="row"><div style="display: inline-block;">@Html.Label("Captura de solicitud", new { style = "font-size: 15px; color:darkgrey;" }) - @Html.Label("Selección de Empleados", new { style = "font-size: 15px" }) - @Html.Label("Conceptos motivos por empleado", new { style = "font-size: 15px; color:darkgrey;" })</div></div>
                    </div>
                    <div class="k-form-inline" style="padding:5px; display:none;" >
                        <div class="k-form-field">
                            <div class="editor-label">
                                <label for="perfilId">Perfil de usuario</label>
                            </div>
                            <input type="hidden" id="SolicitudId" value="@SolicitudId" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12">
                            @(Html.Kendo().Grid<ASN.Models.EmpleadosxPerfilSel_Result>()
                                    .Name("grid")
                                    .Columns(column =>
                                    {
                                        column.Select().Width(7).HtmlAttributes(new { style = "text-align:center" });
                                        column.Bound(c => c.Ident).Width(40).Title("CCMSId").Visible(true).Filterable(true);
                                        column.Bound(c => c.First_Name).Width(50).Title("Nombre").Filterable(true);
                                        column.Bound(c => c.Last_Name).Title("Apellido(s)").Visible(true).Filterable(true).Width(50);
                                        column.Bound(c => c.Position_Code_Title).Title("Puesto").Visible(true).Filterable(true).Width(70);
                                        column.Bound(c => c.Current_Status).Width(50).Visible(false);
                                        column.Bound(c => c.Existe).Width(50).Visible(false);
                                        column.Bound(c => c.EsNuevo).Width(50).Visible(false);
                                        //column.Command(command => { command.Edit().Text("Editar"); }).Width(20);
                                    })
                                    .HtmlAttributes(new { style = "height: 700px;" })
                                    .Scrollable(sorteable => sorteable.Virtual(false))
                                    .Sortable()
                                    .PersistSelection()
                                    .Resizable(c => c.Columns(true))
                                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EmpleadosSolicitudesPopUp").Window(x => x.Width(530).HtmlAttributes(new { style = "width: 530px" })))
                                    .Events(eve => eve.SaveChanges("onSave").Edit("edit").DataBound("validacheckdefault"))
                                    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                                    .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Model(model =>
                                            {
                                                model.Id(c => c.Ident);
                                                model.Field(c => c.First_Name).Editable(true);
                                                model.Field(c => c.Last_Name).Editable(true);
                                                model.Field(c => c.Position_Code_Title).Editable(true);
                                            })
                                            .Read(read => read.Action("GetEmployee", "Solicitudes").Data("GetPerfil"))
                                            .Events(ev => ev.Error("errorsote").RequestEnd("valida"))
                                            .Update(update => update.Action("CreateSolicitudEmpleadosDetalle", "EmpleadosSolicitudes"))//.Data("GetParametros")
                                            )
                                                   .Navigatable()
                                                   .Pageable(pageable => pageable
                                                   .Refresh(true)
                                                   .PageSizes(true)
                                                   .ButtonCount(5)
                                                   .Numeric(true)
                                                   .PreviousNext(true)
                                                   .Messages(messages =>
                                                   {
                                                       messages.ItemsPerPage("Registros por página");
                                                       messages.Empty("Sin información para mostrar");
                                                       messages.First("Primera");
                                                       messages.Page("Página");
                                                       messages.Last("Última");
                                                       messages.Previous("Anterior");
                                                       messages.Next("Siguiente");
                                                       messages.Refresh("Actualizar");
                                                       messages.Of("De");
                                                       messages.MorePages("Mas páginas");
                                                       messages.Display("{0} a {1} de {2}");
                                                   })
                                                   )
                            )
                        </div>
                    </div>
                    <div class="row">
                        <div class="k-form-field" style="float:right; margin-right:15px;">
                            <button id="Anterior" type="button" data-role="button" class="k-button k-button-icontext" onclick="accion(4);" role="button" aria-disabled="false" tabindex="0">
                                <span class="k-icon k-i-save"></span>Guardar
                            </button>
                            <button id="Anterior" type="button" data-role="button" class="k-button k-button-icontext primary" onclick="accion(2);" role="button" aria-disabled="false" tabindex="0">
                                <span class="k-icon k-i-redo"></span> Continuar
                            </button>
                        </div>
                    </div>
                </div>

            </div>

            <div id="tab2" hidden>
                <div id="cuerpo2" class="row">
                </div>
                <input type="button" value="Guardar" onclick="accion(4);" /> <button class="success" onclick="accion(3);">Siguiente</button>
            </div>
            <div id="tab3" hidden><h1>TAB 3 DEMO</h1><input type="button" value="Anterior" onclick="accion(5);" /> <button class="success" onclick="">Siguiente</button></div>
        </div>
    </div>
    <script>
        var urlSolicitudEmpleados = '@Url.Action("GuardaEmpleados", "Solicitudes")';
    </script>
}
else
{
    <script type="text/javascript">
    $(function(){
        window.location.href = "@Url.Action("Index","Inicio")";
    });
    </script>
}

@Scripts.Render("~/bundles/Solicitudes")

