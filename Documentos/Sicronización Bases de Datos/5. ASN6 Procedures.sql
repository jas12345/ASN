/*
Deployment script for ASN6

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ASN6"
:setvar DefaultFilePrefix "ASN6"
:setvar DefaultDataPath "E:\SQL\DATA\"
:setvar DefaultLogPath "E:\SQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [app620].[CatAniosNomina]...';


GO
CREATE TABLE [app620].[CatAniosNomina] (
    [AnioId]                 INT          NOT NULL,
    [FechaInicio]            DATETIME     NOT NULL,
    [FechaCierre]            DATETIME     NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_AnioNomina] PRIMARY KEY CLUSTERED ([AnioId] ASC)
);


GO
PRINT N'Creating [app620].[CatCargaRapida]...';


GO
CREATE TABLE [app620].[CatCargaRapida] (
    [CargaRapidaId]              INT            IDENTITY (1, 1) NOT NULL,
    [CCMSID]                     INT            NOT NULL,
    [ConceptoId]                 INT            NOT NULL,
    [Parametro]                  DECIMAL (8, 2) NOT NULL,
    [Motivo]                     INT            NOT NULL,
    [ConceptoMotivo]             INT            NULL,
    [ResponsableIncidenteCCMSID] INT            NULL,
    [PeriodoOriginalDePago]      NVARCHAR (50)  NOT NULL,
    [PeriodoNominaActual]        NVARCHAR (50)  NOT NULL,
    [Estatus]                    INT            NOT NULL,
    [Active]                     BIT            NOT NULL,
    [CreatedBy]                  INT            NOT NULL,
    [CreatedDate]                DATETIME       NOT NULL,
    [DeactivatedDate]            DATETIME       NULL,
    [DeactivatedBy]              INT            NULL,
    [LastModifiedBy]             INT            NOT NULL,
    [LastModifiedDate]           DATETIME       NOT NULL,
    [LastModifiedFromPCName]     VARCHAR (64)   NOT NULL,
    [FolioSolicitudId]           INT            NOT NULL,
    [Justificacion]              NVARCHAR (500) NULL,
    CONSTRAINT [PK_CatCargaRapida] PRIMARY KEY CLUSTERED ([CargaRapidaId] ASC)
);


GO
PRINT N'Creating [app620].[CatConceptos]...';


GO
CREATE TABLE [app620].[CatConceptos] (
    [ConceptoId]              INT             IDENTITY (1, 1) NOT NULL,
    [Descripcion]             VARCHAR (50)    NOT NULL,
    [TipoConceptoId]          INT             NOT NULL,
    [PaisId]                  VARCHAR (50)    NULL,
    [ClienteId]               INT             NOT NULL,
    [PeopleSoftId]            INT             NOT NULL,
    [NumeroNivelAutorizante]  INT             NULL,
    [AutorizacionAutomatica]  BIT             NULL,
    [AutorizacionObligatoria] BIT             NULL,
    [Vigencia]                VARCHAR (50)    NULL,
    [PagosFijos]              BIT             NULL,
    [Tope]                    DECIMAL (18, 2) NULL,
    [PeriodicidadNominaId]    VARCHAR (50)    NULL,
    [FechaInicio]             DATETIME        NULL,
    [FechaFin]                DATETIME        NULL,
    [ParametroConceptoId]     INT             NOT NULL,
    [Active]                  BIT             NOT NULL,
    [CreatedBy]               INT             NOT NULL,
    [CreatedDate]             DATETIME        NOT NULL,
    [DeactivatedDate]         DATETIME        NULL,
    [DeactivatedBy]           INT             NULL,
    [LastModifiedBy]          INT             NOT NULL,
    [LastModifiedDate]        DATETIME        NOT NULL,
    [LastModifiedFromPCName]  VARCHAR (64)    NOT NULL,
    CONSTRAINT [PK_Conceptos] PRIMARY KEY CLUSTERED ([ConceptoId] ASC)
);


GO
PRINT N'Creating [app620].[CatConceptosMotivos]...';


GO
CREATE TABLE [app620].[CatConceptosMotivos] (
    [ConceptoMotivoId]       INT          IDENTITY (1, 1) NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_ConceptosMotivo] PRIMARY KEY CLUSTERED ([ConceptoMotivoId] ASC)
);


GO
PRINT N'Creating [app620].[CatConceptosNivelAutorizador]...';


GO
CREATE TABLE [app620].[CatConceptosNivelAutorizador] (
    [ConceptoId]              INT          NOT NULL,
    [NivelId]                 INT          NOT NULL,
    [AutorizadorIdent]        INT          NULL,
    [AutorizacionObligatoria] BIT          NOT NULL,
    [Active]                  BIT          NOT NULL,
    [CreatedBy]               INT          NOT NULL,
    [CreatedDate]             DATETIME     NOT NULL,
    [DeactivatedDate]         DATETIME     NULL,
    [DeactivatedBy]           INT          NULL,
    [LastModifiedBy]          INT          NOT NULL,
    [LastModifiedDate]        DATETIME     NOT NULL,
    [LastModifiedFromPCName]  VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_ConceptosNivelAutorizador] PRIMARY KEY CLUSTERED ([ConceptoId] ASC, [NivelId] ASC)
);


GO
PRINT N'Creating [app620].[CatConceptosPeopleSoft]...';


GO
CREATE TABLE [app620].[CatConceptosPeopleSoft] (
    [ConceptoId]             INT          IDENTITY (1, 1) NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [DescripcionPeopleSoft]  VARCHAR (50) NULL,
    [TipoConceptoId]         INT          NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_ConceptosPeopleSoft] PRIMARY KEY CLUSTERED ([ConceptoId] ASC)
);


GO
PRINT N'Creating [app620].[CatConsecutivoPeriodicidad]...';


GO
CREATE TABLE [app620].[CatConsecutivoPeriodicidad] (
    [ConsecutivoId]          VARCHAR (5)  NOT NULL,
    [PeriodicidadNominaId]   VARCHAR (5)  NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatConcecutivoPeriodicidad] PRIMARY KEY CLUSTERED ([PeriodicidadNominaId] ASC, [ConsecutivoId] ASC)
);


GO
PRINT N'Creating [app620].[CatConsecutivoPeriodos]...';


GO
CREATE TABLE [app620].[CatConsecutivoPeriodos] (
    [AnioId]                 INT          NOT NULL,
    [MesId]                  INT          NOT NULL,
    [ConsecutivoId]          VARCHAR (5)  NOT NULL,
    [PeriodicidadNominaId]   VARCHAR (5)  NOT NULL,
    [TipoConsecutivoId]      INT          NOT NULL,
    [FechaInicio]            DATETIME     NOT NULL,
    [FechaCierre]            DATETIME     NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatConcecutivoPeriodos] PRIMARY KEY CLUSTERED ([AnioId] ASC, [MesId] ASC, [PeriodicidadNominaId] ASC, [ConsecutivoId] ASC)
);


GO
PRINT N'Creating [app620].[CatEmpleadosSolicitudes]...';


GO
CREATE TABLE [app620].[CatEmpleadosSolicitudes] (
    [FolioSolicitud]         INT             NOT NULL,
    [Empleado_Ident]         INT             NOT NULL,
    [ConceptoId]             INT             NOT NULL,
    [ParametroConceptoMonto] DECIMAL (18, 2) NULL,
    [MotivosSolicitudId]     INT             NOT NULL,
    [EstatusSolicitudId]     VARCHAR (5)     NOT NULL,
    [Active]                 BIT             NOT NULL,
    [CreatedBy]              INT             NOT NULL,
    [CreatedDate]            DATETIME        NOT NULL,
    [DeactivatedBy]          INT             NULL,
    [DeactivatedDate]        DATETIME        NULL,
    [LastModifiedBy]         INT             NOT NULL,
    [LastModifiedDate]       DATETIME        NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64)    NOT NULL,
    CONSTRAINT [PK_RelEmpleadosSolicitudes] PRIMARY KEY CLUSTERED ([FolioSolicitud] ASC, [Empleado_Ident] ASC, [ConceptoId] ASC)
);


GO
PRINT N'Creating [app620].[CatEmpleadosSolicitudesLog]...';


GO
CREATE TABLE [app620].[CatEmpleadosSolicitudesLog] (
    [FolioSolicitud]         INT             NULL,
    [Empleado_Ident]         INT             NULL,
    [ConceptoId]             INT             NULL,
    [ParametroConceptoMonto] DECIMAL (18, 2) NULL,
    [MotivosSolicitudId]     INT             NULL,
    [EstatusSolicitudId]     VARCHAR (5)     NULL,
    [Active]                 BIT             NULL,
    [CreatedBy]              INT             NULL,
    [CreatedDate]            DATETIME        NULL,
    [DeactivatedBy]          INT             NULL,
    [DeactivatedDate]        DATETIME        NULL,
    [LastModifiedBy]         INT             NULL,
    [LastModifiedDate]       DATETIME        NULL,
    [LastModifiedFromPCName] VARCHAR (64)    NULL,
    [Operation]              NVARCHAR (10)   NULL
);


GO
PRINT N'Creating [app620].[CatEstatusSolicitudes]...';


GO
CREATE TABLE [app620].[CatEstatusSolicitudes] (
    [EstatusSolicitudId]     VARCHAR (5)  NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_EstatusSolicitud] PRIMARY KEY CLUSTERED ([EstatusSolicitudId] ASC)
);


GO
PRINT N'Creating [app620].[CatLogError]...';


GO
CREATE TABLE [app620].[CatLogError] (
    [LogErrorId]             INT            IDENTITY (1, 1) NOT NULL,
    [LogErrorMessage]        VARCHAR (2000) NOT NULL,
    [StackTrace]             VARCHAR (2000) NOT NULL,
    [Browser]                VARCHAR (100)  NULL,
    [IpAddress]              VARCHAR (20)   NULL,
    [CreatedBy]              INT            NOT NULL,
    [CreatedDate]            DATETIME       NOT NULL,
    [LastModifiedBy]         INT            NOT NULL,
    [LastModifiedDate]       DATETIME       NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64)   NOT NULL
);


GO
PRINT N'Creating [app620].[CatMeses]...';


GO
CREATE TABLE [app620].[CatMeses] (
    [MesId]                  INT          NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatMeses] PRIMARY KEY CLUSTERED ([MesId] ASC)
);


GO
PRINT N'Creating [app620].[CatMesesNomina]...';


GO
CREATE TABLE [app620].[CatMesesNomina] (
    [AnioId]                 INT          NOT NULL,
    [MesId]                  INT          NOT NULL,
    [FechaInicio]            DATETIME     NOT NULL,
    [FechaCierre]            DATETIME     NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatMesesNomina] PRIMARY KEY CLUSTERED ([AnioId] ASC, [MesId] ASC)
);


GO
PRINT N'Creating [app620].[CatMotivosSolicitud]...';


GO
CREATE TABLE [app620].[CatMotivosSolicitud] (
    [MotivosSolicitudId]     INT          IDENTITY (1, 1) NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [TipoPeriodoAplicacion]  VARCHAR (50) NULL,
    [TipoPeriodoExcepcion]   VARCHAR (50) NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_MotivosSolicitud] PRIMARY KEY CLUSTERED ([MotivosSolicitudId] ASC)
);


GO
PRINT N'Creating [app620].[CatParametroConceptos]...';


GO
CREATE TABLE [app620].[CatParametroConceptos] (
    [ParametroConceptoId]    INT          NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_ParametroConceptos] PRIMARY KEY CLUSTERED ([ParametroConceptoId] ASC)
);


GO
PRINT N'Creating [app620].[CatPerfilEmpleados]...';


GO
CREATE TABLE [app620].[CatPerfilEmpleados] (
    [Perfil_Ident]           INT          IDENTITY (1, 1) NOT NULL,
    [NombrePerfilEmpleados]  VARCHAR (50) NOT NULL,
    [Country_Ident]          INT          NULL,
    [City_Ident]             INT          NULL,
    [Location_Ident]         INT          NULL,
    [Client_Ident]           INT          NULL,
    [Program_Ident]          INT          NULL,
    [Contract_Type_Ident]    INT          NULL,
    [ConceptoId]             INT          NULL,
    [TipoAccesoId]           INT          NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_Perfil] PRIMARY KEY CLUSTERED ([Perfil_Ident] ASC)
);


GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesos]...';


GO
CREATE TABLE [app620].[CatPerfilEmpleadosAccesos] (
    [Perfil_Ident]           INT          NOT NULL,
    [EmpleadoId]             INT          NOT NULL,
    [Nivel]                  INT          NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_RelPerfilConceptoAcceso] PRIMARY KEY CLUSTERED ([Perfil_Ident] ASC, [EmpleadoId] ASC)
);


GO
PRINT N'Creating [app620].[CatPeriodicidadNomina]...';


GO
CREATE TABLE [app620].[CatPeriodicidadNomina] (
    [PeriodicidadNominaId]   VARCHAR (5)  NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Consecutivos]           INT          NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatPeriodicidad] PRIMARY KEY CLUSTERED ([PeriodicidadNominaId] ASC)
);


GO
PRINT N'Creating [app620].[CatPeriodosNomina]...';


GO
CREATE TABLE [app620].[CatPeriodosNomina] (
    [PeriodoNominaId]        INT          IDENTITY (1, 1) NOT NULL,
    [AnioId]                 INT          NOT NULL,
    [MesId]                  INT          NOT NULL,
    [ConsecutivoId]          VARCHAR (5)  NOT NULL,
    [PeriodicidadNominaId]   VARCHAR (5)  NOT NULL,
    [TipoPeriodo]            VARCHAR (5)  NOT NULL,
    [FechaInicio]            DATETIME     NOT NULL,
    [FechaFin]               DATETIME     NOT NULL,
    [FechaCaptura]           DATETIME     NOT NULL,
    [FechaCierre]            DATETIME     NOT NULL,
    [CountryIdents]          VARCHAR (50) NULL,
    [EstatusPeriodo]         VARCHAR (15) NULL,
    [NombrePeriodo]          VARCHAR (50) NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedBy]          INT          NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatPeriodosNomina] PRIMARY KEY CLUSTERED ([PeriodoNominaId] ASC)
);


GO
PRINT N'Creating [app620].[CatRole]...';


GO
CREATE TABLE [app620].[CatRole] (
    [CatRoleId]              INT            IDENTITY (1, 1) NOT NULL,
    [Role]                   NVARCHAR (100) NOT NULL,
    [Active]                 BIT            NOT NULL,
    [CreatedBy]              INT            NOT NULL,
    [CreatedDate]            DATETIME       NOT NULL,
    [DeactivatedDate]        DATETIME       NULL,
    [DeactivatedBy]          INT            NULL,
    [LastModifiedBy]         INT            NOT NULL,
    [LastModifiedDate]       DATETIME       NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64)   NOT NULL,
    CONSTRAINT [PK_CatRole] PRIMARY KEY CLUSTERED ([CatRoleId] ASC)
);


GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosAutorizantes]...';


GO
CREATE TABLE [app620].[CatSolicitudEmpleadosAutorizantes] (
    [FolioSolicitud]              INT             NOT NULL,
    [Empleado_Ident]              INT             NOT NULL,
    [ConceptoId]                  INT             NOT NULL,
    [NivelAutorizacion]           INT             NOT NULL,
    [Autorizador_Ident]           INT             NULL,
    [Obligatorio]                 BIT             NOT NULL,
    [MontoAutorizacionAutomatica] DECIMAL (18, 2) NULL,
    [Pendiente]                   BIT             NOT NULL,
    [Autorizado]                  BIT             NOT NULL,
    [Rechazado]                   BIT             NOT NULL,
    [Cancelado]                   BIT             NOT NULL,
    [MotivoRechazo]               VARCHAR (2000)  NULL,
    [Active]                      BIT             NOT NULL,
    [CreatedBy]                   INT             NOT NULL,
    [CreatedDate]                 DATETIME        NOT NULL,
    [DeactivatedBy]               INT             NULL,
    [DeactivatedDate]             DATETIME        NULL,
    [LastModifiedBy]              INT             NOT NULL,
    [LastModifiedDate]            DATETIME        NOT NULL,
    [LastModifiedFromPCName]      VARCHAR (64)    NOT NULL,
    CONSTRAINT [PK__CatSolicitudEmpleadosAutorizantes] PRIMARY KEY CLUSTERED ([FolioSolicitud] ASC, [Empleado_Ident] ASC, [ConceptoId] ASC, [NivelAutorizacion] ASC)
);


GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosAutorizantesLog]...';


GO
CREATE TABLE [app620].[CatSolicitudEmpleadosAutorizantesLog] (
    [FolioSolicitud]              INT             NULL,
    [Empleado_Ident]              INT             NULL,
    [ConceptoId]                  INT             NULL,
    [NivelAutorizacion]           INT             NULL,
    [Autorizador_Ident]           INT             NULL,
    [Obligatorio]                 BIT             NULL,
    [MontoAutorizacionAutomatica] DECIMAL (18, 2) NULL,
    [Pendiente]                   BIT             NULL,
    [Autorizado]                  BIT             NULL,
    [Rechazado]                   BIT             NULL,
    [Cancelado]                   BIT             NULL,
    [MotivoRechazo]               VARCHAR (2000)  NULL,
    [Active]                      BIT             NULL,
    [CreatedBy]                   INT             NULL,
    [CreatedDate]                 DATETIME        NULL,
    [DeactivatedBy]               INT             NULL,
    [DeactivatedDate]             DATETIME        NULL,
    [LastModifiedBy]              INT             NULL,
    [LastModifiedDate]            DATETIME        NULL,
    [LastModifiedFromPCName]      VARCHAR (64)    NULL,
    [Operation]                   NVARCHAR (10)   NULL
);


GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosDetalle]...';


GO
CREATE TABLE [app620].[CatSolicitudEmpleadosDetalle] (
    [FolioSolicitud]         INT          NOT NULL,
    [Empleado_Ident]         INT          NOT NULL,
    [ConceptoId]             INT          NOT NULL,
    [ConceptoMotivoId]       INT          NOT NULL,
    [ResponsableId]          INT          NULL,
    [PeriodoOriginalId]      INT          NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedBy]          INT          NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK__CatSolic__1326760DBC7939F9] PRIMARY KEY CLUSTERED ([FolioSolicitud] ASC, [Empleado_Ident] ASC, [ConceptoId] ASC, [ConceptoMotivoId] ASC)
);


GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosDetalleLog]...';


GO
CREATE TABLE [app620].[CatSolicitudEmpleadosDetalleLog] (
    [FolioSolicitud]         INT           NULL,
    [Empleado_Ident]         INT           NULL,
    [ConceptoId]             INT           NULL,
    [ConceptoMotivoId]       INT           NULL,
    [ResponsableId]          INT           NULL,
    [PeriodoOriginalId]      INT           NULL,
    [Active]                 BIT           NULL,
    [CreatedBy]              INT           NULL,
    [CreatedDate]            DATETIME      NULL,
    [DeactivatedBy]          INT           NULL,
    [DeactivatedDate]        DATETIME      NULL,
    [LastModifiedBy]         INT           NULL,
    [LastModifiedDate]       DATETIME      NULL,
    [LastModifiedFromPCName] VARCHAR (64)  NULL,
    [Operation]              NVARCHAR (10) NULL
);


GO
PRINT N'Creating [app620].[CatSolicitudes]...';


GO
CREATE TABLE [app620].[CatSolicitudes] (
    [FolioSolicitud]         INT          IDENTITY (1, 1) NOT NULL,
    [Fecha_Solicitud]        DATE         NULL,
    [Perfil_Ident]           INT          NULL,
    [Solicitante_Ident]      INT          NULL,
    [PeriodoNominaId]        INT          NULL,
    [EstatusSolicitudId]     VARCHAR (5)  NOT NULL,
    [Responsable_Ident]      INT          NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_FolioSolicitud] PRIMARY KEY CLUSTERED ([FolioSolicitud] ASC)
);


GO
PRINT N'Creating [app620].[CatSolicitudesArchivos]...';


GO
CREATE TABLE [app620].[CatSolicitudesArchivos] (
    [FolioSolicitud]         INT           NOT NULL,
    [NombreArchivo]          VARCHAR (100) NOT NULL,
    [Active]                 BIT           NOT NULL,
    [CreatedBy]              INT           NOT NULL,
    [CreatedDate]            DATETIME      NOT NULL,
    [DeactivatedDate]        DATETIME      NULL,
    [DeactivatedBy]          INT           NULL,
    [LastModifiedBy]         INT           NOT NULL,
    [LastModifiedDate]       DATETIME      NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64)  NOT NULL
);


GO
PRINT N'Creating [app620].[CatTipoConceptos]...';


GO
CREATE TABLE [app620].[CatTipoConceptos] (
    [TipoConceptoId]         INT          NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TipoConceptos] PRIMARY KEY CLUSTERED ([TipoConceptoId] ASC)
);


GO
PRINT N'Creating [app620].[CatTipoDeMoneda]...';


GO
CREATE TABLE [app620].[CatTipoDeMoneda] (
    [TipoDeMonedaId]         INT           IDENTITY (1, 1) NOT NULL,
    [TipoDeMoneda]           VARCHAR (50)  NOT NULL,
    [Pais]                   INT           NOT NULL,
    [Active]                 BIT           NOT NULL,
    [DeactivatedBy]          INT           NULL,
    [DeactivationDate]       DATETIME      NULL,
    [CreatedDate]            DATETIME      NOT NULL,
    [CreatedBy]              INT           NOT NULL,
    [LastModifiedDate]       DATETIME      NOT NULL,
    [LastModifiedBy]         INT           NOT NULL,
    [LastModifiedFromPCName] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([TipoDeMonedaId] ASC)
);


GO
PRINT N'Creating [app620].[CatTiposAcceso]...';


GO
CREATE TABLE [app620].[CatTiposAcceso] (
    [TipoAccesoId]           INT          NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TiposAcceso] PRIMARY KEY CLUSTERED ([TipoAccesoId] ASC)
);


GO
PRINT N'Creating [app620].[CatTiposConsecutivo]...';


GO
CREATE TABLE [app620].[CatTiposConsecutivo] (
    [TipoConsecutivoId]      INT          NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TiposConsecutivo] PRIMARY KEY CLUSTERED ([TipoConsecutivoId] ASC)
);


GO
PRINT N'Creating [app620].[CatTiposPeriodoNomina]...';


GO
CREATE TABLE [app620].[CatTiposPeriodoNomina] (
    [TipoPeriodoId]          VARCHAR (5)  NOT NULL,
    [Descripcion]            VARCHAR (50) NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_CatTiposPeriodo] PRIMARY KEY CLUSTERED ([TipoPeriodoId] ASC)
);


GO
PRINT N'Creating [app620].[Foo]...';


GO
CREATE TABLE [app620].[Foo] (
    [i] CHAR (1) NULL
);


GO
PRINT N'Creating [app620].[Pivote]...';


GO
CREATE TABLE [app620].[Pivote] (
    [i]        INT          NOT NULL,
    [iVarChar] VARCHAR (10) NULL,
    PRIMARY KEY CLUSTERED ([i] ASC)
);


GO
PRINT N'Creating [app620].[RelPerfilEmpleadosConceptos]...';


GO
CREATE TABLE [app620].[RelPerfilEmpleadosConceptos] (
    [Perfil_Ident] INT NOT NULL,
    [ConceptoId]   INT NOT NULL,
    CONSTRAINT [PK_RelPerfilEmpleadosConceptos] PRIMARY KEY CLUSTERED ([Perfil_Ident] ASC, [ConceptoId] ASC)
);


GO
PRINT N'Creating [app620].[RelPeriodicidadPais]...';


GO
CREATE TABLE [app620].[RelPeriodicidadPais] (
    [Country_Ident]          INT          NOT NULL,
    [PeriodicidadNominaId]   VARCHAR (5)  NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_RelPeriodicidadPais] PRIMARY KEY CLUSTERED ([Country_Ident] ASC, [PeriodicidadNominaId] ASC)
);


GO
PRINT N'Creating [app620].[RelUserRole]...';


GO
CREATE TABLE [app620].[RelUserRole] (
    [RelUserRoleId]          INT          IDENTITY (1, 1) NOT NULL,
    [CatRoleId]              INT          NOT NULL,
    [UserCCMSId]             INT          NOT NULL,
    [Active]                 BIT          NOT NULL,
    [CreatedBy]              INT          NOT NULL,
    [CreatedDate]            DATETIME     NOT NULL,
    [DeactivatedDate]        DATETIME     NULL,
    [DeactivatedBy]          INT          NULL,
    [LastModifiedBy]         INT          NOT NULL,
    [LastModifiedDate]       DATETIME     NOT NULL,
    [LastModifiedFromPCName] VARCHAR (64) NOT NULL,
    CONSTRAINT [PK_RelUserRole] PRIMARY KEY CLUSTERED ([RelUserRoleId] ASC)
);


GO
PRINT N'Creating [app620].[TraComment]...';


GO
CREATE TABLE [app620].[TraComment] (
    [TraCommentId]           INT            IDENTITY (1, 1) NOT NULL,
    [FolioId]                INT            NOT NULL,
    [EmployeeId]             INT            NOT NULL,
    [ConceptoId]             INT            NOT NULL,
    [Comment]                NVARCHAR (MAX) NOT NULL,
    [Active]                 BIT            NOT NULL,
    [CreatedDate]            DATETIME       NOT NULL,
    [CreatedBy]              INT            NOT NULL,
    [LastModifiedDate]       DATETIME       NULL,
    [LastModifiedBy]         INT            NULL,
    [LastModifiedFromPCName] VARCHAR (MAX)  NULL,
    [DeactivatedBy]          INT            NULL,
    [DeactivationDate]       DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([TraCommentId] ASC)
);


GO
PRINT N'Creating [app620].[CatCompaniaXIdEmpresaVw]...';


GO






CREATE VIEW [app620].[CatCompaniaXIdEmpresaVw]
AS
SELECT
[CompañiaXIdEmpresaId], [ID_Empresa], [CIA_IDReporteo], [Compania], [ID_REP], [Active]
FROM [PeopleSoft].[dbo].[CatCompaniaXIdEmpresa]
GO
PRINT N'Creating [app620].[CatCountryVw]...';


GO
CREATE VIEW [app620].[CatCountryVw]
AS
SELECT DISTINCT Loc.country_ident, Loc.country_full_name, Loc.country_abbr_name
FROM            CCMS.XMLRPC.LocationBuildLocation AS Loc INNER JOIN
                         CCMS.dbo.TPNSR_CCMS_EmployeePlus AS CatEmp ON Loc.ident = CatEmp.Location_Ident
WHERE        (CatEmp.Current_Status = 'Active')
GO
PRINT N'Creating [app620].[CatEmployeeCCMSVw]...';


GO
/* VISTAS CAMBIOS */
CREATE VIEW app620.CatEmployeeCCMSVw
AS
SELECT        a.Ident, a.First_Name, a.Middle_Name, a.Last_Name, a.Manager_Ident, a.Manager_First_Name, a.Manager_Middle_Name, a.Manager_Last_Name, a.Current_Status, a.Hire_Date, a.Location_Ident, a.Location_Name, 
                         a.Client_Ident, a.Client_Name, a.Program_Ident, a.Program_Name, a.Phone_Ident, a.Account_ID, a.position_code_company_name, a.ETN_type, a.ETN, a.Company_Ident, a.Company_Name, a.Contract_Type, 
                         a.Contract_Type_Ident, a.Position_Code_Ident, a.Departament, a.Departament_Ident, a.Gender, a.email1, a.last_day_worked, a.Weekly_Hours, a.Tenure_Date, a.Birth_Date, a.Term_Date, a.Term_Reason_Type_Ident, 
                         a.Term_Reason_Type, a.Term_Reason_Ident, a.term_reason, a.Term_Status, a.Term_Voluntary, a.Term_Rehire, a.switch_desc, a.Last_Update, a.Position_Code_Title, a.position_code_type_full_name, b.country_ident, 
                         b.country_full_name, b.country_abbr_name, a.position_code_company_ident, CASE WHEN a.Middle_Name IS NULL OR
                         LEN(a.Middle_Name) = 0 THEN a.First_Name + ' ' + a.Last_Name ELSE a.First_Name + ' ' + isnull(a.Middle_Name, '') + ' ' + a.Last_Name END AS Nombre
FROM            CCMS.dbo.TPNSR_CCMS_EmployeePlus AS a INNER JOIN
                         CCMS.XMLRPC.LocationBuildLocation AS b ON a.Location_Ident = b.ident
WHERE        (a.Current_Status = 'Active')
GO
PRINT N'Creating [app620].[CatIdEmpresaXCCMSContractVw]...';


GO






CREATE VIEW [app620].[CatIdEmpresaXCCMSContractVw]
AS
SELECT
[IdEmpresaXCCMSContractId], [Contract_Type_Ident], [SiteId], [ID_Empresa], [CIA_IDReporteo], [Folder], [Active]
FROM [PeopleSoft].[dbo].[CatIdEmpresaXCCMSContract]
GO
PRINT N'Creating [app620].[CatLocationVw]...';


GO
CREATE VIEW [app620].[CatLocationVw]
AS
SELECT        abbr_name, addr1, addr2, city, country_abbr_name, country_full_name, country_ident, desc_status, full_name, ident AS Location_Ident, state, status, timezone, zip, latitude, longitude, fecha_ins
FROM            CCMS.XMLRPC.LocationBuildLocation
GO
PRINT N'Creating [app620].[CatProgramVw]...';


GO
CREATE VIEW [app620].[CatProgramVw]
AS
SELECT DISTINCT Program_Ident, Program_Name
FROM            app620.CatEmployeeCCMSVw AS CatPrg
WHERE        (Current_Status = 'Active')
GO
PRINT N'Creating [app620].[CatRelLocationBiosCCMSVw]...';


GO

CREATE VIEW [app620].[CatRelLocationBiosCCMSVw]
AS
SELECT        location_bios, location_ccms, city, full_name, locationname
FROM            ITAL.app012.RelLocationBiosCCMSVw
GO
PRINT N'Creating [app620].[CatCityVw]...';


GO
CREATE VIEW [app620].[CatCityVw]
AS
SELECT DISTINCT LocBios.location_bios AS Id, LocBios.locationname AS Value
FROM            app620.CatRelLocationBiosCCMSVw AS LocBios INNER JOIN
                         app620.CatEmployeeCCMSVw AS Emp ON Emp.Location_Ident = LocBios.location_ccms
WHERE        (Emp.Current_Status = 'Active')
GO
PRINT N'Creating [app620].[CatClientVw]...';


GO
CREATE VIEW [app620].[CatClientVw]
AS
SELECT DISTINCT Client_Ident, Client_Name
FROM            app620.CatEmployeeCCMSVw AS CatCli
WHERE        (Current_Status = 'Active')
GO
PRINT N'Creating [app620].[CatCompanyVw]...';


GO
CREATE VIEW [app620].[CatCompanyVw]
AS
SELECT DISTINCT Company_Ident, Company_Name
FROM            app620.CatEmployeeCCMSVw
WHERE        (Current_Status = 'Active')
GO
PRINT N'Creating [app620].[CatContractTypeVw]...';


GO
CREATE VIEW [app620].[CatContractTypeVw]
AS
SELECT DISTINCT Contract_Type_Ident, Contract_Type
FROM            app620.CatEmployeeCCMSVw
WHERE        (Current_Status = 'Active')
GO
PRINT N'Creating [dbo].[fnSplit]...';


GO
-- =============================================
-- Author:		MECUNIC
-- Description:	FUNCIÓN SPLIT 
-- =============================================
CREATE FUNCTION [dbo].[fnSplit]
(	
	@sInputList VARCHAR(8000)
  , @sDelimiter VARCHAR(8000) = ','
) RETURNS @List TABLE (item VARCHAR(8000))

BEGIN
	DECLARE @sItem VARCHAR(8000)
	WHILE CHARINDEX(@sDelimiter,@sInputList,0) <> 0
	BEGIN
		SELECT
		@sItem=RTRIM(LTRIM(SUBSTRING(@sInputList,1,CHARINDEX(@sDelimiter,@sInputList,0)-1))),
		@sInputList=RTRIM(LTRIM(SUBSTRING(@sInputList,CHARINDEX(@sDelimiter,@sInputList,0)+LEN(@sDelimiter),LEN(@sInputList))))
 
		IF LEN(@sItem) > 0
			INSERT INTO @List SELECT @sItem
		END

	IF LEN(@sInputList) > 0
		INSERT INTO @List SELECT @sInputList -- Put the last item in
	RETURN
END
GO
PRINT N'Creating [app620].[ActualizaEstatusConcepto]...';


GO
CREATE PROC [app620].[ActualizaEstatusConcepto]
	@FolioSolicitud INT
	,@Empleado_Ident INT
	,@ConceptoId INT
	,@EstatusSolicitudId VARCHAR(5)
	,@CCMS_User INT	
AS
	BEGIN
		UPDATE	[app620].[CatEmpleadosSolicitudes]
		SET		EstatusSolicitudId = @EstatusSolicitudId
				,LastModifiedBy = @CCMS_User
				,LastModifiedDate = GETDATE()
				,LastModifiedFromPCName = HOST_NAME()
		WHERE	FolioSolicitud = @FolioSolicitud
				AND Empleado_Ident = @Empleado_Ident
				AND ConceptoId = @ConceptoId

		
		UPDATE	app620.CatSolicitudEmpleadosAutorizantes
		SET		Pendiente = 0, Rechazado = 0, Cancelado = 1
		WHERE	FolioSolicitud = @FolioSolicitud 
		AND		Empleado_Ident = @Empleado_Ident 
		AND		ConceptoId = @ConceptoId
		--AND		Pendiente = 1
		AND		(Pendiente = 1 OR Rechazado = 1)

		-- CALCULA EL ESTATUS DE LA SOLICITUD Y HACE UPDATE DE SER NECESARIO
		DECLARE
			@Autorizada INT
			,@Cancelada INT
			,@PendienteAutorizacion INT
			,@Rechazada INT

		SELECT	@Rechazada = COUNT(FolioSolicitud)
		FROM	app620.CatEmpleadosSolicitudes WITH(NOLOCK)
		where	FolioSolicitud = @FolioSolicitud
				AND EstatusSolicitudId = 'R'

		SELECT	@PendienteAutorizacion = COUNT(FolioSolicitud)
		FROM	app620.CatEmpleadosSolicitudes WITH(NOLOCK)
		where	FolioSolicitud = @FolioSolicitud
				AND EstatusSolicitudId = 'PA'

		SELECT	@Autorizada = COUNT(FolioSolicitud)
		FROM	app620.CatEmpleadosSolicitudes WITH(NOLOCK)
		where	FolioSolicitud = @FolioSolicitud
				AND EstatusSolicitudId = 'A'

		SELECT	@Cancelada = COUNT(FolioSolicitud)
		FROM	app620.CatEmpleadosSolicitudes WITH(NOLOCK)
		where	FolioSolicitud = @FolioSolicitud
				AND EstatusSolicitudId = 'C'

		DECLARE 
			@NuevoEstatus VARCHAR(5)

		SET @NuevoEstatus = CASE
								WHEN @Rechazada > 0 
								THEN 'R'
								WHEN @PendienteAutorizacion > 0
								THEN 'PA'
								WHEN @Autorizada > 0
								THEN 'A'
								WHEN @Cancelada > 0
								THEN 'C'
							END

		IF (@NuevoEstatus IS NOT NULL AND @NuevoEstatus != '')
			BEGIN
				UPDATE	app620.CatSolicitudes
				SET		EstatusSolicitudId = @NuevoEstatus
						,LastModifiedBy = @CCMS_User
						,LastModifiedDate = GETDATE()
						,LastModifiedFromPCName = HOST_NAME()
				WHERE	FolioSolicitud = @FolioSolicitud

				--IF 

			END

	END
GO
PRINT N'Creating [app620].[ArchivoSolicitud]...';


GO
CREATE PROC [app620].[ArchivoSolicitud]
@Activos bit = 0
AS
	BEGIN
		DECLARE
			@PeriodoNominaId INT = 0
			,@CurrentStatus VARCHAR(10)

		SELECT	@PeriodoNominaId = PeriodoNominaId
		FROM	[app620].[CatPeriodosNomina]
		WHERE	PeriodicidadNominaId = 'C' 
				AND TipoPeriodo = 'O'
				AND convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin)
		ORDER BY CreatedDate DESC



		SELECT	EMS.Empleado_Ident EMPLEADO,
				--'0' REG,
				PS.Descripcion CONCEPTO,
				--'' ACCION,
				CASE
					WHEN C.ParametroConceptoId IN (1,2)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END UNIDAD,
				CASE
					WHEN C.ParametroConceptoId IN (3)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END IMPORTE,
				CASE
					WHEN C.ParametroConceptoId IN (4)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END PORCENTAJE
				--'' FECHA,
				--''	SEMANA,
				--''	FECHA_INI,
				--''	FECHA_FIN,
				--''	DURACION,
				--''	FOLIO,
				--''	CONSECUENCIA,
				--''	CONTROL
				--,S.*
				--,E.country_ident
				--,E.country_full_name
				--,LB.location_bios
				--,LB.city
				--,E.Location_Ident
				--,E.Location_Name
				--,E.Client_Ident
				--,E.Client_Name
				--,E.Program_Ident
				--,E.Program_Name
				--,E.Contract_Type_Ident
				--,E.Contract_Type
				--,PE.Country_Ident
				--,PE.City_Ident
				--,LB.location_ccms
		FROM	[app620].[CatSolicitudes] S
				JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
				INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
				INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
				LEFT JOIN [app620].[CatEmployeeCCMSVw] E ON E.Ident = EMS.[Empleado_Ident]
				INNER JOIN [app620].[CatLocationVw] AS b ON E.Location_Ident = b.Location_Ident
				INNER JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LB ON LB.location_ccms = E.Location_Ident
				INNER JOIN [app620].[CatPerfilEmpleados] PE ON	ISNULL(NULLIF(PE.Country_Ident, -1), b.country_ident) = b.country_ident AND 
																ISNULL(NULLIF(PE.City_Ident, -1), LB.location_bios) = LB.location_bios AND 
																ISNULL(NULLIF(PE.Location_Ident, -1), E.Location_Ident) = E.Location_Ident AND 
																ISNULL(NULLIF(PE.Client_Ident, -1), E.Client_Ident) = E.Client_Ident AND
																ISNULL(NULLIF(PE.Program_Ident, -1),E.Program_Ident) = E.Program_Ident AND
																ISNULL(NULLIF(PE.Contract_Type_Ident, -1), E.Contract_Type_Ident) = E.Contract_Type_Ident
				--INNER JOIN [app620].[CatPerfilEmpleadosAccesos] PEA ON PE.Perfil_Ident = PEA.Perfil_Ident
				INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		WHERE	
				S.EstatusSolicitudId = 'CE'
				AND EMS.EstatusSolicitudId = 'CE'
				AND PE.TipoAccesoId = 3
				AND PE.Active = 1
				--AND PEA.Active = 1
				AND PN.PeriodoNominaId = @PeriodoNominaId
				--AND PEA.EmpleadoId = @EmpleadoId
				AND E.Current_Status IN (CASE WHEN @Activos = 1 THEN 'Active'  ELSE 'Terminated' END)
				--AND E.Current_Status = 'Active'
	END
GO
PRINT N'Creating [app620].[ArchivoSolicitudActive]...';


GO
CREATE PROC [app620].[ArchivoSolicitudActive]
AS
	BEGIN
		DECLARE
			@PeriodoNominaId INT = 0
			,@CurrentStatus VARCHAR(10)

		SELECT	@PeriodoNominaId = PeriodoNominaId
		FROM	[app620].[CatPeriodosNomina]
		WHERE	PeriodicidadNominaId = 'C' 
				AND TipoPeriodo = 'O'
				AND convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin)
		ORDER BY CreatedDate DESC



		SELECT	CONVERT(VARCHAR(20),EMS.Empleado_Ident) EMPLEADO,
				--'0' REG,
				PS.Descripcion CONCEPTO,
				--'' ACCION,
				CASE
					WHEN C.ParametroConceptoId IN (1,2)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END UNIDAD,
				CASE
					WHEN C.ParametroConceptoId IN (3)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END IMPORTE,
				CASE
					WHEN C.ParametroConceptoId IN (4)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END PORCENTAJE
				--'' FECHA,
				--''	SEMANA,
				--''	FECHA_INI,
				--''	FECHA_FIN,
				--''	DURACION,
				--''	FOLIO,
				--''	CONSECUENCIA,
				--''	CONTROL
				--,S.*
				--,E.country_ident
				--,E.country_full_name
				--,LB.location_bios
				--,LB.city
				--,E.Location_Ident
				--,E.Location_Name
				--,E.Client_Ident
				--,E.Client_Name
				--,E.Program_Ident
				--,E.Program_Name
				--,E.Contract_Type_Ident
				--,E.Contract_Type
				--,PE.Country_Ident
				--,PE.City_Ident
				--,LB.location_ccms
		FROM	[app620].[CatSolicitudes] S
				JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
				INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
				INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
				LEFT JOIN [app620].[CatEmployeeCCMSVw] E ON E.Ident = EMS.[Empleado_Ident]
				INNER JOIN [app620].[CatLocationVw] AS b ON E.Location_Ident = b.Location_Ident
				INNER JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LB ON LB.location_ccms = E.Location_Ident
				INNER JOIN [app620].[CatPerfilEmpleados] PE ON	ISNULL(NULLIF(PE.Country_Ident, -1), b.country_ident) = b.country_ident AND 
																ISNULL(NULLIF(PE.City_Ident, -1), LB.location_bios) = LB.location_bios AND 
																ISNULL(NULLIF(PE.Location_Ident, -1), E.Location_Ident) = E.Location_Ident AND 
																ISNULL(NULLIF(PE.Client_Ident, -1), E.Client_Ident) = E.Client_Ident AND
																ISNULL(NULLIF(PE.Program_Ident, -1),E.Program_Ident) = E.Program_Ident AND
																ISNULL(NULLIF(PE.Contract_Type_Ident, -1), E.Contract_Type_Ident) = E.Contract_Type_Ident
				--INNER JOIN [app620].[CatPerfilEmpleadosAccesos] PEA ON PE.Perfil_Ident = PEA.Perfil_Ident
				INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		WHERE	
				S.EstatusSolicitudId = 'CE'
				AND EMS.EstatusSolicitudId = 'CE'
				AND PE.TipoAccesoId = 3
				AND PE.Active = 1
				--AND PEA.Active = 1
				AND PN.PeriodoNominaId = @PeriodoNominaId
				--AND PEA.EmpleadoId = @EmpleadoId
				--AND E.Current_Status IN (CASE WHEN @Activos = 1 THEN 'Active'  ELSE 'Terminated' END)
				AND E.Current_Status = 'Active'
	END
GO
PRINT N'Creating [app620].[AutorizacionesSolicitudEmpleado]...';


GO

CREATE PROCEDURE [app620].[AutorizacionesSolicitudEmpleado]
(
	 @FolioSolicitud INT = 0
	,@Empleado_Ident INT = 0
	,@ConceptoId INT = 0
	,@NivelAutorizacion INT = 0
	,@Autorizado BIT = 0
	,@Rechazado BIT = 0
	,@Cancelado BIT = 0
)
AS

BEGIN

	UPDATE CatSolicitudEmpleadosAutorizantes
	SET
		 [Autorizado] = @Autorizado
		,[Rechazado] = @Rechazado
		,[Cancelado] = @Cancelado
	WHERE
		 [FolioSolicitud] = @FolioSolicitud
	AND	[Empleado_Ident] = @Empleado_Ident
	AND	[ConceptoId] = @ConceptoId
	AND	[NivelAutorizacion] = @NivelAutorizacion

	--TODO: Consulta que permite calcular que se han autorizado/cancelado todos EmpleadosAutorizantes

END
GO
PRINT N'Creating [app620].[AutorizadoresxConceptoCMB]...';


GO
CREATE PROCEDURE [app620].[AutorizadoresxConceptoCMB]
(
	 @ConceptoId INT = 0
)
AS

BEGIN
	SET @ConceptoId = ISNULL(@ConceptoId, 0)

	SELECT DISTINCT 
		 PEA.EmpleadoId
		,Emp.Nombre
	FROM
		 CatPerfilEmpleadosAccesos PEA
	JOIN
		CatPerfilEmpleados PE
	ON
		PE.Perfil_Ident = PEA.Perfil_Ident
	AND
		PE.TipoAccesoId	= 2
	JOIN
		app620.RelPerfilEmpleadosConceptos REC
	ON
		REC.Perfil_Ident = PE.Perfil_Ident
	AND
		REC.ConceptoId	= ISNULL(NULLIF(@ConceptoId,0),REC.ConceptoId)
	JOIN
		CatConceptos C
	ON
		C.ConceptoId	= REC.ConceptoId
	JOIN
		[app620].[CatEmployeeCCMSVw] Emp
	ON
		Emp.Ident		= PEA.EmpleadoId
	WHERE 
		PEA.Active		= 1
	AND PE.Active		= 1
	AND C.Active		= 1
END
GO
PRINT N'Creating [app620].[AutorizadoresxEmpleadoxConceptoCMB]...';


GO
CREATE PROCEDURE [app620].[AutorizadoresxEmpleadoxConceptoCMB]
(
	  @EmpleadoIdent INT = 0
	 ,@ConceptoId INT = 0
)
AS

BEGIN
	SET @ConceptoId = ISNULL(@ConceptoId, 0)

	SELECT DISTINCT 
		 PEA.EmpleadoId Id
		,Aut.Nombre		Valor
		--, PE.ConceptoId
	FROM
		 CatPerfilEmpleadosAccesos PEA
	JOIN
		CatPerfilEmpleados PE
	ON
		PE.Perfil_Ident = PEA.Perfil_Ident
	JOIN
		app620.RelPerfilEmpleadosConceptos REC
	ON
		REC.Perfil_Ident = PE.Perfil_Ident
	AND
		REC.ConceptoId	= ISNULL(NULLIF(@ConceptoId,0),REC.ConceptoId)
	JOIN
		CatConceptos C
	ON
		C.ConceptoId	= REC.ConceptoId
	JOIN 
		[app620].[CatEmployeeCCMSVw] Aut
	ON 
		Aut.Ident		= PEA.EmpleadoId
	JOIN 	 
		[app620].[CatEmployeeCCMSVw] Emp
	ON 
		Emp.Ident		= @EmpleadoIdent
	AND	(PE.Country_Ident = Emp.Country_Ident OR PE.Country_Ident = -1)
	AND	(PE.Location_Ident = Emp.Location_Ident OR PE.Location_Ident = -1)
	AND	(PE.Client_Ident = Emp.Client_Ident OR PE.Client_Ident = -1)
	AND	(PE.Program_Ident = Emp.Program_Ident OR PE.Program_Ident = -1)
	AND (PE.Contract_Type_Ident = Emp.Contract_Type_Ident OR PE.Contract_Type_Ident = -1)
	JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
	ON (BiosCity.location_bios = PE.City_Ident  OR PE.City_Ident = -1)
	AND (BiosCity.location_ccms = Emp.Location_Ident)

	WHERE 
		PEA.Active		= 1
	AND	PE.TipoAccesoId	= 2	--El perfil es de Autorizadores
	AND PE.Active		= 1
	AND C.Active		= 1	
END
GO
PRINT N'Creating [app620].[AutorizadoresxPerfilSolicitanteCMB]...';


GO
CREATE PROCEDURE [app620].[AutorizadoresxPerfilSolicitanteCMB]
(
	 @Perfil_Ident			INT = -1
)
AS

BEGIN

	SELECT
			@Perfil_Ident			= ISNULL(@Perfil_Ident, -1)

	SELECT DISTINCT 
		   PerfEmpAccesos.EmpleadoId	Id
		 , EmpAutorizante.Nombre		Value
	FROM
		[app620].[CatPerfilEmpleados] EmpSolicita
	JOIN
		app620.RelPerfilEmpleadosConceptos REC_S
	ON
		REC_S.Perfil_Ident = EmpSolicita.Perfil_Ident
	JOIN
		[app620].[CatPerfilEmpleados] EmpAutoriza
	ON
		(EmpSolicita.Country_Ident			= EmpAutoriza.Country_Ident			OR EmpAutoriza.Country_Ident = -1)
	AND
		(EmpSolicita.City_Ident				= EmpAutoriza.City_Ident			OR EmpAutoriza.City_Ident = -1)
	--AND
	--	(EmpSolicita.Company_Ident			= EmpAutoriza.Company_Ident			OR EmpAutoriza.Company_Ident = -1)
	AND
		(EmpSolicita.Location_Ident			= EmpAutoriza.Location_Ident		OR EmpAutoriza.Location_Ident = -1)
	AND
		(EmpSolicita.Client_Ident			= EmpAutoriza.Client_Ident			OR EmpAutoriza.Client_Ident = -1)
	AND
		(EmpSolicita.Program_Ident			= EmpAutoriza.Program_Ident			OR EmpAutoriza.Program_Ident = -1)
	AND
		(EmpSolicita.Contract_Type_Ident	= EmpAutoriza.Contract_Type_Ident	OR EmpAutoriza.Contract_Type_Ident = -1)
	--AND
	--	(EmpSolicita.ConceptoId				= EmpAutoriza.ConceptoId			OR EmpAutoriza.ConceptoId IS NULL)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	JOIN
		app620.RelPerfilEmpleadosConceptos REC_A
	ON
		REC_A.Perfil_Ident = EmpAutoriza.Perfil_Ident
	AND
		REC_S.ConceptoId = REC_A.ConceptoId
	JOIN
		[app620].[CatPerfilEmpleadosAccesos] PerfEmpAccesos
	ON
		PerfEmpAccesos.Perfil_Ident = EmpAutoriza.Perfil_Ident
	JOIN
		[app620].[CatEmployeeCCMSVw] EmpAutorizante
	ON
		EmpAutorizante.Ident = PerfEmpAccesos.EmpleadoId

	WHERE
		(EmpSolicita.Perfil_Ident = @Perfil_Ident OR @Perfil_Ident = -1)
	AND
		EmpAutoriza.TipoAccesoId = 2
	AND
		EmpAutoriza.Active = 1
	--AND 
		--Emp.Position_Code_Title NOT LIKE 'agent%' 
		--Emp.Position_Code_Title NOT LIKE 'becario%'
END
GO
PRINT N'Creating [app620].[AutorizadoresxPerfilSolicitanteSel]...';


GO

CREATE PROCEDURE [app620].[AutorizadoresxPerfilSolicitanteSel]
(
	 @Perfil_Ident			INT = -1
)
AS

BEGIN

	SELECT
			@Perfil_Ident			= ISNULL(@Perfil_Ident, -1)

	SELECT DISTINCT 
		 PerfEmpAccesos.*
	FROM
		[app620].[CatPerfilEmpleados] EmpSolicita
	JOIN
		[app620].[CatPerfilEmpleados] EmpAutoriza
	ON
		(EmpSolicita.Country_Ident			= EmpAutoriza.Country_Ident			OR EmpAutoriza.Country_Ident = -1)
	AND
		(EmpSolicita.City_Ident				= EmpAutoriza.City_Ident			OR EmpAutoriza.City_Ident = -1)
	--AND
	--	(EmpSolicita.Company_Ident			= EmpAutoriza.Company_Ident			OR EmpAutoriza.Company_Ident = -1)
	AND
		(EmpSolicita.Location_Ident			= EmpAutoriza.Location_Ident		OR EmpAutoriza.Location_Ident = -1)
	AND
		(EmpSolicita.Client_Ident			= EmpAutoriza.Client_Ident			OR EmpAutoriza.Client_Ident = -1)
	AND
		(EmpSolicita.Program_Ident			= EmpAutoriza.Program_Ident			OR EmpAutoriza.Program_Ident = -1)
	AND
		(EmpSolicita.Contract_Type_Ident	= EmpAutoriza.Contract_Type_Ident	OR EmpAutoriza.Contract_Type_Ident = -1)
	AND
		(EmpSolicita.ConceptoId				= EmpAutoriza.ConceptoId			OR EmpAutoriza.ConceptoId IS NULL)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	JOIN
		[app620].[CatPerfilEmpleadosAccesos] PerfEmpAccesos
	ON
		PerfEmpAccesos.Perfil_Ident = EmpAutoriza.Perfil_Ident

	WHERE
		(EmpSolicita.Perfil_Ident = @Perfil_Ident OR @Perfil_Ident = -1)
	AND
		EmpAutoriza.TipoAccesoId = 2
	AND
		EmpAutoriza.Active = 1
	--AND 
		--Emp.Position_Code_Title NOT LIKE 'agent%' 
		--Emp.Position_Code_Title NOT LIKE 'becario%'
END
GO
PRINT N'Creating [app620].[AutorizadoresxSolicitantexEmpleadoxConceptoCMB]...';


GO

CREATE PROCEDURE [app620].[AutorizadoresxSolicitantexEmpleadoxConceptoCMB]
(
	 @SolicitanteIdent INT = 0
	,@EmpleadoIdent INT = 0
	,@ConceptoId INT = 0
	,@UserEmployeeId INT
)
AS

BEGIN
	SET @ConceptoId = ISNULL(@ConceptoId, 0)

	SELECT
		PEAA.EmpleadoId,
		EmpAut.Nombre 
	FROM
		CatPerfilEmpleadosAccesos PEAS
	
	JOIN
		CatPerfilEmpleados EmpSolicita
	ON EmpSolicita.Perfil_Ident = PEAS.Perfil_Ident
	AND (PEAS.EmpleadoId = @SolicitanteIdent OR @SolicitanteIdent = -1)
	AND EmpSolicita.Active = 1
	AND EmpSolicita.TipoAccesoId = 1	-- Perfiles de Solicitantes
	AND PEAS.Active = 1
	AND (EmpSolicita.ConceptoId = @ConceptoId OR EmpSolicita.ConceptoId = -1)

	JOIN [app620].[CatEmployeeCCMSVw] Emp
	ON (Emp.Country_Ident = EmpSolicita.Country_Ident OR EmpSolicita.Country_Ident = -1)
	AND (Emp.Location_Ident = EmpSolicita.Location_Ident OR EmpSolicita.Location_Ident = -1)
	AND (Emp.Client_Ident = EmpSolicita.Client_Ident OR EmpSolicita.Client_Ident = -1)
	AND (Emp.Program_Ident = EmpSolicita.Program_Ident OR EmpSolicita.Program_Ident = -1)
	AND (Emp.Contract_Type_Ident = EmpSolicita.Contract_Type_Ident OR EmpSolicita.Contract_Type_Ident = -1)
	AND Emp.Ident = @EmpleadoIdent


	JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
	ON (BiosCity.location_bios = EmpSolicita.City_Ident  OR EmpSolicita.City_Ident = -1)
	AND (BiosCity.location_ccms = Emp.Location_Ident)


	JOIN
		[app620].[CatPerfilEmpleados] EmpAutoriza
	ON
		(EmpSolicita.Country_Ident			= EmpAutoriza.Country_Ident			OR EmpAutoriza.Country_Ident = -1)
	AND
		(EmpSolicita.City_Ident				= EmpAutoriza.City_Ident			OR EmpAutoriza.City_Ident = -1)
	AND
		(EmpSolicita.Location_Ident			= EmpAutoriza.Location_Ident		OR EmpAutoriza.Location_Ident = -1)
	AND
		(EmpSolicita.Client_Ident			= EmpAutoriza.Client_Ident			OR EmpAutoriza.Client_Ident = -1)
	AND
		(EmpSolicita.Program_Ident			= EmpAutoriza.Program_Ident			OR EmpAutoriza.Program_Ident = -1)
	AND
		(EmpSolicita.Contract_Type_Ident	= EmpAutoriza.Contract_Type_Ident	OR EmpAutoriza.Contract_Type_Ident = -1)
	AND
		(EmpSolicita.ConceptoId				= EmpAutoriza.ConceptoId			OR EmpAutoriza.ConceptoId IS NULL)
	AND 
		(EmpAutoriza.ConceptoId				= @ConceptoId						OR EmpAutoriza.ConceptoId = -1)
	AND
		EmpAutoriza.TipoAccesoId			= 2	-- Perfiles de Autorizantes
	AND
		EmpAutoriza.Active					= 1

	JOIN [app620].[CatEmployeeCCMSVw] EmpAut
	ON (EmpAut.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	AND  (EmpAut.Location_Ident = EmpAutoriza.Location_Ident OR EmpAutoriza.Location_Ident = -1)
	AND  (EmpAut.Client_Ident = EmpAutoriza.Client_Ident OR EmpAutoriza.Client_Ident = -1)
	AND  (EmpAut.Program_Ident = EmpAutoriza.Program_Ident OR EmpAutoriza.Program_Ident = -1)
	AND  (EmpAut.Contract_Type_Ident = EmpAutoriza.Contract_Type_Ident OR EmpAutoriza.Contract_Type_Ident = -1)

	JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCityAut 
	ON (BiosCityAut.location_bios = EmpAutoriza.City_Ident  OR EmpAutoriza.City_Ident = -1)
	AND (BiosCityAut.location_ccms = EmpAut.Location_Ident)

	JOIN 
		CatPerfilEmpleadosAccesos PEAA
	ON
		PEAA.Perfil_Ident					= EmpAutoriza.Perfil_Ident
	AND
		PEAA.Active							= 1

		



	--SELECT DISTINCT 
	--	 PEA.EmpleadoId
	--	,Aut.Nombre
	--	, PE.ConceptoId
	--FROM
	--	CatPerfilEmpleados PE
	--JOIN 	 
	--	[app620].[CatEmployeeCCMSVw] Emp
	--ON 
	--	Emp.Ident		= @EmpleadoIdent
	--AND	(PE.Country_Ident = Emp.Country_Ident OR PE.Country_Ident = -1)
	--AND	(PE.Location_Ident = Emp.Location_Ident OR PE.Location_Ident = -1)
	--AND	(PE.Client_Ident = Emp.Client_Ident OR PE.Client_Ident = -1)
	--AND	(PE.Program_Ident = Emp.Program_Ident OR PE.Program_Ident = -1)
	--AND (PE.Contract_Type_Ident = Emp.Contract_Type_Ident OR PE.Contract_Type_Ident = -1)
	--JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
	--ON (BiosCity.location_bios = PE.City_Ident  OR PE.City_Ident = -1)
	--AND (BiosCity.location_ccms = Emp.Location_Ident)
	--AND TipoAccesoId = 2	--Autorizantes

	--JOIN 
	--	CatConceptos C
	--ON 
	--	(C.ConceptoId	= PE.ConceptoId OR PE.ConceptoId = -1)
	--AND 
	--	C.ConceptoId	= @ConceptoId 


	--JOIN 
	--	[app620].[CatEmployeeCCMSVw] Aut
	--ON 
	--	Aut.Ident		= PEA.EmpleadoId

	--JOIN
	--	CatPerfilEmpleadosAccesos PEA
	--ON
	--	PEA.Perfil_Ident = PE.Perfil_Ident



	--WHERE 
	--	PEA.Active		= 1
	--AND PE.Active		= 1
	--AND C.Active		= 1
END
GO
PRINT N'Creating [app620].[AutorizadorxConceptoxNivelCMB]...';


GO

CREATE PROCEDURE [app620].[AutorizadorxConceptoxNivelCMB]
(
	  @ConceptoId INT	= 0
	 ,@NivelId INT		= 0
)
AS

BEGIN
	SET @ConceptoId = ISNULL(@ConceptoId, 0)
	SET @NivelId = ISNULL(@NivelId, 0)

	SELECT
		 ISNULL(AutorizadorIdent , 0) AutorizadorIdent
		,AutorizacionObligatoria
	FROM
		CatConceptosNivelAutorizador
	WHERE 
		ConceptoId	= @ConceptoId
	AND 
		NivelId		= @NivelId
END
GO
PRINT N'Creating [app620].[AutorizantePendienteDeAutorizarSel]...';


GO
CREATE PROCEDURE app620.AutorizantePendienteDeAutorizarSel
AS
	BEGIN
		SELECT	SEA.Autorizador_Ident
		FROM	app620.CatSolicitudEmpleadosAutorizantes SEA WITH(NOLOCK)
		WHERE	SEA.Pendiente = 1
		GROUP BY SEA.Autorizador_Ident
	END
GO
PRINT N'Creating [app620].[AutorizaSolicitudEmpleado]...';


GO

CREATE PROCEDURE [app620].[AutorizaSolicitudEmpleado]
(
	 @Perfil_Ident			INT = -1
)
AS

BEGIN

	SELECT
			@Perfil_Ident			= ISNULL(@Perfil_Ident, -1)

	SELECT DISTINCT 
		 PerfEmpAccesos.*
	FROM
		[app620].[CatPerfilEmpleados] EmpSolicita
	JOIN
		[app620].[CatPerfilEmpleados] EmpAutoriza
	ON
		(EmpSolicita.Country_Ident			= EmpAutoriza.Country_Ident			OR EmpAutoriza.Country_Ident = -1)
	AND
		(EmpSolicita.City_Ident				= EmpAutoriza.City_Ident			OR EmpAutoriza.City_Ident = -1)
	--AND
	--	(EmpSolicita.Company_Ident			= EmpAutoriza.Company_Ident			OR EmpAutoriza.Company_Ident = -1)
	AND
		(EmpSolicita.Location_Ident			= EmpAutoriza.Location_Ident		OR EmpAutoriza.Location_Ident = -1)
	AND
		(EmpSolicita.Client_Ident			= EmpAutoriza.Client_Ident			OR EmpAutoriza.Client_Ident = -1)
	AND
		(EmpSolicita.Program_Ident			= EmpAutoriza.Program_Ident			OR EmpAutoriza.Program_Ident = -1)
	AND
		(EmpSolicita.Contract_Type_Ident	= EmpAutoriza.Contract_Type_Ident	OR EmpAutoriza.Contract_Type_Ident = -1)
	AND
		(EmpSolicita.ConceptoId				= EmpAutoriza.ConceptoId			OR EmpAutoriza.ConceptoId IS NULL)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	--	(EmpSolicita.Country_Ident = EmpAutoriza.Country_Ident OR EmpAutoriza.Country_Ident = -1)
	--AND
	JOIN
		[app620].[CatPerfilEmpleadosAccesos] PerfEmpAccesos
	ON
		PerfEmpAccesos.Perfil_Ident = EmpAutoriza.Perfil_Ident

	WHERE
		(EmpSolicita.Perfil_Ident = @Perfil_Ident OR @Perfil_Ident = -1)
	AND
		EmpAutoriza.TipoAccesoId = 2
	AND
		EmpAutoriza.Active = 1
	--AND 
		--Emp.Position_Code_Title NOT LIKE 'agent%' 
		--Emp.Position_Code_Title NOT LIKE 'becario%'
END
GO
PRINT N'Creating [app620].[AvisoSolicitantesAutorizantes]...';


GO

CREATE PROCEDURE [app620].[AvisoSolicitantesAutorizantes]

AS

BEGIN

	SELECT    S.FolioSolicitud
			, S.CreatedBy			Ident_Solicitante	, EmpSol.Nombre			Nombre_Solicitante	, EmpSol.email1			eMailSolicitante		, S.EstatusSolicitudId
			--, EmpSolicitud.Ident	Ident_Empleado		, EmpSolicitud.Nombre	Nombre_Empleado		, EmpSolicitud.email1	eMailEmpleado
			, SEA.Autorizador_Ident	Ident_Autorizante	, EmpAut.Nombre			Nombre_Autorizante	, EmpAut.email1			eMailAutorizante		
			, SEA.Autorizado, SEA.Rechazado, SEA.Cancelado

	INTO #SolicitantesAutorizantes
	FROM CatSolicitudes S 

	LEFT JOIN CatEmpleadosSolicitudes ES
	ON ES.FolioSolicitud = S.FolioSolicitud

	--AND	S.EstatusSolicitudId IN ('EB', 'R')
	
	JOIN [app620].[CatEmployeeCCMSVw] EmpSol
	ON EmpSol.Ident = S.CreatedBy

	JOIN [app620].[CatEmployeeCCMSVw] EmpSolicitud
	ON EmpSolicitud.Ident = ES.Empleado_Ident

	LEFT JOIN app620.CatSolicitudEmpleadosAutorizantes SEA
	ON SEA.FolioSolicitud = ES.FolioSolicitud
	AND SEA.Empleado_Ident = ES.Empleado_Ident

	LEFT JOIN [app620].[CatEmployeeCCMSVw] EmpAut
	ON EmpAut.Ident = SEA.Autorizador_Ident
	AND
		SEA.Autorizado = 0
	AND
		SEA.Rechazado = 0
	AND
		SEA.Cancelado = 0

	WHERE ES.Active = 1

	--AND	S.EstatusSolicitudId IN ('EB', 'R')
	
	SELECT	DISTINCT  FolioSolicitud
			, Ident_Solicitante			, Nombre_Solicitante		, eMailSolicitante		, EstatusSolicitudId
			--, NULL Ident_Empleado		, NULL Nombre_Empleado		, NULL eMailEmpleado
			, NULL Ident_Autorizante	, NULL Nombre_Autorizante	, NULL eMailAutorizante		
			, NULL Autorizado			, NULL Rechazado			, NULL Cancelado
	FROM	#SolicitantesAutorizantes
	WHERE
			EstatusSolicitudId IN ('EB', 'R')
	UNION
	SELECT	DISTINCT  FolioSolicitud
			, NULL Ident_Solicitante	, NULL Nombre_Solicitante	, NULL eMailSolicitante		, EstatusSolicitudId
			--, NULL Ident_Empleado		, NULL Nombre_Empleado		, NULL eMailEmpleado
			, Ident_Autorizante			, Nombre_Autorizante		, eMailAutorizante		
			, Autorizado				, Rechazado					, Cancelado
	FROM	#SolicitantesAutorizantes
	WHERE
			EstatusSolicitudId IN ('E', 'PA')
	AND
			Autorizado <> 1
	AND
			Rechazado <> 1					
	AND
			Cancelado <> 1
END
GO
PRINT N'Creating [app620].[AvisoSolicitantesManual]...';


GO

CREATE PROCEDURE [app620].[AvisoSolicitantesManual]

AS

BEGIN

DECLARE @TempTable TABLE (FolioSolicitud INT, Ident_Solicitante INT, Nombre_Solicitante VARCHAR(100), eMailSolicitante VARCHAR(100), EstatusSolicitudId VARCHAR(5), Ident_Autorizante INT,
Nombre_Autorizante VARCHAR(100), eMailAutorizante VARCHAR(100), Autorizado INT, Rechazado INT, Cancelado INT)

	INSERT INTO @TempTable
	SELECT
	 S.FolioSolicitud
			, S.CreatedBy			Ident_Solicitante	, EmpSol.Nombre			Nombre_Solicitante	, EmpSol.email1			eMailSolicitante		, S.EstatusSolicitudId
			, SEA.Autorizador_Ident	Ident_Autorizante	, EmpAut.Nombre			Nombre_Autorizante	, EmpAut.email1			eMailAutorizante		
			, SEA.Autorizado, SEA.Rechazado, SEA.Cancelado
	FROM CatSolicitudes S 

	LEFT JOIN CatEmpleadosSolicitudes ES
	ON ES.FolioSolicitud = S.FolioSolicitud
		
	JOIN [app620].[CatEmployeeCCMSVw] EmpSol
	ON EmpSol.Ident = S.CreatedBy

	JOIN [app620].[CatEmployeeCCMSVw] EmpSolicitud
	ON EmpSolicitud.Ident = ES.Empleado_Ident

	LEFT JOIN app620.CatSolicitudEmpleadosAutorizantes SEA
	ON SEA.FolioSolicitud = ES.FolioSolicitud
	AND SEA.Empleado_Ident = ES.Empleado_Ident

	LEFT JOIN [app620].[CatEmployeeCCMSVw] EmpAut
	ON EmpAut.Ident = SEA.Autorizador_Ident
	AND
		SEA.Autorizado = 0
	AND
		SEA.Rechazado = 0
	AND
		SEA.Cancelado = 0

	WHERE ES.Active = 1
	
	SELECT	DISTINCT  FolioSolicitud
			, Ident_Solicitante			, Nombre_Solicitante		, eMailSolicitante		, EstatusSolicitudId
			, NULL Ident_Autorizante	, NULL Nombre_Autorizante	, NULL eMailAutorizante		
			, NULL Autorizado			, NULL Rechazado			, NULL Cancelado
	FROM	@TempTable
	WHERE
			EstatusSolicitudId IN ('EB', 'R')
	UNION
	SELECT	DISTINCT  FolioSolicitud
			, NULL Ident_Solicitante	, NULL Nombre_Solicitante	, NULL eMailSolicitante		, EstatusSolicitudId
			, Ident_Autorizante			, Nombre_Autorizante		, eMailAutorizante		
			, Autorizado				, Rechazado					, Cancelado
	FROM	@TempTable
	WHERE
			EstatusSolicitudId IN ('E', 'PA')
	AND
			Autorizado <> 1
	AND
			Rechazado <> 1					
	AND
			Cancelado <> 1
END
GO
PRINT N'Creating [app620].[CancelaSolicitud]...';


GO

CREATE PROCEDURE [app620].[CancelaSolicitud]
	 @FolioSolicitud INT
	,@Estatus INT = 1 OUTPUT
AS
	SET XACT_ABORT ON;
	SET NOCOUNT ON;
BEGIN TRY
	DECLARE
		 @TotalconceptosAutorizados	INT = 0

	BEGIN TRAN

		SELECT	@TotalconceptosAutorizados		=	COUNT(1) 
		FROM	app620.CatEmpleadosSolicitudes
		WHERE	FolioSolicitud		= @FolioSolicitud
		AND		EstatusSolicitudId	= 'A'

		--Aun no se ha procesado ninguna solicitud
		IF (@TotalconceptosAutorizados = 0)
			BEGIN
				UPDATE	CatSolicitudes
				SET		EstatusSolicitudId	= 'C'
				WHERE	FolioSolicitud		= @FolioSolicitud

				UPDATE	CatEmpleadosSolicitudes
				SET		EstatusSolicitudId	= 'C'
				WHERE	FolioSolicitud		= @FolioSolicitud

			END
		ELSE
			BEGIN
				SET @Estatus = -1
			END

	COMMIT TRAN
END TRY
BEGIN CATCH  -- Modulo de manejo de errores
	
    DECLARE @Error_Number INT ,
        @Error_Severity INT ,
        @Error_State INT ,
        @Error_Procedure VARCHAR(1000) ,
        @Error_Line INT ,
        @Error_Message VARCHAR(8000);

    SELECT  @Error_Number = ERROR_NUMBER() ,
            @Error_Severity = ERROR_SEVERITY() ,
            @Error_State = ERROR_STATE() ,
            @Error_Procedure = ERROR_PROCEDURE() ,
            @Error_Line = ERROR_LINE() ,
            @Error_Message = ERROR_MESSAGE();

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
	
	SELECT @Estatus = -1	

	RAISERROR(@Error_Message,@Error_Severity, @Error_State);	
END CATCH;
GO
PRINT N'Creating [app620].[CargaPivote]...';


GO
----CREATE TABLE Pivote (
----   i INT,
----   iVarChar VARCHAR(10),
----   PRIMARY KEY(i)
----)
--SELECT * FROM Pivote

----CREATE TABLE Foo(
----   i CHAR(1)
----)

CREATE PROCEDURE [app620].[CargaPivote] 
	@Consecutivo INT
AS
BEGIN
	DELETE FROM app620.Foo;

	INSERT INTO app620.Foo VALUES('0')
	INSERT INTO app620.Foo VALUES('1')
	INSERT INTO app620.Foo VALUES('2')
	INSERT INTO app620.Foo VALUES('3')
	INSERT INTO app620.Foo VALUES('4')
	INSERT INTO app620.Foo VALUES('5')
	INSERT INTO app620.Foo VALUES('6')
	INSERT INTO app620.Foo VALUES('7')
	INSERT INTO app620.Foo VALUES('8')
	INSERT INTO app620.Foo VALUES('9')

	DELETE FROM app620.Pivote;
	IF (@Consecutivo > 100) 
		BEGIN
			INSERT INTO app620.Pivote
			SELECT f1.i+f2.i+f3.i, f1.i+f2.i+f3.i
			FROM app620.Foo f1, app620.Foo F2, app620.Foo f3
		END
	ELSE IF (@Consecutivo > 10) 
		BEGIN
			INSERT INTO app620.Pivote
			SELECT f1.i+f2.i, f1.i+f2.i
			FROM app620.Foo f1, app620.Foo F2
		END
	ELSE
		BEGIN
			INSERT INTO app620.Pivote
			SELECT f1.i, f1.i
			FROM app620.Foo f1
		END
END
GO
PRINT N'Creating [app620].[CatAdministradorInfoSel]...';


GO
CREATE PROC [app620].[CatAdministradorInfoSel]
	@CCMSID int
AS
BEGIN
	SELECT
	Nombre,
	ident as CCMSID,
	Location_Ident,
	Location_Name,
	Program_Ident,
	[Program_Name],
	Client_Ident,
	Client_Name,
	Contract_Type,
	Contract_Type_Ident,
	First_Name,
	Last_Name,
	Middle_Name,
	Hire_Date
	FROM [app620].[CatEmployeeCCMSVw]
	WHERE Ident = @CCMSID
END
GO
PRINT N'Creating [app620].[CatAdminSel]...';


GO
CREATE PROC [app620].[CatAdminSel]
AS
BEGIN
	SELECT
	[RelUserRoleId], 
	[CatRoleId], 
	[UserCCMSId], 
	[Active],
	b.Nombre
	FROM [app620].[RelUserRole] a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.UserCCMSId = b.Ident
END
GO
PRINT N'Creating [app620].[CatAdminSi]...';


GO

CREATE PROC [app620].[CatAdminSi]
	 @CCMSID		int = 0 -- El usuario quien esta realizando el movimiento
	,@UserCCMSID	int = 0 -- A quien le da el perfil de admin
	,@Estatus		INT = 0 OUTPUT
AS
BEGIN
	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un administrador con el mismo CCMSId
	- -2 = No existe un empleado con el CCMSId indicado
	*/

	IF EXISTS(
		SELECT	1 
		FROM	[app620].[RelUserRole]			RUS
		WHERE	RUS.UserCCMSId					= @UserCCMSID
	)
	BEGIN
		SET @Estatus = -1
	END

	IF NOT EXISTS(
		SELECT	1 
		FROM	[app620].[CatEmployeeCCMSVw]	Emp
		WHERE	Emp.Ident						= @UserCCMSID
	)
	BEGIN
		SET @Estatus = -2
	END


	IF (
		@Estatus	= 0
	)
	BEGIN
		INSERT INTO [app620].[RelUserRole] (
				UserCCMSId
			,CatRoleId
			,Active
			,CreatedBy
			,CreatedDate
			,LastModifiedBy
			,LastModifiedDate
			,LastModifiedFromPCName
		)
		VALUES (
				@UserCCMSID
			,1
			,1
			,@CCMSID
			,getdate()
			,@CCMSID
			,getdate()
			,HOST_NAME()
		)
	END
END
GO
PRINT N'Creating [app620].[CatAdminSu]...';


GO

CREATE PROC [app620].[CatAdminSu]
@CCMSID int = 0 -- El usuario quien esta realizando el movimiento
,@UserCCMSID int = 0 -- A quien le da el perfil de admin
,@Active bit
,@RelUserRoleId int = 0
AS
BEGIN
	IF EXISTS(SELECT 1 FROM [app620].[RelUserRole] WHERE UserCCMSId = @UserCCMSID)
	BEGIN
		UPDATE [app620].[RelUserRole]
		SET Active = @Active
		WHERE RelUserRoleId = @RelUserRoleId
	END
END
GO
PRINT N'Creating [app620].[CatAnioFechasCMB]...';


GO

CREATE PROC [app620].[CatAnioFechasCMB]
@AnioId int = 0
AS
BEGIN
	SELECT
		convert(varchar(10),FechaInicio,120) AS FechaInicio,
		convert(varchar(10),FechaCierre,120) AS FechaCierre
	FROM [app620].[CatAniosNomina]
	WHERE [Active] = 1
	AND AnioId = @AnioId
END
GO
PRINT N'Creating [app620].[CatAnioMesesConsecutivoCMB]...';


GO

CREATE PROC [app620].[CatAnioMesesConsecutivoCMB]
	@AnioId INT = 0
AS
BEGIN
	IF (@AnioId = 0)
		BEGIN
			SELECT DISTINCT
				 c.[MesId] As Ident
				,c.[Descripcion] As Valor
			FROM [app620].[CatMeses] c 
			WHERE c.Active = 1
		END
	ELSE
		BEGIN
			SELECT DISTINCT
				 b.[MesId] As Ident
				,c.[Descripcion] As Valor
			FROM [app620].[CatAniosNomina] a
			INNER JOIN [app620].[CatMesesNomina]	b on a.AnioId	= b.AnioId
			INNER JOIN [app620].[CatMeses]			c on b.MesId	= c.MesId
			INNER JOIN [app620].[CatConsecutivoPeriodos] d on c.MesId = d.MesId AND b.AnioId = d.AnioId 
			WHERE a.Active	= 1
			AND b.Active	= 1
			AND d.Active	= 1
			AND d.AnioId	= @AnioId
		END
END
GO
PRINT N'Creating [app620].[CatAnioMesPeriodicidadNominaCMB]...';


GO


CREATE PROC [app620].[CatAnioMesPeriodicidadNominaCMB]
@anioId INT,
@mesId VARCHAR(10)
AS
BEGIN
	SELECT DISTINCT
		 a.[PeriodicidadNominaId] AS Ident
		,a.[Descripcion] AS Valor
	FROM [app620].CatPeriodicidadNomina a
	INNER JOIN [app620].[CatConsecutivoPeriodos] b ON a.PeriodicidadNominaId = b.PeriodicidadNominaId
	WHERE a.Active = 1
		AND b.Active =1
		AND b.AnioId=@anioId
		AND b.MesId =@mesId
END
GO
PRINT N'Creating [app620].[CatAniosNominaCMB]...';


GO


CREATE PROC [app620].[CatAniosNominaCMB]
@AnioActivo INT =1
AS
BEGIN

	SET @AnioActivo = ISNULL(@AnioActivo,1)

	IF(@AnioActivo=1)
	BEGIN
		SELECT DISTINCT
			 a.[AnioId] As Ident
			,a.[AnioId] As Valor
		FROM [app620].[CatAniosNomina] a
		WHERE a.Active = 1
	END
	ELSE
		BEGIN
		SELECT DISTINCT
			 a.[AnioId] As Ident
			,a.[AnioId] As Valor
		FROM [app620].[CatAniosNomina] a
		
	END
END
GO
PRINT N'Creating [app620].[CatAniosNominaSel]...';


GO

CREATE PROC [app620].[CatAniosNominaSel]
AS
BEGIN
	SELECT
		 [AnioId]
		,[FechaInicio]
		,[FechaCierre]
		,Active
	FROM [app620].[CatAniosNomina]
END
GO
PRINT N'Creating [app620].[CatAniosNominaSi]...';


GO



CREATE PROC [app620].[CatAniosNominaSi]
	 @AnioId INT
	,@FechaInicio VARCHAR(20)
	,@FechaCierre VARCHAR(20)
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	   0 = Proceso sin error
	  -1 = Ya existe un registro con el mismo año
	*/
	
	SET @FechaActual = GETDATE();

	IF NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatAniosNomina] 
						WHERE [AnioId] = @AnioId
					)
		BEGIN
			INSERT INTO [app620].[CatAniosNomina]
			   (
					[AnioId]
				   ,[FechaInicio]
				   ,[FechaCierre]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @AnioId
					,@FechaInicio
					,@FechaCierre
					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END
	ELSE
		SET @Estatus = -1

END
GO
PRINT N'Creating [app620].[CatAniosNominaSu]...';


GO


CREATE PROCEDURE [app620].[CatAniosNominaSu]
	 @AnioId INT
	,@FechaInicio VARCHAR(20)
	,@FechaCierre VARCHAR(20)
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	  0 = Proceso sin error
	 -4 = No existe el registro de año
	*/
	
	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatAniosNomina] 
						WHERE AnioId = @AnioId
					)
		BEGIN
			UPDATE [app620].[CatAniosNomina]
			SET 
				 FechaInicio			= @FechaInicio
				,FechaCierre			= @FechaCierre
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				AnioId = @AnioId

		END
	ELSE
		SET @Estatus = -4
END
GO
PRINT N'Creating [app620].[CatAutorizacionesSel]...';


GO
CREATE PROC [app620].[CatAutorizacionesSel]
	 @FolioSolicitud INT = 0
	,@Autorizante_Ident	INT = 0
AS
BEGIN

	SET @FolioSolicitud = ISNULL(@FolioSolicitud, 0)

	DECLARE @Temp TABLE(
		 FolioSolicitud		INT NULL
		,Empleado_Ident		INT NULL
		,ConceptoId			INT NULL
		,NivelAutorizacion	INT NULL
		,Autorizador_Ident	INT NULL
	)

	--INSERT INTO @Temp
	--SELECT FolioSolicitud
	--	,Empleado_Ident	
	--	,ConceptoId		
	--	,NivelAutorizacion
	--	,Autorizador_Ident
	--FROM CatSolicitudEmpleadosAutorizantes 

	DECLARE @TempAutorizantes AS TABLE (FolioSolicitud INT,Empleado_Ident INT, ConceptoId INT, Autorizador_Ident INT,Pendiente BIT, Autorizado BIT, Rechazado BIT, Cancelado BIT)

	INSERT	INTO @TempAutorizantes(FolioSolicitud,Empleado_Ident,ConceptoId,Autorizador_Ident,Pendiente,Autorizado,Rechazado,Cancelado)
	SELECT	FolioSolicitud,Empleado_Ident,ConceptoId,Autorizador_Ident,Pendiente,Autorizado,Rechazado,Cancelado
	FROM	[app620].[CatSolicitudEmpleadosAutorizantes]
	WHERE	FolioSolicitud = @FolioSolicitud
			AND Autorizador_Ident IS NOT NULL
			AND (Pendiente = 1 OR Rechazado = 1 OR Cancelado = 1)

	SELECT
		 Sol.[FolioSolicitud]
		,Sol.Solicitante_Ident
		,EMP.Ident
		,EMP.Nombre
		,Con.ConceptoId
		,Con.Descripcion ConceptoDesc
		--,CONVERT(VARCHAR(22), ParametroConceptoMonto) + ' ' +  Par.Descripcion Monto
		,CASE WHEN Par.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
			   ELSE CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' + Par.Descripcion 
		  END AS Monto
		,CMS.MotivosSolicitudId
		,CMS.Descripcion MotivosSolicitudDesc
		,ISNULL(ConMot.ConceptoMotivoId, -1) ConceptoMotivoId
		--,ConMot.ConceptoMotivoId
		,ConMot.Descripcion ConceptoMotivoDesc
		,ISNULL(SED.ResponsableId, 0) ResponsableId
		--,SED.ResponsableId
		,EMP2.Nombre NombreResponsable
		,ISNULL(SED.PeriodoOriginalId, -1) PeriodoOriginalId
		--,SED.PeriodoOriginalId
		,ES.EstatusSolicitudId EstatusId
		,ES.Descripcion EstatusSolicitud
		,SEA.NivelAutorizacion
		,EmpSol.Active
		,SEA2.Autorizador_Ident
		,AUT.Nombre Autorizador
		,CASE
			WHEN SEA2.Autorizador_Ident = @Autorizante_Ident
			THEN 1
			ELSE 0
		END BtnAutorizarBorrar
	FROM [app620].[CatSolicitudes] Sol

	JOIN [app620].[CatEmpleadosSolicitudes] EmpSol 
		ON empSol.FolioSolicitud = sol.FolioSolicitud

	JOIN app620.CatEstatusSolicitudes ES
		ON ES.EstatusSolicitudId = EmpSol.EstatusSolicitudId

	JOIN app620.CatEmployeeCCMSVw EMP 
		ON EMP.Ident = EmpSol.[Empleado_Ident]

	JOIN [app620].[CatConceptos] Con
		ON Con.ConceptoId = EmpSol.ConceptoId

	JOIN app620.CatParametroConceptos Par
		ON Par.[ParametroConceptoId] = Con.ParametroConceptoId

    LEFT JOIN [app620].[CatMotivosSolicitud] CMS 
		ON CMS.MotivosSolicitudId = EmpSol.MotivosSolicitudId

	LEFT JOIN [app620].[CatSolicitudEmpleadosDetalle] SED
		ON SED.FolioSolicitud = Empsol.FolioSolicitud
		AND SED.[Empleado_Ident] = Empsol.[Empleado_Ident]
		AND SED.[ConceptoId] = Empsol.[ConceptoId]
		AND SED.Active = 1

	JOIN app620.CatSolicitudEmpleadosAutorizantes SEA
		ON SEA.FolioSolicitud = Empsol.FolioSolicitud
		AND SEA.[Empleado_Ident] = Empsol.[Empleado_Ident]
		AND SEA.[ConceptoId] = Empsol.[ConceptoId]
		--AND SEA.Pendiente = 1
		AND SEA.Autorizador_Ident = @Autorizante_Ident

	LEFT JOIN app620.CatEmployeeCCMSVw EMP2 
		ON EMP2.Ident = SED.ResponsableId

	LEFT JOIN [app620].[CatConceptosMotivos] ConMot
		ON ConMot.ConceptoMotivoId = SED.ConceptoMotivoId

	LEFT JOIN @TempAutorizantes SEA2 
		ON	SEA2.FolioSolicitud = Sol.FolioSolicitud 
		AND SEA2.Empleado_Ident	= EmpSol.Empleado_Ident
			AND Con.ConceptoId = SEA2.ConceptoId

	LEFT JOIN [app620].[CatEmployeeCCMSVw] AUT 
		ON	AUT.Ident = SEA2.Autorizador_Ident

		JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = EMP.country_ident
	WHERE Sol.[Active] = 1
	AND EmpSol.Active = 1
    AND Sol.FolioSolicitud = @FolioSolicitud

END
GO
PRINT N'Creating [app620].[CatCargaRapidaSd]...';


GO
CREATE PROC [app620].[CatCargaRapidaSd]
@CargaRapidaId int
AS
BEGIN
	IF EXISTS (SELECT 1 FROM [app620].[CatCargaRapida] WHERE CargaRapidaId = @CargaRapidaId)
	BEGIN
		DELETE FROM [app620].[CatCargaRapida]
		WHERE CargaRapidaId = @CargaRapidaId
	END
END
GO
PRINT N'Creating [app620].[CatCargaRapidaSel]...';


GO
CREATE PROC [app620].[CatCargaRapidaSel]
@FolioId int
AS
BEGIN
	SELECT
	[CargaRapidaId], 
	[CCMSID], 
	[ConceptoId], 
	[Parametro], 
	[Motivo], 
	[ConceptoMotivo], 
	[ResponsableIncidenteCCMSID], 
	[PeriodoOriginalDePago], 
	[PeriodoNominaActual], 
	[Estatus], 
	[FolioSolicitudId],
	[Justificacion]
	FROM [app620].[CatCargaRapida]
	WHERE Active = 1 AND FolioSolicitudId = @FolioId
END
GO
PRINT N'Creating [app620].[CatCargaRapidaSi]...';


GO
CREATE PROC [app620].[CatCargaRapidaSi]
@PeriodoNominaActual nvarchar(50),
@Estatus int,
@CCMSID int, -- CCMSID del empelado al que se le esta haciendo la solciitud
@Concepto int,
@Parametro decimal(8,2),
@Motivo int,
@ConceptoMotivo int,
@ResponsableIncidenteCCMSID int,
@PeriodoOriginalDePago nvarchar(50),
@UserCCMSID int, -- El CCMSID del usuario que esta haciendo la solicitud
@FolioId int,
@Justificacion nvarchar(500)
AS
BEGIN
	IF(@FolioId = 0)
	BEGIN
		SET @FolioId =
		(SELECT 
			CASE WHEN 
				MAX(FolioSolicitudId) IS NULL
			THEN
				1
			ELSE
				MAX(FolioSolicitudId) + 1
			END
		FROM [app620].[CatCargaRapida])
	END

	IF NOT EXISTS(SELECT 1 FROM [app620].[CatCargaRapida] WHERE [ConceptoId] = @Concepto AND CCMSID = @CCMSID AND FolioSolicitudId = @FolioId)
	BEGIN
		INSERT INTO [app620].[CatCargaRapida]
			   ([CCMSID]
			   ,[ConceptoId]
			   ,[Parametro]
			   ,[Motivo]
			   ,[ConceptoMotivo]
			   ,[ResponsableIncidenteCCMSID]
			   ,[PeriodoOriginalDePago]
			   ,[PeriodoNominaActual]
			   ,[Estatus]
			   ,[Active]
			   ,[CreatedBy]
			   ,[CreatedDate]
			   ,[LastModifiedBy]
			   ,[LastModifiedDate]
			   ,[LastModifiedFromPCName]
			   ,[FolioSolicitudId]
			   ,[Justificacion])
		 VALUES
			   (@CCMSID
			   ,@Concepto
			   ,@Parametro
			   ,@Motivo
			   ,@ConceptoMotivo
			   ,@ResponsableIncidenteCCMSID
			   ,@PeriodoOriginalDePago
			   ,@PeriodoNominaActual
			   ,@Estatus
			   ,1
			   ,@UserCCMSID
			   ,getdate()
			   ,@UserCCMSID
			   ,getdate()
			   ,HOST_NAME()
			   ,@FolioId
			   ,@Justificacion)

		SELECT @FolioId As FolioId,'Registro anexado.' As Msg
	END
	ELSE
	BEGIN
		SELECT @FolioId As FolioId, 'Ya exitse un empleado con este concepto, para esta solicitud.' As Msg
	END
END
GO
PRINT N'Creating [app620].[CatCityByCountryCMB]...';


GO
CREATE PROC [app620].[CatCityByCountryCMB]
		@Country INT = NULL
		--,@CityId INT = NULL
		--,@SiteId INT = NULL
		--,@ClientId INT = NULL
		--,@ProgramId INT = NULL
		--,@CrontactId INT = NULL
AS
BEGIN
	SET @Country = NULLIF(NULLIF(@Country,0),-1)
	--SET @CityId = NULLIF(NULLIF(@CityId,0),-1)
	--SET @SiteId = NULLIF(NULLIF(@SiteId,0),-1)
	--SET @ClientId = NULLIF(NULLIF(@ClientId,0),-1)
	--SET @ProgramId = NULLIF(NULLIF(@ProgramId,0),-1)
	--SET @CrontactId = NULLIF(NULLIF(@CrontactId,0),-1)

	--SELECT	DISTINCT LocBios.location_bios As Id, LocBios.LocationName As Value
	--FROM	[ITAL].[app012].[RelLocationBiosCCMSVw] LocBios
	--		JOIN [app620].[CatEmployeeCCMSVw] Emp ON emp.Location_Ident = LocBios.location_ccms
	--WHERE	Emp.country_ident = ISNULL(@Country,Emp.country_ident) AND
	--		Program_Ident = ISNULL(@ProgramId,Program_Ident) AND
	--		Client_Ident = ISNULL(@ClientId,Client_Ident) AND
	--		Location_Ident = ISNULL(@SiteId,Location_Ident) AND 
	--		LocBios.location_bios = ISNULL(@CityId,LocBios.location_bios) AND
	--		Contract_Type_Ident = ISNULL(@CrontactId,Contract_Type_Ident)

	SELECT DISTINCT LocBios.location_bios As Id, LocBios.LocationName As Value
	FROM [ITAL].[app012].[RelLocationBiosCCMSVw] LocBios
	JOIN [app620].[CatEmployeeCCMSVw] Emp ON emp.Location_Ident = LocBios.location_ccms
	WHERE	Emp.Country_Ident = ISNULL(@Country,Emp.country_ident)
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value	

END
GO
PRINT N'Creating [app620].[CatCityCMB]...';


GO
CREATE PROC [app620].[CatCityCMB]
AS
BEGIN

SELECT DISTINCT LocBios.location_bios As Id, LocBios.LocationName As Value
FROM [ITAL].[app012].[RelLocationBiosCCMSVw] LocBios
JOIN [app620].[CatEmployeeCCMSVw] Emp ON emp.Location_Ident = LocBios.location_ccms

	--SELECT DISTINCT
	--	 [city] As Id
	--	,[city] As Value
	--FROM [app620].[CatCityVw]
END
GO
PRINT N'Creating [app620].[CatCityTodosCMB]...';


GO
CREATE PROC [app620].[CatCityTodosCMB]
AS
BEGIN
	SELECT DISTINCT LocBios.location_bios As Id, LocBios.LocationName As Value
	FROM [ITAL].[app012].[RelLocationBiosCCMSVw] LocBios
	JOIN [app620].[CatEmployeeCCMSVw] Emp ON emp.Location_Ident = LocBios.location_ccms
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatClientBySiteCMB]...';


GO
CREATE PROC [app620].[CatClientBySiteCMB]
		@Country INT = NULL
		,@CityId INT = NULL
		,@SiteId INT = NULL
		--,@ClientId INT = NULL
		--,@ProgramId INT = NULL
		--,@CrontactId INT = NULL
AS
BEGIN
	SET @SiteId = NULLIF(NULLIF(@SiteId,0),-1)
	SET @Country = NULLIF(NULLIF(@Country,0),-1)
	SET @CityId = NULLIF(NULLIF(@CityId,0),-1)
	--SET @ClientId = NULLIF(NULLIF(@ClientId,0),-1)
	--SET @ProgramId = NULLIF(NULLIF(@ProgramId,0),-1)
	--SET @CrontactId = NULLIF(NULLIF(@CrontactId,0),-1)

	SELECT	DISTINCT
			[Client_Ident] As Id
			,[Client_Name] As Value
	FROM	app620.CatEmployeeCCMSVw Emp WITH(NOLOCK)
			JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LocBios WITH(NOLOCK) ON emp.Location_Ident = LocBios.location_ccms
	WHERE	Location_Ident = ISNULL(@SiteId,Location_Ident)
			AND Emp.country_ident = ISNULL(@Country, Emp.country_ident)
			AND LocBios.location_bios = ISNULL(@CityId,LocBios.location_bios)
			--AND Program_Ident = ISNULL(@ProgramId,Program_Ident)
			--AND Client_Ident = ISNULL(@ClientId,Client_Ident)
			--AND Contract_Type_Ident = ISNULL(@CrontactId,Contract_Type_Ident)
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatClientCMB]...';


GO

CREATE PROC [app620].[CatClientCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Client_Ident] As Id
		,[Client_Name] As Value
	FROM [app620].[CatClientVw]
END
GO
PRINT N'Creating [app620].[CatClientTodosCMB]...';


GO

CREATE PROC [app620].[CatClientTodosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Client_Ident] As Id
		,[Client_Name] As Value
	FROM [app620].[CatClientVw]
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatCompanyCMB]...';


GO
CREATE PROC [app620].[CatCompanyCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Company_Ident] As Id
		,[Company_Name] As Value
	FROM [app620].[CatCompanyVw]
END
GO
PRINT N'Creating [app620].[CatCompanyTodosCMB]...';


GO
CREATE PROC [app620].[CatCompanyTodosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Company_Ident] As Id
		,[Company_Name] As Value
	FROM [app620].[CatCompanyVw]
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatConceptosCMB]...';


GO


CREATE PROC [app620].[CatConceptosCMB]
@Perfil INT = 0
AS
BEGIN
	IF @Perfil = 0 
	BEGIN
		SELECT DISTINCT
			 [ConceptoId] As Ident
			,[Descripcion] As Valor
		FROM [app620].[CatConceptos]
		WHERE Active = 1 
	END
	ELSE
	BEGIN

		SELECT DISTINCT
			 CC.[ConceptoId] As Ident
			,CC.[Descripcion] As Valor
		FROM [app620].[CatConceptos] CC
		LEFT JOIN [app620].[CatPerfilEmpleados] CP ON CP.[ConceptoId] = CC.ConceptoId
		WHERE CC.Active = 1 AND  (@Perfil IS NULL OR CP.Perfil_Ident = @Perfil)
	END
END
GO
PRINT N'Creating [app620].[CatConceptosMotivoCMB]...';


GO


CREATE PROC [app620].[CatConceptosMotivoCMB]
AS
BEGIN
	SELECT DISTINCT
		 [ConceptoMotivoId] As Ident
		,[Descripcion] As Valor
	FROM [app620].[CatConceptosMotivos]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatConceptosMotivosSel]...';


GO

CREATE PROC [app620].[CatConceptosMotivosSel]
AS
BEGIN
	SELECT
		 [ConceptoMotivoId]
		,[Descripcion]
		,Active
	FROM [app620].[CatConceptosMotivos]
END
GO
PRINT N'Creating [app620].[CatConceptosMotivosSi]...';


GO


CREATE PROC [app620].[CatConceptosMotivosSi]
	 @Descripcion VARCHAR(50)
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatConceptosMotivos] 
						WHERE [Descripcion] = @Descripcion
					)
		BEGIN
			INSERT INTO [app620].[CatConceptosMotivos]
			   (
					[Descripcion]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @Descripcion
					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END
	ELSE
		SET @Estatus = -1

END
GO
PRINT N'Creating [app620].[CatConceptosMotivosSu]...';


GO

CREATE PROCEDURE [app620].[CatConceptosMotivosSu]
	 @ConceptoMotivoId INT
	,@Descripcion VARCHAR(50)
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatConceptosMotivos] 
						WHERE [ConceptoMotivoId] = @ConceptoMotivoId
					)
	AND NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatConceptosMotivos] 
						WHERE	ConceptoMotivoId	<> @ConceptoMotivoId 
						AND		Descripcion			= @Descripcion
					)
		BEGIN
			UPDATE [app620].[CatConceptosMotivos]
			SET 
				 [Descripcion]			= @Descripcion
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				[ConceptoMotivoId] = @ConceptoMotivoId

		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatConceptosNivelAutorizadorSi]...';


GO

CREATE PROCEDURE [app620].[CatConceptosNivelAutorizadorSi]
(
	 @ConceptoId			INT	= 0
	,@NivelId				INT	= 0
	,@AutorizadorIdent		INT	= 0
	,@UserEmployeeId		INT	= 0
	,@Estatus				INT = 0 OUTPUT
)
AS

BEGIN
	DECLARE @FechaActual DATETIME

	SET @ConceptoId = ISNULL(@ConceptoId, 0)
	SET @NivelId = ISNULL(@NivelId, 0)

	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con el mismo Autorizador para ese Concepto.
	*/
	
	IF EXISTS	(
					SELECT	
						1 
					FROM 
						CatConceptosNivelAutorizador 
					WHERE 
						ConceptoId			= @ConceptoId
					AND
						AutorizadorIdent	= @AutorizadorIdent 
				)
		SET @Estatus = @Estatus -1

	IF @Estatus = 0
		BEGIN
			IF NOT EXISTS (
				SELECT	
					1 
				FROM 
					CatConceptosNivelAutorizador 
				WHERE 
					ConceptoId	= @ConceptoId
				AND
					NivelId		= @NivelId
			)
				BEGIN
					INSERT CatConceptosNivelAutorizador
						(ConceptoId, NivelId, AutorizadorIdent, CreatedBy, LastModifiedBy, LastModifiedDate)
					VALUES	
						(@ConceptoId, @NivelId, @AutorizadorIdent, @UserEmployeeId, @UserEmployeeId, @FechaActual)
				END
			ELSE
				BEGIN
					UPDATE
						 CatConceptosNivelAutorizador
					SET  AutorizadorIdent	= @AutorizadorIdent
						,LastModifiedBy		= @UserEmployeeId
						,LastModifiedDate	= @FechaActual

					--VALUES (@AutorizadorIdent)
					WHERE 
						ConceptoId	= @ConceptoId
					AND
						NivelId		= @NivelId
				END
		END
END
GO
PRINT N'Creating [app620].[CatConceptosPaisClienteCMB]...';


GO
CREATE PROC [app620].[CatConceptosPaisClienteCMB]
@Perfil INT = 0
,@PaisId INT = NULL
,@ClienteId INT = NULL
AS
BEGIN

	SET @PaisId = NULLIF(NULLIF(@PaisId,0),-1)
	SET @ClienteId = NULLIF(NULLIF(@ClienteId,0),-1)

	IF @Perfil = 0 
		BEGIN
			SELECT -1 AS Ident, '- Todos -' AS Valor
			UNION ALL
			SELECT DISTINCT
				 [ConceptoId] As Ident
				,[Descripcion] As Valor
			FROM [app620].[CatConceptos]
			WHERE Active = 1 
				AND (@PaisId IN (SELECT item FROM fnSplit([app620].[CatConceptos].PaisId, ',')) OR @PaisId IS NULL)
				AND (ClienteId IN (ISNULL(@ClienteId,ClienteId), -1) OR @ClienteId IS NULL)
		END
	ELSE
		BEGIN

			SELECT -1 AS Ident, '- Todos -' AS Valor
			UNION ALL
			SELECT DISTINCT
				 CC.[ConceptoId] As Ident
				,CC.[Descripcion] As Valor
			FROM [app620].[CatConceptos] CC
			LEFT JOIN [app620].[CatPerfilEmpleados] CP ON CP.[ConceptoId] = CC.ConceptoId
			WHERE CC.Active = 1 AND  (@Perfil IS NULL OR CP.Perfil_Ident = @Perfil)
				AND @PaisId IN (SELECT item FROM fnSplit(CC.PaisId, ','))
				AND ClienteId IN (ISNULL(@ClienteId,ClienteId), -1)
		END
END
GO
PRINT N'Creating [app620].[CatConceptosParametroConceptosSel]...';


GO

CREATE PROC [app620].[CatConceptosParametroConceptosSel]
	 @ConceptoId INT
	 ,@EmployeeId INT 
AS
BEGIN
	DECLARE @Pais INT = (SELECT country_ident FROM [app620].[CatEmployeeCCMSVw] WHERE Ident = @EmployeeId)

	SELECT
		 Con.ConceptoId
		,Con.Descripcion DescripcionConcepto
		,Con.TipoConceptoId
		--,PC.Descripcion DescripcionParametroConcepto
		, CASE WHEN PC.ParametroConceptoId = 3 THEN TM.TipoDeMoneda
			   ELSE PC.Descripcion 
		  END AS DescripcionParametroConcepto
		,Con.NumeroNivelAutorizante NivelesAutorizacion
	FROM [app620].[CatConceptos] Con
	JOIN [app620].[CatParametroConceptos] PC
	ON PC.ParametroConceptoId = Con.ParametroConceptoId
	JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = @Pais
	WHERE Con.ConceptoId = @ConceptoId
END
GO
PRINT N'Creating [app620].[CatConceptosPeopleSoftCMB]...';


GO


create PROC [app620].[CatConceptosPeopleSoftCMB]
@TipoConceptoId INT = 0
AS
BEGIN

	SET @TipoConceptoId = ISNULL(@TipoConceptoId, 0)

		SELECT DISTINCT
			 CC.[ConceptoId] As Ident
			,CC.[Descripcion] As Valor
		FROM [app620].[CatConceptosPeopleSoft] CC
		WHERE CC.Active = 1 AND  (@TipoConceptoId = 0 OR CC.TipoConceptoId = @TipoConceptoId)
END
GO
PRINT N'Creating [app620].[CatConceptosPeopleSoftSel]...';


GO

CREATE PROC [app620].[CatConceptosPeopleSoftSel]
AS
BEGIN
	SELECT
		 [ConceptoId]
		,[Descripcion]
		,[DescripcionPeopleSoft]
		,Active
	FROM [app620].[CatConceptosPeopleSoft]
END
GO
PRINT N'Creating [app620].[CatConceptosPeopleSoftSi]...';


GO


CREATE PROC [app620].[CatConceptosPeopleSoftSi]
	 @Descripcion VARCHAR(50)
	,@DescripcionPeopleSoft VARCHAR(50)
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatConceptosPeopleSoft] 
						WHERE [Descripcion] = @Descripcion
					)
		BEGIN
			INSERT INTO [app620].[CatConceptosPeopleSoft]
			   (
					[Descripcion]
				   ,[DescripcionPeopleSoft]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @Descripcion
					,@DescripcionPeopleSoft
					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END
	ELSE
		SET @Estatus = -1

END
GO
PRINT N'Creating [app620].[CatConceptosPeopleSoftSu]...';


GO

CREATE PROCEDURE [app620].[CatConceptosPeopleSoftSu]
	 @ConceptoId INT
	,@Descripcion VARCHAR(50)
	,@DescripcionPeopleSoft VARCHAR(50)
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatConceptosPeopleSoft] 
						WHERE [ConceptoId] = @ConceptoId
					)
	AND NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatConceptosPeopleSoft] 
						WHERE	ConceptoId	<> @ConceptoId 
						AND		Descripcion			= @Descripcion
					)
		BEGIN
			UPDATE [app620].[CatConceptosPeopleSoft]
			SET 
				 [Descripcion]			= @Descripcion
				,[DescripcionPeopleSoft]=@DescripcionPeopleSoft
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual
				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				[ConceptoId] = @ConceptoId

		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatConceptosSel]...';


GO

CREATE PROC [app620].[CatConceptosSel]
AS
BEGIN
	SELECT
		 [ConceptoId]
		,[Descripcion]
		,[TipoConceptoId]
		,[PaisId]
		,CAST(PaisId as varchar) as Paises
		,[ClienteId]
		,app620.CatClientVw.Client_Name Cliente
		,[PeopleSoftId]
		,[NumeroNivelAutorizante]
		,[AutorizacionAutomatica]
		,[AutorizacionObligatoria]
		,[Vigencia]
		,ISNULL([PagosFijos], 0) PagosFijos
		--,ISNULL([app620].[CatConceptos].[PagosFijos], 0) PagosFijosNo
		,CASE
			 WHEN (ISNULL(PagosFijos, 0) = 0) THEN 1
			 WHEN (PagosFijos = 0) THEN 1
			 WHEN (PagosFijos = 1) THEN 0
			 ELSE 0
		 END AS PagosFijosNo
		,[Tope]
		,[PeriodicidadNominaId]
		,convert(nvarchar(10),FechaInicio,120) + ' 23:59:59.000' AS FechaInicio
		,convert(nvarchar(10),FechaFin,120) + ' 23:59:59.000' AS FechaFin
		--,FechaInicio
		--,FechaFin
		,[ParametroConceptoId]
		,Active
	FROM [app620].[CatConceptos]
	LEFT JOIN [app620].[CatClientVw]
		ON app620.CatClientVw.Client_Ident = CatConceptos.ClienteId
END
GO
PRINT N'Creating [app620].[CatConceptosSi]...';


GO

CREATE PROC [app620].[CatConceptosSi]
	 @Descripcion VARCHAR(50)
	,@TipoConceptoId INT
	,@PaisId VARCHAR(50)
	,@ClienteId INT
	,@PeopleSoftId INT
	,@NumeroNivelAutorizante INT = NULL
	,@AutorizacionAutomatica BIT = NULL
	,@AutorizacionObligatoria BIT = NULL
	,@Vigencia VARCHAR(50)
	,@PagosFijos BIT = NULL
	,@Tope DECIMAL(18,2)
	,@PeriodicidadNominaId VARCHAR(100) = NULL
	,@FechaInicio VARCHAR(10)
	,@FechaFin VARCHAR(10)
	,@ParametroConceptoId INT = NULL
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatConceptos] 
						WHERE [Descripcion] = @Descripcion
					)
		BEGIN
			INSERT INTO [app620].[CatConceptos]
			   (
					[Descripcion]
				   ,[TipoConceptoId]
				   ,[PaisId]
				   ,[ClienteId]
				   ,[PeopleSoftId]
				   ,[NumeroNivelAutorizante]
				   ,[AutorizacionAutomatica]
				   ,[AutorizacionObligatoria]
				   ,[Vigencia]
				   ,[PagosFijos]
				   ,[Tope]
				   ,[PeriodicidadNominaId]
				   ,[FechaInicio]
				   ,[FechaFin]
				   ,[ParametroConceptoId]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @Descripcion
					,@TipoConceptoId 
					,@PaisId
					,@ClienteId
					,@PeopleSoftId
					,@NumeroNivelAutorizante
					,@AutorizacionAutomatica
					,@AutorizacionObligatoria
					,@Vigencia
				    ,@PagosFijos
				    ,@Tope
				    ,@PeriodicidadNominaId
				    ,@FechaInicio
				    ,@FechaFin
				    ,@ParametroConceptoId
					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END
	ELSE
		SET @Estatus = -1

END
GO
PRINT N'Creating [app620].[CatConceptosSu]...';


GO

CREATE PROCEDURE [app620].[CatConceptosSu]
	 @ConceptoId INT
	,@Descripcion VARCHAR(50)
	,@TipoConceptoId INT	
	,@PaisId VARCHAR(50)
	,@ClienteId INT
	,@PeopleSoftId INT
	,@NumeroNivelAutorizante INT = NULL
	,@AutorizacionAutomatica BIT = NULL
	,@AutorizacionObligatoria BIT = NULL
	,@Vigencia VARCHAR(50)
	,@PagosFijos BIT = NULL
	,@Tope DECIMAL(18,2)
	,@PeriodicidadNominaId VARCHAR(100) = NULL
	,@FechaInicio VARCHAR(10)
	,@FechaFin VARCHAR(10)
	,@ParametroConceptoId INT = NULL
	,@Active BIT
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF (@PagosFijos = 0)
	BEGIN
		SET @Tope = NULL
		SET @PeriodicidadNominaId = NULL
		SET @FechaInicio = NULL
		SET @FechaFin = NULL
	END

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatConceptos] 
						WHERE [ConceptoId] = @ConceptoId
					)
	AND NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatConceptos] 
						WHERE	ConceptoId		<> @ConceptoId 
						AND		Descripcion		= @Descripcion
					)
		BEGIN
			UPDATE [app620].[CatConceptos]
			SET 
				 [Descripcion]			= @Descripcion
				,[TipoConceptoId]		= @TipoConceptoId
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual
				,PaisId = @PaisId 
				,ClienteId = @ClienteId 
				,PeopleSoftId = @PeopleSoftId 
				,NumeroNivelAutorizante = @NumeroNivelAutorizante 
				,AutorizacionAutomatica = @AutorizacionAutomatica 
				,AutorizacionObligatoria = @AutorizacionObligatoria 

				,Vigencia = @Vigencia
				,PagosFijos = @PagosFijos
				,Tope = @Tope
				,PeriodicidadNominaId = @PeriodicidadNominaId
				,FechaInicio = @FechaInicio
				,FechaFin = @FechaFin
				,ParametroConceptoId = @ParametroConceptoId

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				[ConceptoId] = @ConceptoId

		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatConceptosxEmpleadoCMB]...';


GO
CREATE PROCEDURE [app620].[CatConceptosxEmpleadoCMB]
(
	 @Ident			INT = -1
)
AS

BEGIN

	SELECT
			@Ident			= ISNULL(@Ident, -1)

	SELECT 
		 --DISTINCT
		 CC.ConceptoId As Ident
		,CC.Descripcion As Valor


		--,Emp.[Client_Ident] 'Emp.Client_Ident'
		--,CC.ClienteId		'CC.ClienteId'

	FROM app620.CatEmployeeCCMSVw Emp
	JOIN
		 app620.CatConceptos AS CC
	ON
		CHARINDEX(CAST(Emp.country_ident as varchar(50)), CC.PaisId) > 0
	--AND
	--	Emp.[Client_Ident] = CC.ClienteId

	JOIN app620.CatPerfilEmpleados Perfil
		ON	
			(Emp.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
		AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
		AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
		AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

		AND (CC.ClienteId				= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		AND (ISNULL(CC.ConceptoId, -1)	= Perfil.ConceptoId				OR	Perfil.ConceptoId			= -1)

	JOIN [app620].[CatRelLocationBiosCCMSVw] LocBIOS
	ON
		LocBIOS.location_ccms = Emp.Location_Ident
	AND
		(LocBIOS.location_bios			= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)

	WHERE
		Emp.Ident = @Ident
END
GO
PRINT N'Creating [app620].[CatConceptosxEmpleadoCMB2]...';


GO
CREATE PROCEDURE [app620].[CatConceptosxEmpleadoCMB2]
(
	 @Ident			INT = -1
)
AS

BEGIN

	SELECT
			@Ident			= ISNULL(@Ident, -1)

	SELECT 
		 Emp.Ident 'Emp.Ident'
		--,Perfil.Client_Ident 'Perfil.Client_Ident'
		,Perfil.NombrePerfilEmpleados 'Perfil.NombrePerfilEmpleados'
		,CC.PaisId 'CatConceptos.PaisId'
		,Emp.country_ident'Emp.country_ident'
		,Perfil.Country_Ident 'Perfil.Country_Ident'
		,CC.ClienteId 'CatConceptos.ClienteId'
		,Perfil.Client_Ident'Perfil.Client_Ident' 
		--,CC.ConceptoId 'CC.ConceptoId'
		,Perfil.ConceptoId 'Perfil.ConceptoId'
		,CC.ClienteId 'CC.ClienteId'
		,CC.ConceptoId 'CC.ConceptoId'
		,Loc.country_ident 'Loc.country_ident'
		,Emp.country_ident 'Emp.country_ident '
		,Emp.Location_Ident			'Emp.Location_Ident'
		,Perfil.Location_Ident 'Perfil.Location_Ident'
		,LocBIOS.[location_bios]	'LocBIOS.location_bios'
		,Perfil.City_Ident	'Perfil.City_Ident'
		,LocBIOS.[location_ccms]	'LocBIOS.location_ccms	'
		, Emp.Location_Ident 'Emp.Location_Ident'

		--,CatConceptos.ClienteId 'CatConceptos.ClienteId'
		--,CatConceptos.ConceptoId 'CatConceptos.ConceptoId'

		,Emp.Client_Ident 'Emp.Client_Ident'
		,Perfil.Client_Ident 'Perfil.Client_Ident'

		,Emp.Program_Ident 'Emp.Program_Ident'
		,Perfil.Program_Ident 'Perfil.Program_Ident'

		,Emp.Contract_Type_Ident 'Emp.Contract_Type_Ident'
		,Perfil.Contract_Type_Ident 'Perfil.Contract_Type_Ident'


		,CC.ClienteId 'CatConceptos.ClienteId'
		,Perfil.Client_Ident'Perfil.Client_Ident' 

		,CC.ConceptoId 'CC.ConceptoId'
		,CC.ConceptoId 'CatConceptos.ConceptoId'
		,Perfil.ConceptoId 'Perfil.ConceptoId'

		--,[app620].[CatConceptos].ClienteId 'CC.ClienteId'
		--,[app620].[CatConceptos].ConceptoId 'CC.ConceptoId'

		,Loc.country_ident 'Loc.country_ident'
		,Emp.country_ident 'Emp.country_ident '

		,Emp.Location_Ident 'Emp.Location_Ident'
		,Perfil.Location_Ident 'Perfil.Location_Ident'



		,
			 CC.[ConceptoId] As Ident
			,CC.[Descripcion] As Valor
		FROM [app620].[CatConceptos] CC





	JOIN
		app620.CatEmployeeCCMSVw Emp 
	ON
		CHARINDEX(CAST(Emp.country_ident as varchar(50)), CC.PaisId) > 0

		JOIN app620.CatLocationVw AS Loc 
			ON Emp.Location_Ident = Loc.Location_Ident 
		JOIN app620.CatPerfilEmpleados Perfil
			ON	
				(Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
			AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
			AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
			AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

			AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)


			AND CC.ConceptoId = Perfil.ConceptoId
			AND
				(CC.ClienteId				= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
			AND
				(ISNULL(CC.ConceptoId, -1)	= Perfil.ConceptoId				OR	Perfil.ConceptoId			= -1)

		JOIN app620.CatRelLocationBiosCCMSVw LocBIOS
			ON	(LocBIOS.[location_bios]	= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)
			AND	(LocBIOS.[location_ccms]	= Emp.Location_Ident)


		------JOIN [app620].[CatConceptos] CC 
		------	ON CC.ConceptoId = Perfil.ConceptoId
		------	AND
		------		(CC.ClienteId				= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		------	AND
		------		(ISNULL(CC.ConceptoId, -1)	= Perfil.ConceptoId				OR	Perfil.ConceptoId			= -1)

		--JOIN app620.CatRelLocationBiosCCMSVw LocBIOS
		--	ON	(LocBIOS.[location_bios]	= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)
		--	AND	(LocBIOS.[location_ccms]	= Loc.Location_Ident)
		------JOIN [app620].[CatConceptos] CC 
		------	ON CC.ConceptoId = Perfil.ConceptoId
		------	AND
		------		(CC.ClienteId				= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		------	AND
		------		(ISNULL(CC.ConceptoId, -1)	= Perfil.ConceptoId				OR	Perfil.ConceptoId			= -1)
	WHERE
		Emp.Ident = @Ident
	--AND
	--	CatConceptos.PaisId = Emp.country_ident

		--JOIN [app620].[CatConceptos] CC 
			--ON 
			--	[app620].[CatConceptos].ConceptoId = Perfil.ConceptoId
			--AND
	--			([app620].[CatConceptos].ClienteId				= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
	--		AND
	--			(ISNULL([app620].[CatConceptos].ConceptoId, -1)	= Perfil.ConceptoId				OR	Perfil.ConceptoId			= -1)
	--AND
		--CatConceptos.PaisId = Emp.country_ident
		--((CHARINDEX(CAST(Emp.country_ident as varchar(50)), CatConceptos.PaisId) > 0)				OR CatConceptos.PaisId = -1)
		--CatConceptos.ClienteId = Perfil.Client_Ident
	--AND
	--	Emp.Position_Code_Title NOT LIKE 'agent%' 
	--AND 
	--	Emp.Position_Code_Title NOT LIKE '%becario%'
END
GO
PRINT N'Creating [app620].[CatConceptosxEmpleadoSolicitanteCMB]...';


GO
CREATE PROCEDURE [app620].[CatConceptosxEmpleadoSolicitanteCMB]
(
	  @Ident				INT = -1
	 ,@Ident_Solicitante	INT = -1
)
AS

BEGIN
	SELECT
			@Ident			= ISNULL(@Ident, -1)


	SELECT	PE.Perfil_Ident, PE.NombrePerfilEmpleados, PE.* 
	FROM	CatPerfilEmpleados PE
	JOIN	CatPerfilEmpleadosAccesos PEA 
	ON	PEA.Perfil_Ident = PE.Perfil_Ident
	WHERE PEA.EmpleadoId = @Ident_Solicitante	-- Id Solicitante
	AND TipoAccesoId = 1						--Solicitantes


	SELECT 
		 --DISTINCT
		 CC.ConceptoId As Ident
		,CC.Descripcion As Valor


		--,Emp.[Client_Ident] 'Emp.Client_Ident'
		--,CC.ClienteId		'CC.ClienteId'

	FROM app620.CatConceptos AS CC
	JOIN
		 app620.CatEmployeeCCMSVw Emp
	ON
		CHARINDEX(CAST(Emp.country_ident as varchar(50)), CC.PaisId) > 0
	--AND
	--	Emp.[Client_Ident] = CC.ClienteId

	JOIN app620.CatPerfilEmpleados Perfil
		ON	
			(Emp.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
		AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
		AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
		AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

		AND (CC.ClienteId				= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		AND (ISNULL(CC.ConceptoId, -1)	= Perfil.ConceptoId				OR	Perfil.ConceptoId			= -1)

	JOIN [app620].[CatRelLocationBiosCCMSVw] LocBIOS
	ON
		LocBIOS.location_ccms = Emp.Location_Ident
	AND
		(LocBIOS.location_bios			= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)

	JOIN CatPerfilEmpleadosAccesos PEA							--Sección que conecta con los Perfiles asociados a permisos del solicitante
	ON	
		PEA.Perfil_Ident				= Perfil.Perfil_Ident
	AND
		PEA.EmpleadoId					= @Ident_Solicitante	-- Id Solicitante
	AND 
		Perfil.TipoAccesoId				= 1						--Tipo de acceso Solicitantes
	AND
		PEA.Active						= 1						-- Permiso activo para solicitante

	WHERE
		Emp.Ident = @Ident
END
GO
PRINT N'Creating [app620].[CatConceptosxEmpleadoxSolicitanteCMB]...';


GO
CREATE PROCEDURE [app620].[CatConceptosxEmpleadoxSolicitanteCMB]
(
	  @Ident				INT = -1
	 ,@Ident_Solicitante	INT = -1
)
AS

BEGIN
	SELECT
			@Ident			= ISNULL(@Ident, -1)

	SELECT 
		 DISTINCT CC.ConceptoId As Ident
		,CC.Descripcion As Valor

		--CC.ClienteId, Perfil.Client_Ident,
		--CC.ConceptoId, Perfil.ConceptoId,

		--'Empleado' Empleado, Emp.*, 'Perfil' Perfil, Perfil.*, 'LocBIOS' LocBIOS, LocBIOS.*, 'Perfil Accesos' PerfilAccesos, PEA.*
		--,'Conceptos' Conceptos, CC.*

	FROM	
		app620.CatEmployeeCCMSVw Emp
	JOIN 
		app620.CatPerfilEmpleados Perfil
	ON	
		(Emp.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
	AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
	AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
	AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
	AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)
	AND Emp.Ident = @Ident

	JOIN [app620].[CatRelLocationBiosCCMSVw] LocBIOS
	ON
		LocBIOS.location_ccms = Emp.Location_Ident
	AND
		(LocBIOS.location_bios			= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)

	JOIN CatPerfilEmpleadosAccesos PEA							--Sección que conecta con los Perfiles asociados a permisos del solicitante
	ON	
		PEA.Perfil_Ident				= Perfil.Perfil_Ident
	AND
		PEA.EmpleadoId					= @Ident_Solicitante	-- Id Solicitante
	AND 
		Perfil.TipoAccesoId				= 1						--Tipo de acceso Solicitantes
	AND
		PEA.Active						= 1						-- Permiso activo para solicitante
	JOIN
		app620.RelPerfilEmpleadosConceptos REC
	ON
		REC.Perfil_Ident = Perfil.Perfil_Ident
	JOIN
		 app620.CatConceptos AS CC
	--ON
	--	(Emp.country_ident IN (SELECT Ident country_ident FROM fnSplit(CC.PaisId, ',')) OR CC.PaisId = -1)
	ON
		(CHARINDEX(CAST(Emp.country_ident as varchar(50)), CC.PaisId) > 0 OR CC.PaisId = '-1')
	AND (Emp.[Client_Ident] = CC.ClienteId OR CC.ClienteId = -1)

	AND (CC.ClienteId	= Perfil.Client_Ident	OR Perfil.Client_Ident	= -1	OR CC.ClienteId = -1)
	AND (CC.ConceptoId	= REC.ConceptoId		OR REC.ConceptoId	IS NULL	OR CC.ConceptoId = -1)
	AND CC.Active = 1
END

--SELECT * FROM CatPerfilEmpleados
--SELECT * FROM CatConceptos
GO
PRINT N'Creating [app620].[CatConsecutivoPeriodicidadCMB]...';


GO
CREATE PROC [app620].[CatConsecutivoPeriodicidadCMB]
	@CatPeriodicidadNominaId nvarchar(5) = 'All'
AS
BEGIN

	SET @CatPeriodicidadNominaId = ISNULL(@CatPeriodicidadNominaId, 'All')

	SELECT DISTINCT
		 ConsecutivoId As Ident
		,ConsecutivoId AS Valor, ACTIVE
	FROM [app620].[CatConsecutivoPeriodicidad]
	WHERE
		(
				@CatPeriodicidadNominaId = 'All'
			OR
				PeriodicidadNominaId = @CatPeriodicidadNominaId
		)
	AND Active = 1

END
GO
PRINT N'Creating [app620].[CatConsecutivoPeriodicidadSel]...';


GO

CREATE PROC [app620].[CatConsecutivoPeriodicidadSel]
AS
BEGIN
	SELECT
		 [ConsecutivoId]
		,[PeriodicidadNominaId]
		,[Active]
	FROM [app620].[CatConsecutivoPeriodicidad]
END
GO
PRINT N'Creating [app620].[CatConsecutivoPeriodosSel]...';


GO

CREATE PROC [app620].[CatConsecutivoPeriodosSel]
AS
BEGIN
	SELECT
		convert(varchar(15),CP.AnioId) + convert(nvarchar(15),CP.MesId) AS Ident
		 ,CP.AnioId
		,CP.[MesId]
		,M.Descripcion DescripcionMes
		,CP.[ConsecutivoId]
		,CP.[ConsecutivoId] Consecutivo
		,CP.[PeriodicidadNominaId]
		,P.[Descripcion] DescripcionPeriodicidad
		,CP.TipoConsecutivoId
		,TC.Descripcion
		,P.Active PeriodicidadActiva
		,CP.[Active]
		,convert(nvarchar(10),CP.FechaInicio,120) as FechaInicio
		,convert(nvarchar(10),CP.FechaCierre,120) as FechaCierre
	FROM [app620].[CatConsecutivoPeriodos] CP
	JOIN [app620].[CatMeses] M
		ON CP.MesId = M.MesId
	JOIN [app620].[CatPeriodicidadNomina] P
		ON P.[PeriodicidadNominaId] = CP.[PeriodicidadNominaId]
	JOIN CatTiposConsecutivo TC
		ON TC.TipoConsecutivoId = CP.TipoConsecutivoId
END
GO
PRINT N'Creating [app620].[CatConsecutivoPeriodosSi]...';


GO



CREATE PROC [app620].[CatConsecutivoPeriodosSi]

	 @AnioId				INT
	,@MesId					INT
	,@ConsecutivoId			VARCHAR(5)
	,@PeriodicidadNominaId	VARCHAR(5)
	,@TipoConsecutivoId		INT
	,@FechaInicio			VARCHAR(15)
	,@FechaCierre			VARCHAR(15)

	,@UserEmployeeId		INT
	,@Estatus				INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	
	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con la misma clave de Año, Mes, Periodicidad y Consecutivo
	*/
	
	IF EXISTS	(
					SELECT 1 
					FROM [app620].[CatConsecutivoPeriodos] 
					WHERE AnioId				= 	 @AnioId				
					AND MesId					= 	 @MesId					
					AND ConsecutivoId			= 	 @ConsecutivoId			
					AND PeriodicidadNominaId	= 	 @PeriodicidadNominaId	
 
				)
		SET @Estatus = @Estatus -1

	IF @Estatus = 0
		BEGIN
			INSERT INTO [app620].[CatConsecutivoPeriodos]
			   (
					 AnioId						
					,MesId							
					,ConsecutivoId			
					,PeriodicidadNominaId
					,TipoConsecutivoId

					,FechaInicio			
					,FechaCierre			

				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
			   (
					 @AnioId						
					,@MesId							
					,@ConsecutivoId			
					,@PeriodicidadNominaId
					,@TipoConsecutivoId

					,@FechaInicio			
					,@FechaCierre			

					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END

END
GO
PRINT N'Creating [app620].[CatConsecutivoPeriodosSu]...';


GO

CREATE PROCEDURE [app620].[CatConsecutivoPeriodosSu]
	 @AnioId				INT
	,@MesId					INT
	,@ConsecutivoId			VARCHAR(5)
	,@PeriodicidadNominaId	VARCHAR(5)
	,@TipoConsecutivoId		INT
	,@FechaInicio			VARCHAR(15)
	,@FechaCierre			VARCHAR(15)

	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS

BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con la misma descripción
	*/
	
		UPDATE [app620].[CatConsecutivoPeriodos]
		SET 
			 TipoConsecutivoId		= @TipoConsecutivoId

			,FechaInicio			= @FechaInicio
			,FechaCierre			= @FechaCierre

			,[Active]				= @Active
			,LastModifiedBy			= @UserEmployeeId
			,LastModifiedDate		= @FechaActual

			,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
			,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
			,LastModifiedFromPCName	= HOST_NAME()
		WHERE
			AnioId					= @AnioId				
		AND MesId					= @MesId
		AND ConsecutivoId			= @ConsecutivoId
		AND PeriodicidadNominaId	= @PeriodicidadNominaId

END
GO
PRINT N'Creating [app620].[CatContractTypeByProgramCMB]...';


GO
CREATE PROC [app620].[CatContractTypeByProgramCMB]
		@Country INT = NULL
		,@CityId INT = NULL
		,@SiteId INT = NULL
		,@ClientId INT = NULL
		,@ProgramId INT = NULL		
		--,@CrontactId INT = NULL
AS
BEGIN
	SET @ProgramId = NULLIF(NULLIF(@ProgramId,0),-1)
	SET @Country = NULLIF(NULLIF(@Country,0),-1)
	SET @CityId = NULLIF(NULLIF(@CityId,0),-1)
	SET @SiteId = NULLIF(NULLIF(@SiteId,0),-1)
	SET @ClientId = NULLIF(NULLIF(@ClientId,0),-1)
	--SET @CrontactId = NULLIF(NULLIF(@CrontactId,0),-1)

	SELECT	DISTINCT
			[Contract_Type_Ident] As Id
			,[Contract_Type] As Value
	FROM	app620.CatEmployeeCCMSVw Emp WITH(NOLOCK)
			JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LocBios WITH(NOLOCK) ON emp.Location_Ident = LocBios.location_ccms
	WHERE	Program_Ident = ISNULL(@ProgramId,Program_Ident) AND
			Location_Ident = ISNULL(@SiteId,Location_Ident) AND 
			Emp.country_ident = ISNULL(@Country, Emp.country_ident) AND
			LocBios.location_bios = ISNULL(@CityId,LocBios.location_bios) AND
			Client_Ident = ISNULL(@ClientId,Client_Ident) 
			--AND Contract_Type_Ident = ISNULL(@CrontactId,Contract_Type_Ident)
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatContractTypeCMB]...';


GO
CREATE PROC [app620].[CatContractTypeCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Contract_Type_Ident] As Id
		,[Contract_Type] As Value
	FROM [app620].[CatContractTypeVw]
END
GO
PRINT N'Creating [app620].[CatContractTypeTodosCMB]...';


GO
CREATE PROC [app620].[CatContractTypeTodosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Contract_Type_Ident] As Id
		,[Contract_Type] As Value
	FROM [app620].[CatContractTypeVw]
	WHERE [Contract_Type_Ident] IS NOT NULL
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatCountryByCascadeCMB]...';


GO
CREATE PROC [app620].[CatCountryByCascadeCMB]
		@Country INT = NULL
		,@CityId INT = NULL
		,@SiteId INT = NULL
		,@ClientId INT = NULL
		,@ProgramId INT = NULL
		,@CrontactId INT = NULL
AS
BEGIN
	SET @Country = NULLIF(NULLIF(@Country,0),-1)
	SET @CityId = NULLIF(NULLIF(@CityId,0),-1)
	SET @SiteId = NULLIF(NULLIF(@SiteId,0),-1)
	SET @ClientId = NULLIF(NULLIF(@ClientId,0),-1)
	SET @ProgramId = NULLIF(NULLIF(@ProgramId,0),-1)
	SET @CrontactId = NULLIF(NULLIF(@CrontactId,0),-1)

	SELECT	DISTINCT
			[Country_Ident] As Id
			,[Country_Full_Name] As Value
	FROM	[ITAL].[app012].[RelLocationBiosCCMSVw] LocBios WITH(NOLOCK)
			JOIN [app620].[CatEmployeeCCMSVw] Emp WITH(NOLOCK) ON emp.Location_Ident = LocBios.location_ccms
	WHERE	Emp.country_ident = ISNULL(@Country,Emp.country_ident) AND
			Program_Ident = ISNULL(@ProgramId,Program_Ident) AND
			Client_Ident = ISNULL(@ClientId,Client_Ident) AND
			Location_Ident = ISNULL(@SiteId,Location_Ident) AND 
			LocBios.location_bios = ISNULL(@CityId,LocBios.location_bios) AND
			Contract_Type_Ident = ISNULL(@CrontactId,Contract_Type_Ident)
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatCountryCMB]...';


GO
CREATE PROC [app620].[CatCountryCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Country_Ident] As Id
		,[Country_Full_Name] As Value
	FROM [app620].[CatCountryVw]
END
GO
PRINT N'Creating [app620].[CatCountryTodosCMB]...';


GO
CREATE PROC [app620].[CatCountryTodosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Country_Ident] As Id
		,[Country_Full_Name] As Value
	FROM [app620].[CatCountryVw]
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatEmpleadoPuestoSel]...';


GO
CREATE PROCEDURE [app620].[CatEmpleadoPuestoSel]
(
	   @Ident				INT = -1
	  ,@Solicitante_Ident	INT = -1
)
AS

BEGIN

	SELECT
		@Ident			= ISNULL(@Ident, -1)

	IF (@Ident <> -1) 
		BEGIN
			IF EXISTS(
				SELECT DISTINCT Emp.Ident
				FROM [app620].[CatEmployeeCCMSVw] Emp
				JOIN CatPerfilEmpleados PE
				ON (PE.Country_Ident = Emp.Country_Ident OR PE.Country_Ident = -1)
				AND  (PE.Location_Ident = Emp.Location_Ident OR PE.Location_Ident = -1)
				AND  (PE.Client_Ident = Emp.Client_Ident OR PE.Client_Ident = -1)
				AND  (PE.Program_Ident = Emp.Program_Ident OR PE.Program_Ident = -1)
				AND  (PE.Contract_Type_Ident = Emp.Contract_Type_Ident OR PE.Contract_Type_Ident = -1)
				AND PE.Active = 1

				AND Emp.Current_Status = 'Active'

				JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
				ON (BiosCity.location_bios = PE.City_Ident  OR PE.City_Ident = -1)
				AND (BiosCity.location_ccms = Emp.Location_Ident)
				WHERE 
					PE.Perfil_Ident IN (
					SELECT Perfil_Ident 
					FROM CatPerfilEmpleadosAccesos 
					WHERE (EmpleadoId = @Solicitante_Ident OR @Solicitante_Ident = -1)
					AND Active = 1
				)
				AND (emp.Ident = @Ident OR @Ident = -1)
			)
				BEGIN
					SELECT
						  Emp.Ident
						, Emp.Nombre				
						, Emp.Position_Code_Ident	
						, Emp.Position_Code_Title	
						, Emp.Contract_Type_Ident		
						, Emp.Contract_Type	
						, Emp.Location_Ident
						, Emp.Location_Name
						, Emp2.Ident IdentManager
						, Emp2.Nombre NombreManager
					FROM
						app620.CatEmployeeCCMSVw AS Emp 
					LEFT JOIN
						app620.CatEmployeeCCMSVw AS Emp2
					ON 
						Emp2.Ident	= Emp.Manager_Ident
					WHERE
						Emp.Ident			= @Ident

					AND Emp.Current_Status = 'Active'
					AND Emp2.Current_Status = 'Active'

				END
			ELSE IF EXISTS (
				SELECT	Emp.Ident
				FROM	app620.CatEmployeeCCMSVw AS Emp 
				WHERE	Emp.Ident = @Ident

				AND Emp.Current_Status = 'Active'

			)
					BEGIN
						SELECT
							  -1 Ident
							, NULL Nombre				
							, NULL Position_Code_Ident	
							, NULL Position_Code_Title	
							, NULL Contract_Type_Ident		
							, NULL Contract_Type	
							, NULL Location_Ident
							, NULL Location_Name
							, NULL IdentManager
							, NULL NombreManager					
					END
			ELSE 
				BEGIN
					SELECT
						  -2 Ident
						, NULL Nombre				
						, NULL Position_Code_Ident	
						, NULL Position_Code_Title	
						, NULL Contract_Type_Ident		
						, NULL Contract_Type	
						, NULL Location_Ident
						, NULL Location_Name
						, NULL IdentManager
						, NULL NombreManager					
				END

		END
END
GO
PRINT N'Creating [app620].[CatEmpleadoPuestoSupervisorSel]...';


GO
CREATE PROCEDURE [app620].[CatEmpleadoPuestoSupervisorSel]
(
	 --,@Perfil_Ident		INT = -1
	  @Ident			INT = -1
	 --,@Activo			INT = 1
)
AS

BEGIN

	DECLARE
		  @Nombre					VARCHAR(752)
		, @Position_Code_Ident		INT
		, @Position_Code_Title		VARCHAR(150)
		, @Manager_Ident			INT
		, @Nombre_Manager			VARCHAR(752)
		, @Active 					BIT

	SELECT
			 @Ident			= ISNULL(@Ident, -1)

	--SELECT @Ident Ident

	IF (@Ident <> -1) 
		SELECT
		  @Nombre				=  Emp.Nombre				
		, @Position_Code_Ident	=  Emp.Position_Code_Ident	
		, @Position_Code_Title	=  Emp.Position_Code_Title	
		, @Manager_Ident		=  Emp.Manager_Ident		
		, @Nombre_Manager		=  Emp2.Nombre				
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
	LEFT JOIN
		app620.CatEmployeeCCMSVw AS Emp2
	ON 
		Emp2.Ident	= Emp.Manager_Ident
	WHERE
		Emp.Ident			= @Ident

		SELECT
		  @Ident						Ident				
		, @Nombre						Nombre				
		, @Position_Code_Ident			Position_Code_Ident	
		, @Position_Code_Title			Position_Code_Title	
		, ISNULL(@Manager_Ident, -1)	Manager_Ident		
		, @Nombre_Manager				Nombre_Manager				

END
GO
PRINT N'Creating [app620].[CatEmpleadoSolicitanteCMB]...';


GO
CREATE PROC app620.CatEmpleadoSolicitanteCMB
AS
BEGIN
	SELECT DISTINCT 
	a.Ident AS Id
	,a.Nombre AS Value
	FROM [app620].[CatEmployeeCCMSVw] a
	INNER JOIN [app620].[CatSolicitudes] b WITH (NOLOCK) ON a.Ident = b.Solicitante_Ident
END
GO
PRINT N'Creating [app620].[CatEmpleadosPerfilAccesoCMB]...';


GO
-- =============================================
-- Author:		Jesús De los Santos Rodríguez
-- Create date: 01-07-2019
-- Description:	SP que devuelve el listado de empleados con acceso
--              según el perfil indicado
-- =============================================
CREATE PROCEDURE [app620].[CatEmpleadosPerfilAccesoCMB]
	@Perfil_Ident INT = 0 
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		 [Ident] AS Id
		,[Nombre] AS Valor
	  FROM [app620].[CatEmployeeCCMSVw] Emp
	  JOIN CatPerfilEmpleadosAccesos PEA ON PEA.EmpleadoId = Emp.Ident
	  AND (PEA.Perfil_Ident = @Perfil_Ident OR @Perfil_Ident = 0)
	  AND PEA.Active = 1
END
GO
PRINT N'Creating [app620].[CatEmpleadosPerfilEmpleadosCMB]...';


GO

-- =============================================
-- Author:		Jesús De los Santos
-- Create date: 18-04-2019
-- Description:	SP que devuelve el listado de empleados 
--				asociados al perfil.
-- =============================================
CREATE PROCEDURE [app620].[CatEmpleadosPerfilEmpleadosCMB]
	@Perfil_Ident	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT @Perfil_Ident = ISNULL(@Perfil_Ident, -1)
	                                                                                              
	SELECT 
		  Emp.Ident AS Id
		, Emp.Nombre AS Value                                                                                                                                                                                                                                                    
	FROM [app620].[CatEmployeeCCMSVw] Emp                                    
	JOIN [CatPerfilEmpleados] Perfil
			ON	(Perfil.Perfil_Ident		= @Perfil_Ident					OR	@Perfil_Ident				= -1)

			--AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
			AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
			AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
			AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
			AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

	WHERE
		Emp.Current_Status			= 'Active'



	--WHERE	(PE.Perfil_Ident	= @Perfil_Ident		OR @Perfil_Ident = -1)
	--AND		PE.Active			= 1

		--app620.CatEmployeeCCMSVw AS Emp 
		--JOIN app620.CatLocationVw AS Loc 
		--	ON Emp.Location_Ident = Loc.Location_Ident 
		--JOIN app620.CatPerfilEmpleados Perfil
		--	ON	(Perfil.Perfil_Ident		= @Perfil_Ident					OR	@Perfil_Ident				= -1)

		--	AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
		--	AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
		--	AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		--	AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
		--	AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

			--AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)




END
GO
PRINT N'Creating [app620].[CatEmpleadosPerfilNivelAccesoSel]...';


GO
-- =============================================
-- Author:		Jesús De los Santos Rodríguez
-- Create date: 01-07-2019
-- Description:	SP que devuelve el listado de empleados con acceso
--              según el perfil indicado
-- =============================================
CREATE PROCEDURE [app620].[CatEmpleadosPerfilNivelAccesoSel]
	@Perfil_Ident INT = 0 
AS
BEGIN
	SET NOCOUNT ON;


	SELECT 
		  Perfil_Ident
		, EmpleadoId
		, Nivel 
	FROM 
		CatPerfilEmpleadosAccesos 
	WHERE 
		(Perfil_Ident = @Perfil_Ident OR @Perfil_Ident = 0)
	AND 
		Active = 1 
	AND 
		Nivel IS NOT NULL
	ORDER BY 
		Nivel
END
GO
PRINT N'Creating [app620].[CatEmpleadosSolicitudesSel]...';


GO


CREATE PROC [app620].[CatEmpleadosSolicitudesSel]
@FolioSolicitud INT = 0
AS
BEGIN
	SET @FolioSolicitud = ISNULL(@FolioSolicitud, 0)

	BEGIN
		SET @FolioSolicitud = ISNULL(@FolioSolicitud, 0)

		SELECT CES.[FolioSolicitud]
					,CES.[Empleado_Ident]
					--,CES.s
					,CAST(CSED.ConceptoMotivoId as VARCHAR(50)) AS CatConceptoMotivoId
					,CES.ParametroConceptoMonto AS ParametroConceptoMonto
					,CCM.Descripcion AS ConceptoMotivo
					--,CES.Detalle AS Detalle
					,ISNULL(CPN.NombrePeriodo, '') AS PeriodoNomina
					,CES.[Active]     
				FROM [app620].[CatEmpleadosSolicitudes] CES
				JOIN [app620].[CatSolicitudEmpleadosDetalle] CSED 
					ON CSED.FolioSolicitud = CES.FolioSolicitud 
					AND CSED.Empleado_Ident = CES.Empleado_Ident
					AND CSED.ConceptoId = CES.ConceptoId
				LEFT JOIN app620.CatPeriodosNomina CPN 
					ON CPN.PeriodoNominaId = CSED.PeriodoOriginalId
				LEFT JOIN [app620].[CatConceptosMotivos] CCM 
				ON CCM.ConceptoMotivoId = CSED.ConceptoMotivoId
				WHERE CES.[Active] = 1
				AND CSED.Active = 1
				AND (CES.FolioSolicitud = @FolioSolicitud OR @FolioSolicitud = 0)
	END
END
GO
PRINT N'Creating [app620].[CatEmpleadosSolicitudesSi]...';


GO

CREATE PROC [app620].[CatEmpleadosSolicitudesSi]
	 @FolioSolicitud INT
    ,@Empleado_Ident INT
	,@conceptoid INT
	,@ParametroConceptoMonto DECIMAL(18,2) = NULL
	,@Motivo_Ident INT = NULL
    ,@Active BIT
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	SET @Estatus = ISNULL(@Estatus, 0)

	IF EXISTS( SELECT 1 FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @FolioSolicitud AND Empleado_Ident = @Empleado_Ident AND Active <> @Active)
		SET @Estatus = @Estatus -1

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con los mismos parametros.
	*/

	IF @Estatus=0
	BEGIN
		INSERT INTO [app620].[CatEmpleadosSolicitudes]
		(
			 FolioSolicitud
			,Empleado_Ident
			--,Manager_Ident
			,ParametroConceptoMonto
			--,Detalle
			,CreatedBy
			,LastModifiedBy
		)
		VALUES
		( 
			 @FolioSolicitud
			,@Empleado_Ident
			--,@Manager_Ident
			,@ParametroConceptoMonto
			--,@Detalle
			,@UserEmployeeId
			,@UserEmployeeId
		)
	END
END
GO
PRINT N'Creating [app620].[CatEmpleadosSolicitudesSu]...';


GO

CREATE PROC [app620].[CatEmpleadosSolicitudesSu]
	   @FolioSolicitud INT
      ,@Empleado_Ident INT
      ,@ConceptoId INT
	  ,@ParametroConceptoMonto DECIMAL(18,2) = NULL
      ,@MotivosSolicitudId INT = NULL
	  ,@Active BIT	
	  ,@UserEmployeeId INT
	  ,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	SET @Estatus = ISNULL(@Estatus, 0)

	IF NOT EXISTS( SELECT 1 FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud=@FolioSolicitud AND Empleado_Ident=@Empleado_Ident)
	SET @Estatus = @Estatus -1

	IF @Estatus=0
	BEGIN
		UPDATE[app620].[CatEmpleadosSolicitudes]
		SET  ParametroConceptoMonto = ISNULL(@ParametroConceptoMonto, ParametroConceptoMonto)
			,MotivosSolicitudId		= ISNULL(@MotivosSolicitudId, MotivosSolicitudId)
			,Active					= @Active
			,LastModifiedBy			= @UserEmployeeId
			,LastModifiedDate		= @FechaActual
			,DeactivatedBy			= IIF(@Active=0,NULL,@UserEmployeeId)
			,DeactivatedDate		= IIF(@Active=0,NULL,@FechaActual)
			,LastModifiedFromPCName	= HOST_NAME()
		WHERE 
			FolioSolicitud	= @FolioSolicitud 
		AND 
			Empleado_Ident	= @Empleado_Ident
		AND
			ConceptoId		= @ConceptoId		
	END
END
GO
PRINT N'Creating [app620].[CatEmployeeCMB]...';


GO
-- =============================================
-- Author:		Jesús De los Santos Rodríguez
-- Create date: 09-04-2019
-- Description:	SP que devuelve el listado de empleados con información
--				de la empresa, departamento, genero y correo
-- =============================================
CREATE PROCEDURE [app620].[CatEmployeeCMB]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		 [Ident]
		,[Nombre]
	  FROM [app620].[CatEmployeeCCMSVw]
END
GO
PRINT N'Creating [app620].[CatEmployeeInfoSel]...';


GO
CREATE PROC [app620].[CatEmployeeInfoSel]
@CCMSID int
AS
BEGIN
	SELECT
	Nombre,
	ident as CCMSID,
	Location_Ident,
	Location_Name,
	Program_Ident,
	[Program_Name],
	Client_Ident,
	Client_Name,
	Contract_Type,
	Contract_Type_Ident,
	First_Name,
	Last_Name,
	Middle_Name,
	Hire_Date
	FROM [app620].[CatEmployeeCCMSVw]
	WHERE Ident = @CCMSID
END
GO
PRINT N'Creating [app620].[CatEmployeePerfilAccesoCMB]...';


GO
-- =============================================
-- Author:		Jesús De los Santos Rodríguez
-- Create date: 01-07-2019
-- Description:	SP que devuelve el listado de empleados con acceso
--              según el perfil indicado
-- =============================================
CREATE PROCEDURE [app620].[CatEmployeePerfilAccesoCMB]
	@Perfil_Ident INT = 0 
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		 [Ident]
		,[Nombre]
	  FROM [app620].[CatEmployeeCCMSVw] Emp
	  JOIN CatPerfilEmpleadosAccesos PEA ON PEA.EmpleadoId = Emp.Ident
	  AND (PEA.Perfil_Ident = @Perfil_Ident OR @Perfil_Ident = 0)
	  AND PEA.Active = 1
END
GO
PRINT N'Creating [app620].[CatEmployeeSel]...';


GO
-- =============================================
-- Author:		Michell Cuni
-- Create date: 09-04-2019
-- Description:	SP que devuelve el listado de empleados con información
--				de la empresa, departamento, genero y correo
-- =============================================
CREATE PROCEDURE [app620].[CatEmployeeSel]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		 [Ident]
		,[First_Name]
		,[Middle_Name]
		,[Last_Name]
		,[Location_Ident]
		,[Location_Name]
		,[Client_Ident]
		,[Client_Name]
		,[Program_Ident]
		,[Program_Name]
		,[Phone_Ident]
		,[Account_ID]
		,[position_code_company_name]
		,[Company_Ident]
		,[Company_Name]
		,[Departament]
		,[Departament_Ident]
		,[Gender]
		,[email1]
	  FROM [app620].[CatEmployeeCCMSVw]

END
GO
PRINT N'Creating [app620].[CatEstatusCMB]...';


GO
CREATE PROC app620.CatEstatusCMB
AS
BEGIN
	SELECT
	EstatusSolicitudId AS Id
	,Descripcion As Value
	FROM [app620].[CatEstatusSolicitudes]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatEstatusSolicitudSel]...';


GO

CREATE PROC [app620].[CatEstatusSolicitudSel]
	@FolioSolicitud INT = 0
AS
BEGIN
	SELECT
		 ES.EstatusSolicitudId 
		,ES.Descripcion
	FROM [app620].[CatEstatusSolicitudes] ES
	JOIN [app620].[CatSolicitudes] Sol
		ON Sol.EstatusSolicitudId = ES.EstatusSolicitudId
		AND sol.FolioSolicitud = @FolioSolicitud
END
GO
PRINT N'Creating [app620].[CatLocationByCityCMB]...';


GO
CREATE PROC [app620].[CatLocationByCityCMB]
		@Country INT = NULL,		
		@CityId INT = NULL
		--,@SiteId INT = NULL
		--,@ClientId INT = NULL
		--,@ProgramId INT = NULL
		--,@CrontactId INT = NULL
AS
BEGIN
	SET @Country = NULLIF(NULLIF(@Country,0),-1)
	SET @CityId = NULLIF(NULLIF(@CityId,0),-1)
	--SET @SiteId = NULLIF(NULLIF(@SiteId,0),-1)
	--SET @ClientId = NULLIF(NULLIF(@ClientId,0),-1)
	--SET @ProgramId = NULLIF(NULLIF(@ProgramId,0),-1)
	--SET @CrontactId = NULLIF(NULLIF(@CrontactId,0),-1)

	SELECT	DISTINCT Emp.Location_Ident As Id, 
			Emp.Location_Name As Value
	FROM	[ITAL].[app012].[RelLocationBiosCCMSVw] LocBios
			JOIN [app620].[CatEmployeeCCMSVw] Emp ON emp.Location_Ident = LocBios.location_ccms
	WHERE	LocBios.location_bios = ISNULL(@CityId,LocBios.location_bios)
			AND Emp.country_ident = ISNULL(@Country,Emp.country_ident)
			--AND Program_Ident = ISNULL(@ProgramId,Program_Ident)
			--AND Client_Ident = ISNULL(@ClientId,Client_Ident)
			--AND Location_Ident = ISNULL(@SiteId,Location_Ident)
			--AND Contract_Type_Ident = ISNULL(@CrontactId,Contract_Type_Ident)
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatLocationCMB]...';


GO
CREATE PROC [app620].[CatLocationCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Location_Ident] As Id
		,[full_name] As Value
	FROM [app620].[CatLocationVw]
END
GO
PRINT N'Creating [app620].[CatLocationTodosCMB]...';


GO
CREATE PROC [app620].[CatLocationTodosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Location_Ident] As Id
		,[full_name] As Value
	FROM [app620].[CatLocationVw]
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatLogErrorSi]...';


GO

CREATE PROCEDURE [app620].[CatLogErrorSi](
@LogErrorMessage varchar(2000),
@StackTrace varchar(2000),
@IpAddress varchar(20),  
@Browser varchar(100),
@CreatedBy int
)
AS  
BEGIN
	INSERT INTO [app620].[CatLogError]
	(LogErrorMessage, StackTrace, IpAddress, Browser, CreatedBy,[CreatedDate],[LastModifiedBy],[LastModifiedDate],[LastModifiedFromPCName])
	VALUES(@LogErrorMessage, @StackTrace, @IpAddress, @Browser, @CreatedBy, getdate(),@CreatedBy,getdate(),HOST_NAME())
END
GO
PRINT N'Creating [app620].[CatMesesCMB]...';


GO

CREATE PROC [app620].[CatMesesCMB]
	@AnioId INT = 0
AS
BEGIN
	IF (@AnioId = 0)
		BEGIN
			SELECT DISTINCT
				 c.[MesId] As Ident
				,c.[Descripcion] As Valor
			FROM [app620].[CatMeses] c 
			WHERE c.Active = 1
		END
	ELSE
		BEGIN
			SELECT DISTINCT
				 b.[MesId] As Ident
				,c.[Descripcion] As Valor
			FROM [app620].[CatAniosNomina] a
			INNER JOIN [app620].[CatMesesNomina]	b on a.AnioId	= b.AnioId
			INNER JOIN [app620].[CatMeses]			c on b.MesId	= c.MesId
			WHERE a.Active	= 1
			AND b.Active	= 1
			AND b.AnioId	= @AnioId
		END
END
GO
PRINT N'Creating [app620].[CatMesesFechasCMB]...';


GO

CREATE PROC [app620].[CatMesesFechasCMB]
@MesId int,
@AnioId int
AS
BEGIN
	SELECT
		convert(varchar(10),FechaInicio,120) AS FechaInicio,
		convert(varchar(10),FechaCierre,120) AS FechaCierre
	FROM [app620].[CatMesesNomina]
	WHERE [Active] = 1
	AND MesId = @MesId
	AND AnioId = @AnioId
END
GO
PRINT N'Creating [app620].[CatMesesNominaSel]...';


GO

CREATE PROC [app620].[CatMesesNominaSel]
AS
BEGIN
	SELECT
		 CONVERT(VARCHAR(4),mn.[AnioId])+CONVERT(VARCHAR(2),mn.[MesId]) AnioMesId
		,mn.[AnioId]
		,mn.AnioId Anio
		,an.Active ActiveAnio
		,CONVERT(VARCHAR(10),  an.[FechaInicio], 120) FechaInicioAnio
		,CONVERT(VARCHAR(10),  an.[FechaCierre], 120) FechaCierreAnio
		,mn.[MesId]
		,mm.Descripcion DescripcionMes
		,convert(nvarchar(10),mn.[FechaInicio],120) as FechaInicio
		,convert(nvarchar(10),mn.[FechaCierre],120) as FechaCierre
		,mn.Active
	FROM [app620].[CatMesesNomina] mn
	JOIN [app620].[CatAniosNomina] an
	ON an.AnioId = mn.AnioId
	JOIN app620.CatMeses mm
	ON mm.MesId = mn.MesId
END
GO
PRINT N'Creating [app620].[CatMesesNominaSi]...';


GO

CREATE PROC [app620].[CatMesesNominaSi]
	 @AnioId INT
	,@MesId INT
	,@FechaInicio VARCHAR(20)
	,@FechaCierre VARCHAR(20)
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	   0 = Proceso sin error
	  -1 = Ya existe un registro con el mismo año y mes
	*/
	
	SET @FechaActual = GETDATE();

	IF NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatMesesNomina] 
						WHERE	[AnioId] = @AnioId
						AND		[MesId] = @MesId
					)
		BEGIN
			INSERT INTO [app620].[CatMesesNomina]
			   (
					[AnioId]
				   ,[MesId]
				   ,[FechaInicio]
				   ,[FechaCierre]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @AnioId
					,@MesId
					,@FechaInicio
					,@FechaCierre
					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END
	ELSE
		SET @Estatus = -1

END
GO
PRINT N'Creating [app620].[CatMesesNominaSu]...';


GO


CREATE PROCEDURE [app620].[CatMesesNominaSu]
	 @AnioId INT
	,@MesId INT
	,@FechaInicio VARCHAR(20)
	,@FechaCierre VARCHAR(20)
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	  0 = Proceso sin error
	 -4 = No existe el registro de año y mes
	*/
	
	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatMesesNomina] 
						WHERE	AnioId = @AnioId
						AND		MesId = @MesId
					)
		BEGIN
			UPDATE [app620].[CatMesesNomina]
			SET 
				 FechaInicio			= @FechaInicio
				,FechaCierre			= @FechaCierre
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				AnioId = @AnioId
			AND	MesId = @MesId

		END
	ELSE
		SET @Estatus = -4
END
GO
PRINT N'Creating [app620].[CatMisAutorizacionesSel]...';


GO
CREATE PROC [app620].[CatMisAutorizacionesSel]
	@Autorizante_Ident INT = 0
AS
BEGIN

	SET @Autorizante_Ident = ISNULL(@Autorizante_Ident, 0)

	SELECT DISTINCT --* 
		S.FolioSolicitud, S.Solicitante_Ident, S.[Fecha_Solicitud], S.EstatusSolicitudId, ES.Descripcion EstatusSolicitud, '' Justificacion
		,SEA.Autorizador_Ident
	FROM CatSolicitudes S
	JOIN [app620].[CatEstatusSolicitudes] ES
		ON ES.[EstatusSolicitudId] = S.[EstatusSolicitudId]
	JOIN [app620].[CatEmpleadosSolicitudes] CES
		ON CES.FolioSolicitud = S.FolioSolicitud
	JOIN [app620].[CatSolicitudEmpleadosAutorizantes] SEA
		ON SEA.FolioSolicitud = CES.FolioSolicitud
		AND SEA.Empleado_Ident = CES.Empleado_Ident
		AND SEA.conceptoId = CES.ConceptoId
	WHERE
		SEA.Autorizador_Ident = @Autorizante_Ident
--	AND 
--		SEA.Pendiente = 1
	AND
		S.EstatusSolicitudId NOT IN ('EB')
--		S.EstatusSolicitudId IN ('E', 'PA', 'R')

ORDER BY 1 DESC
END
GO
PRINT N'Creating [app620].[CatMisResponsabilidadesSel]...';


GO


CREATE PROC [app620].[CatMisResponsabilidadesSel]
	@Responsable_Ident INT = 0
AS
BEGIN

	SET @Responsable_Ident = ISNULL(@Responsable_Ident, 0)

	SELECT		DISTINCT
				S.FolioSolicitud, S.Solicitante_Ident, S.Fecha_Solicitud, S.EstatusSolicitudId, ES.Descripcion AS EstatusSolicitud, '' AS Justificacion
	FROM            app620.CatPerfilEmpleados AS PER INNER JOIN
							 app620.CatPerfilEmpleadosAccesos AS PEAccR ON PEAccR.Perfil_Ident = PER.Perfil_Ident AND PER.Active = 1 AND PER.TipoAccesoId = '3' AND PEAccR.EmpleadoId = @Responsable_Ident 
							 INNER JOIN
							 app620.CatPerfilEmpleados AS PES ON (PES.Country_Ident = PER.Country_Ident OR
							 PER.Country_Ident = - 1) AND (PES.Location_Ident = PER.Location_Ident OR
							 PER.Location_Ident = - 1) AND (PES.Client_Ident = PER.Client_Ident OR
							 PER.Client_Ident = - 1) AND (PES.Program_Ident = PER.Program_Ident OR
							 PER.Program_Ident = - 1) AND (PES.Contract_Type_Ident = PER.Contract_Type_Ident OR
							 PER.Contract_Type_Ident = - 1) AND PES.Active = 1 AND PES.TipoAccesoId = 1 INNER JOIN
							 app620.CatPerfilEmpleadosAccesos AS PEAccS ON PEAccS.Perfil_Ident = PES.Perfil_Ident INNER JOIN
							 app620.CatSolicitudes AS S ON S.Solicitante_Ident = PEAccS.EmpleadoId INNER JOIN
							 app620.CatEstatusSolicitudes AS ES ON ES.EstatusSolicitudId = S.EstatusSolicitudId
							 
							JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
							ON (BiosCity.location_bios = PER.City_Ident OR PER.City_Ident = -1)
							AND (BiosCity.location_ccms = PER.Location_Ident OR PER.Location_Ident = -1)

	WHERE        (ES.EstatusSolicitudId IN ('CE','C', 'R', 'EB', 'A', 'PA')) AND (PEAccR.EmpleadoId = @Responsable_Ident OR @Responsable_Ident = 0) 
	ORDER BY
		S.FolioSolicitud DESC

	--SELECT --* 
	--	S.FolioSolicitud, S.Solicitante_Ident, S.[Fecha_Solicitud], S.EstatusSolicitudId, ES.Descripcion EstatusSolicitud, '' Justificacion
	--FROM 
	--	app620.CatPerfilEmpleados PER

	---- Union con Perfiles de Responsables
	--JOIN
	--	app620.CatPerfilEmpleadosAccesos PEAccR
	--ON	PEAccR.Perfil_Ident		= PER.Perfil_Ident
	--AND	PER.Active				= 1
	--AND PER.TipoAccesoId		= '3'
	--AND PEAccR.EmpleadoId		= @Responsable_Ident

	---- Unión con Perfil de Solicitantes
	--JOIN app620.CatPerfilEmpleados PES 
	--ON
	--	(
	--			(PES.Country_Ident			= PER.Country_Ident			OR PER.Country_Ident		= -1)
	--		AND (PES.Location_Ident			= PER.Location_Ident		OR PER.Location_Ident		= -1)
	--		AND (PES.Client_Ident			= PER.Client_Ident			OR PER.Client_Ident			= -1)
	--		AND (PES.Program_Ident			= PER.Program_Ident			OR PER.Program_Ident		= -1)
	--		AND	(PES.Contract_Type_Ident	= PER.Contract_Type_Ident	OR PER.Contract_Type_Ident	= -1)
	--		AND	PES.Active					= 1
	--		AND PES.TipoAccesoId			= 1
	--		--JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
	--		--ON (BiosCity.location_bios = PE.City_Ident OR PE.City_Ident = -1)
	--		--AND (BiosCity.location_ccms = Emp.Location_Ident)
	--	)

	
	----Accesos de Solicitantes
	--JOIN
	--	app620.CatPerfilEmpleadosAccesos PEAccS
	--ON	PEAccS.Perfil_Ident		= PES.Perfil_Ident

	---- Accesos Solicitante en 
	--JOIN	CatSolicitudes S
	--ON		S.Solicitante_Ident	= PEAccS.EmpleadoId

	---- Descripción de los Estatus
	--JOIN [app620].[CatEstatusSolicitudes] ES
	--	ON ES.[EstatusSolicitudId] = S.[EstatusSolicitudId]

	----JOIN app620.CatPerfilEmpleadosAccesos PEAcc
	----ON PEAcc.EmpleadoId = S.Solicitante_Ident

	----JOIN app620.CatPerfilEmpleados PES
	----ON
	----	PES.Perfil_Ident = PEAcc.Perfil_Ident

	--WHERE (Solicitante_Ident = @Responsable_Ident OR @Responsable_Ident = 0)
	--AND ES.EstatusSolicitudId IN ('R', 'EB', 'A')

 -- WHERE CS.[Active] = 1
 -- AND (CS.FolioSolicitud = @FolioSolicitud OR @FolioSolicitud = 0)

END
GO
PRINT N'Creating [app620].[CatMisSolicitudesSel]...';


GO
CREATE PROC [app620].[CatMisSolicitudesSel]
	@Solicitante_Ident INT = 0
AS
BEGIN

	SET @Solicitante_Ident = ISNULL(@Solicitante_Ident, 0)

	SELECT --* 
		S.FolioSolicitud, S.Solicitante_Ident, S.[Fecha_Solicitud], S.EstatusSolicitudId, ES.Descripcion EstatusSolicitud, '' Justificacion
	FROM CatSolicitudes S
	JOIN [app620].[CatEstatusSolicitudes] ES
		ON ES.[EstatusSolicitudId] = S.[EstatusSolicitudId]
	WHERE (Solicitante_Ident = @Solicitante_Ident OR @Solicitante_Ident = 0)
	order by s.FolioSolicitud desc
	--AND ES.EstatusSolicitudId IN ('R', 'EB', 'PA', 'CE')

 -- WHERE CS.[Active] = 1
 -- AND (CS.FolioSolicitud = @FolioSolicitud OR @FolioSolicitud = 0)

END
GO
PRINT N'Creating [app620].[CatMotivoSolicitudCMB]...';


GO

CREATE PROC [app620].[CatMotivoSolicitudCMB]
AS
BEGIN
	SELECT 
		[MotivosSolicitudId] AS Id
      ,[Descripcion] AS Valor
  FROM [app620].[CatMotivosSolicitud]
END
GO
PRINT N'Creating [app620].[CatNotificacionesManualesSel]...';


GO
CREATE PROC [app620].[CatNotificacionesManualesSel]
@ResponsableCCMSID int = 0
AS
BEGIN
	DECLARE @PeriodoNoimaId int = 0
	DECLARE @TablaPerfilesResponsable TABLE (PerfilID int primary key,EID int)
	DECLARE @TablaDefinicionPerfilesResponsable TABLE (
	PerfilIDResponsable int primary key
	,EIDResponsable int
	,PerfilId int
	,[Country_Ident] int
	,[City_Ident] int
	,[Location_Ident] int
	,[Client_Ident] int
	,[Program_Ident] int
	,[Contract_Type_Ident] int
	,[ConceptoId] int
	,[TipoAccesoId] int
	)
	DECLARE @TablaPerfilesSolicitantes TABLE (PerfilIDSolicitante int, NombrePerfil nvarchar(50), CountryId int, CityId int, LocationId int, ClientId int, ProgramId int, ContractId int, ConceptoId int)
	DECLARE @TablaPerfilesAutorizantes TABLE (PerfilIDSolicitante int, NombrePerfil nvarchar(50), CountryId int, CityId int, LocationId int, ClientId int, ProgramId int, ContractId int, ConceptoId int)
	DECLARE @TablaCCMSIDSolicitantes TABLE (EID int)
	DECLARE @TablaCCMSIDAutorizantes TABLE (EID int)
	DECLARE @TablaSolicitudesSolicitantes TABLE (FolioId int, Estatus nvarchar(10), EID int, email nvarchar(100), Nombre nvarchar(250))
	DECLARE @TablaSolicitudesAutorizantes TABLE (FolioId int, Estatus nvarchar(10), EID int, email nvarchar(100), Nombre nvarchar(250))

	SET @PeriodoNoimaId = (select PeriodoNominaId from [app620].[CatPeriodosNomina] where convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin))

	/* 
	PASO 1: 
	Obtener el perfil del responsable logeado
	*/
	INSERT INTO @TablaPerfilesResponsable 
	select
	Perfil_Ident,EmpleadoId
	from [app620].[CatPerfilEmpleadosAccesos]
	where EmpleadoId = @ResponsableCCMSID
	AND Active = 1

	--SELECT * from @TablaPerfilesResponsable

	/*
	PASO 2:
	Sacar la definicion del perfil o los perfiles donde aplique el responsable por medio del CCMSID
	*/
	INSERT INTO @TablaDefinicionPerfilesResponsable
	SELECT
	b.PerfilID,b.EID,a.Perfil_Ident,a.Country_Ident,a.City_Ident,a.Location_Ident,a.Client_Ident,a.Program_Ident,a.Contract_Type_Ident,a.ConceptoId,a.TipoAccesoId
	from [app620].[CatPerfilEmpleados] a
	inner join @TablaPerfilesResponsable b on a.Perfil_Ident in (b.PerfilID)
	AND a.Active = 1

	--SELECT * FROM @TablaDefinicionPerfilesResponsable

	/*
	PASO 3:
	Obtener pefiles de solicitante y autorizantes que concuerden con la definicion del perfil o perfiles del responsable.
	*/
	INSERT INTO @TablaPerfilesSolicitantes
	SELECT DISTINCT
	a.Perfil_Ident, a.NombrePerfilEmpleados, a.Country_Ident, a.City_Ident, a.Location_Ident, a.Client_Ident, a.Program_Ident, a.Contract_Type_Ident, a.ConceptoId
	FROM [app620].[CatPerfilEmpleados] a
	INNER JOIN @TablaDefinicionPerfilesResponsable b on 
	(((a.Country_Ident = b.Country_Ident OR a.Country_Ident = -1)
	AND
	(a.City_Ident = b.City_Ident OR a.City_Ident = -1)
	AND
	(a.Location_Ident = b.Location_Ident OR a.Location_Ident = -1))
	OR
	((a.Client_Ident = b.Client_Ident OR a.Client_Ident = -1)
	AND
	(a.Program_Ident = b.Program_Ident OR a.Program_Ident = -1))
	OR
	(a.Contract_Type_Ident = b.Contract_Type_Ident OR a.Contract_Type_Ident = -1)
	OR
	(a.ConceptoId = b.ConceptoId OR a.ConceptoId = -1))
	AND
	a.TipoAccesoId = 1
	AND 
	a.Active = 1


	--SELECT * FROM @TablaPerfilesSolicitantes


	INSERT INTO @TablaPerfilesAutorizantes
	SELECT DISTINCT
	a.Perfil_Ident, a.NombrePerfilEmpleados, a.Country_Ident, a.City_Ident, a.Location_Ident, a.Client_Ident, a.Program_Ident, a.Contract_Type_Ident, a.ConceptoId
	FROM [app620].[CatPerfilEmpleados] a
	INNER JOIN @TablaDefinicionPerfilesResponsable b on 
	(((a.Country_Ident = b.Country_Ident OR a.Country_Ident = -1)
	AND
	(a.City_Ident = b.City_Ident OR a.City_Ident = -1)
	AND
	(a.Location_Ident = b.Location_Ident OR a.Location_Ident = -1))
	OR
	((a.Client_Ident = b.Client_Ident OR a.Client_Ident = -1)
	AND
	(a.Program_Ident = b.Program_Ident OR a.Program_Ident = -1))
	OR
	(a.Contract_Type_Ident = b.Contract_Type_Ident OR a.Contract_Type_Ident = -1)
	OR
	(a.ConceptoId = b.ConceptoId OR a.ConceptoId = -1))
	AND
	a.TipoAccesoId = 2
	AND 
	a.Active = 1


	--SELECT * FROM @TablaPerfilesAutorizantes

	/*
	PASO 4:
	Dividir los perfiles por solicitante y autorizantes
	*/
	INSERT INTO @TablaCCMSIDSolicitantes
	SELECT DISTINCT
	a.EmpleadoId--, a.*
	FROM [app620].[CatPerfilEmpleadosAccesos] a
	INNER JOIN @TablaPerfilesSolicitantes b on a.Perfil_Ident = b.PerfilIDSolicitante AND a.Active = 1


	--SELECT * FROM @TablaCCMSIDSolicitantes



	INSERT INTO @TablaCCMSIDAutorizantes
	SELECT DISTINCT
	a.EmpleadoId--, a.*
	FROM [app620].[CatPerfilEmpleadosAccesos] a
	INNER JOIN @TablaPerfilesAutorizantes b on a.Perfil_Ident = b.PerfilIDSolicitante AND a.Active = 1


	--SELECT * FROM @TablaCCMSIDAutorizantes


	/*
	PASO 5:
	Obtener los ccmsid relacionados con cada perfil y sus email.
	En el caso de solicitantes, buscar por medio del ccmsid todas las solicitudes que estan en estatus de borrador(EB) o rechazadas(R) relacionadas a ese CCMSID.
	En el caso de autorizantes, buscar por medio del ccmsid todas las solicitudes que estan en estatus de PA relacionadas a ese CCMSID.
	*/
	INSERT INTO @TablaSolicitudesSolicitantes
	SELECT
	a.FolioSolicitud, a.EstatusSolicitudId, a.Solicitante_Ident, c.email1, c.Nombre
	FROM [app620].[CatSolicitudes] a
	INNER JOIN @TablaCCMSIDSolicitantes b on a.Solicitante_Ident = b.EID AND a.EstatusSolicitudId in ('EB','R') AND a.Active = 1 AND a.PeriodoNominaId = @PeriodoNoimaId
	INNER JOIN [app620].[CatEmployeeCCMSVw] c on b.EID = c.Ident

	--SELECT * FROM @TablaSolicitudesSolicitantes order by eid


	INSERT INTO @TablaSolicitudesAutorizantes
	SELECT DISTINCT
	a.FolioSolicitud,b.EstatusSolicitudId, a.Autorizador_Ident, d.email1, d.Nombre
	FROM [app620].[CatSolicitudEmpleadosAutorizantes] a
	INNER JOIN [app620].[CatSolicitudes] b on a.FolioSolicitud = b.FolioSolicitud AND b.EstatusSolicitudId in ('PA') AND a.Active = 1 AND b.PeriodoNominaId = @PeriodoNoimaId
	INNER JOIN @TablaCCMSIDAutorizantes c on a.Autorizador_Ident = c.EID AND a.Pendiente = 1 
	INNER JOIN [app620].[CatEmployeeCCMSVw] d on c.EID = d.Ident
	order by a.Autorizador_Ident
 

	--SELECT * FROM @TablaSolicitudesAutorizantes order by eid

	/*
	PASO 6:
	Juntar las solicitudes que se van a enviar por email.
	*/
	SELECT
	FolioId, Estatus, EID, email, 1 AS Accesos, Nombre
	FROM @TablaSolicitudesSolicitantes

	UNION

	SELECT
	FolioId, Estatus, EID, email, 2 AS Accesos, Nombre
	FROM @TablaSolicitudesAutorizantes
	ORDER BY EID
END
GO
PRINT N'Creating [app620].[CatParametroConceptosCMB]...';


GO



CREATE PROC [app620].[CatParametroConceptosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [ParametroConceptoId] As Id
		,[Descripcion] As Value
	FROM [app620].[CatParametroConceptos]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadoAccesoSel]...';


GO
CREATE PROCEDURE [app620].[CatPerfilEmpleadoAccesoSel]
(
	  @Perfil_Ident		INT = -1
	 ,@Ident			INT = -1
	 --,@Activo			INT = 1
)
AS

BEGIN

	DECLARE
		  @Nombre					VARCHAR(752)
		, @Position_Code_Ident		INT
		, @Position_Code_Title		VARCHAR(150)
		, @Manager_Ident			INT
		, @Nombre_Manager			VARCHAR(752)
		, @NombrePerfilEmpleados	VARCHAR(50)
		, @TipoAccesoId				INT
		, @TipoAcceso				VARCHAR(50)
		, @Active 					BIT

	SELECT
			 @Ident			= ISNULL(@Ident, -1)
			,@Perfil_Ident	= ISNULL(@Perfil_Ident, -1)
			--,@Activo		= ISNULL(@Activo, 1)

	IF (@Ident <> -1) 
		SELECT
		  @Nombre = Emp.Nombre
		, @Position_Code_Ident	= Emp.Position_Code_Ident
		, @Position_Code_Title	= Emp.Position_Code_Title
		, @Manager_Ident		= Emp.Manager_Ident
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
	WHERE
		Emp.Ident			= @Ident

	SELECT
		@Manager_Ident			= ISNULL(@Manager_Ident, -1)

	IF (@Manager_Ident <> -1) 
		SELECT
		  @Nombre_Manager		= Emp.Nombre
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
	WHERE
		Emp.Ident			= @Manager_Ident

	IF (@Perfil_Ident <> -1)
		SELECT
			   @NombrePerfilEmpleados	= PE.NombrePerfilEmpleados
			  ,@TipoAccesoId			= PE.TipoAccesoId
			--, @Active					= Active
		FROM
			app620.CatPerfilEmpleados PE
		JOIN [app620].[CatPerfilEmpleadosAccesos] PEA ON PEA.Perfil_Ident = PE.Perfil_Ident
		WHERE PEA.Perfil_Ident		= @Perfil_Ident					
		AND PEA.EmpleadoId			= @Ident

		SELECT
			@Active					= Active
		FROM 
			 [app620].[CatPerfilEmpleadosAccesos] PEA
		WHERE
				PEA.[EmpleadoId]			= @Ident
			AND	PEA.[Perfil_Ident]			= @Perfil_Ident

		SELECT @TipoAcceso = Descripcion
		FROM
			CatTiposAcceso TA
		WHERE TA.TipoAccesoId = @TipoAccesoId


		--SELECT
		--	*
		--FROM 
		--	 [app620].[CatPerfilEmpleadosAccesos] PEA
		--WHERE
		--		PEA.[EmpleadoId]			= 137761
		--	AND	PEA.[Perfil_Ident]			= 1




	SELECT	@TipoAccesoId	= TipoAccesoId FROM app620.CatPerfilEmpleados WHERE Perfil_Ident = @Perfil_Ident
	SELECT	@TipoAccesoId	= ISNULL(@TipoAccesoId, -1)
	

	SELECT
		  @Ident					Ident
		, @Nombre					Nombre
		, @Position_Code_Ident		Position_Code_Ident
		, @Position_Code_Title		Position_Code_Title	
		, @Manager_Ident			Manager_Ident
		, @Nombre_Manager			Nombre_Manager	
		, @Perfil_Ident				Perfil_Ident
		, @NombrePerfilEmpleados	NombrePerfilEmpleados
		, @Active					Active
		, @TipoAccesoId				TipoAccesoId
		, @TipoAcceso				TipoAcceso
		--, @Activo					Activo
		, AccesoSolicitante =
								CASE WHEN
								(	-- Filtro para Solicitantes	
									@Position_Code_Title IS NOT NULL
								AND
									@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND
									@TipoAccesoId	= 1
								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoAutorizante =
								CASE WHEN
								(	-- Filtro para Autorizantes	
									@Position_Code_Title IS NOT NULL
								AND
									@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND
									@TipoAccesoId	= 2

								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoResponsable =
								CASE WHEN
								(	-- Filtro para Responsables	
									@Position_Code_Title IS NOT NULL
								AND
									@Position_Code_Title IN ('IMSS Coordinator', 'IMSS Manager', 'Payroll Coordinator', 'Payroll Manager', 'Payroll Specialist', 'Payroll Sr. Manager')
								AND	
									@TipoAccesoId	= 3

								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoConsultante =
								CASE WHEN
								(	-- Filtro para Consultas	
									@Position_Code_Title IS NOT NULL
								AND
									@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND	
									@TipoAccesoId	= 4
								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoOtros =
								CASE WHEN
								(	-- Filtro para Otros
									@Position_Code_Title IS NOT NULL
								AND
									@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND	
									@TipoAccesoId = -1

								) 
								THEN
									1
								ELSE
									0
								END

	--SELECT
	--	  Emp.Ident	
	--	, Emp.Nombre
	--	, Emp.Position_Code_Ident
	--	, Emp.Position_Code_Title
	--	, Perfil.Perfil_Ident
	--	, Perfil.NombrePerfilEmpleados
	--	, Perfil.Active PerfilActivo
	--	, PEA.Active PerfilEmpleadoAcceso_Activo

	--	, AccesoSolicitante =
	--							CASE WHEN
	--							(	-- Filtro para Solicitantes	
	--								Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
	--							AND
	--								Perfil.TipoAccesoId	= 1
	--							) 
	--							THEN
	--								1
	--							ELSE
	--								0
	--							END
	--	, AccesoAutorizante =
	--							CASE WHEN
	--							(	-- Filtro para Autorizantes	
	--								Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
	--							AND
	--								Perfil.TipoAccesoId	= 2

	--							) 
	--							THEN
	--								1
	--							ELSE
	--								0
	--							END
	--	, AccesoResponsable =
	--							CASE WHEN
	--							(	-- Filtro para Responsables	
	--								Emp.Position_Code_Title IN ('IMSS Coordinator', 'IMSS Manager', 'Payroll Coordinator', 'Payroll Manager', 'Payroll Specialist', 'Payroll Sr. Manager')
	--							AND	
	--								Perfil.TipoAccesoId	= 3

	--							) 
	--							THEN
	--								1
	--							ELSE
	--								0
	--							END
	--	, AccesoConsultante =
	--							CASE WHEN
	--							(	-- Filtro para Consultas	
	--								Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
	--							AND	
	--								Perfil.TipoAccesoId	= 4
	--							) 
	--							THEN
	--								1
	--							ELSE
	--								0
	--							END
	--	, AccesoOtros =
	--							CASE WHEN
	--							(	-- Filtro para Otros
	--								Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
	--							AND	
	--								@TipoAccesoId = -1

	--							) 
	--							THEN
	--								1
	--							ELSE
	--								0
	--							END

	--FROM
	--	app620.CatEmployeeCCMSVw AS Emp 
	--	JOIN app620.CatLocationVw AS Loc 
	--		ON Emp.Location_Ident = Loc.Location_Ident 
	--	JOIN app620.CatPerfilEmpleados Perfil
	--		ON	(Perfil.Perfil_Ident		= @Perfil_Ident)
			
	--	JOIN [app620].[CatPerfilEmpleadosAccesos] PEA
	--		ON	PEA.[EmpleadoId]			= Emp.Ident
	--		AND	PEA.[Perfil_Ident]			= Perfil.Perfil_Ident
	--		--AND	(PEA.Active = 1)

	--WHERE
	--	Emp.Current_Status			= 'Active'
	--AND
	--	(Emp.Ident = @Ident)

	--ORDER BY Emp.Nombre

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesosCMB]...';


GO

-- =============================================
-- Author:		Jesús De los Santos
-- Create date: 18-04-2019
-- Description:	SP que devuelve el listado de empleados 
--				asociados al perfil.
-- =============================================
CREATE PROCEDURE [app620].[CatPerfilEmpleadosAccesosCMB]
	@Perfil_Ident	INT = -1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT @Perfil_Ident = ISNULL(@Perfil_Ident, -1)

	SELECT 
		  PEA.EmpleadoId AS Id
		, EMP.Nombre AS Value
	FROM [CatPerfilEmpleadosAccesos] PEA
	JOIN [app620].[CatEmployeeCCMSVw] EMP
		ON EMP.Ident = PEA.EmpleadoId
	WHERE	(PEA.Perfil_Ident	= @Perfil_Ident		OR @Perfil_Ident = -1)
	AND		PEA.Active			= 1

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesoSel]...';


GO
CREATE PROCEDURE [app620].[CatPerfilEmpleadosAccesoSel]
(
	  @Perfil_Ident		INT = -1
	 ,@Ident			INT = -1
	 ,@Activo			INT = 1
)
AS

BEGIN

	DECLARE	@TipoAccesoId	INT

	DECLARE
		--  @Ident
		  @Nombre					VARCHAR(752)
		, @Position_Code_Ident		INT
		, @Position_Code_Title		VARCHAR(150)
		--, @Perfil_Ident				INT
		, @NombrePerfilEmpleados	VARCHAR(50)
		, @Active 					BIT

	SELECT
			 @Ident			= ISNULL(@Ident, -1)
			,@Perfil_Ident	= ISNULL(@Perfil_Ident, -1)
			,@Activo		= ISNULL(@Activo, 1)

	IF (@Ident <> -1) 
		SELECT
		  @Nombre = Emp.Nombre
		, @Position_Code_Ident = Emp.Position_Code_Ident
		, @Position_Code_Title = Emp.Position_Code_Title
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
	WHERE
		Emp.Ident			= @Ident

	IF (@Perfil_Ident <> -1)
		SELECT
			  @NombrePerfilEmpleados	= NombrePerfilEmpleados
			, @Active					= Active
		FROM
			app620.CatPerfilEmpleados
		WHERE Perfil_Ident		= @Perfil_Ident					


	SELECT	@TipoAccesoId	= TipoAccesoId FROM app620.CatPerfilEmpleados WHERE Perfil_Ident = @Perfil_Ident
	SELECT	@TipoAccesoId	= ISNULL(@TipoAccesoId, -1)
	

	SELECT
		  @Ident					Ident
		, @Perfil_Ident				Perfil_Ident
		, @Activo					Activo
		, @Nombre					Nombre
		, @Position_Code_Ident		Position_Code_Ident
		, @Position_Code_Title		Position_Code_Title
		, @NombrePerfilEmpleados	NombrePerfilEmpleados
		, @Active					Active
		, @TipoAccesoId				TipoAccesoId


	SELECT
		  Emp.Ident
		, Emp.Nombre
		, Emp.Position_Code_Ident
		, Emp.Position_Code_Title
		, Perfil.Perfil_Ident
		, Perfil.NombrePerfilEmpleados
		, Perfil.Active PerfilActivo
		, PEA.Active PerfilEmpleadoAcceso_Activo
		, AccesoSolicitante =
								CASE WHEN
								(	-- Filtro para Solicitantes	
									Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND
									@TipoAccesoId	= 1
								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoAutorizante =
								CASE WHEN
								(	-- Filtro para Autorizantes	
									Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND
									@TipoAccesoId	= 2

								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoResponsable =
								CASE WHEN
								(	-- Filtro para Responsables	
									Emp.Position_Code_Title IN ('IMSS Coordinator', 'IMSS Manager', 'Payroll Coordinator', 'Payroll Manager', 'Payroll Specialist', 'Payroll Sr. Manager')
								AND	
									@TipoAccesoId	= 3

								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoConsultante =
								CASE WHEN
								(	-- Filtro para Consultas	
									Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND	
									@TipoAccesoId	= 4
								) 
								THEN
									1
								ELSE
									0
								END
		, AccesoConsultante =
								CASE WHEN
								(	-- Filtro para Otros
									Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
								AND	
									@TipoAccesoId = -1

								) 
								THEN
									1
								ELSE
									0
								END
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
		JOIN app620.CatLocationVw AS Loc 
			ON Emp.Location_Ident = Loc.Location_Ident 
		LEFT JOIN app620.CatPerfilEmpleados Perfil
			ON	(Perfil.Perfil_Ident		= @Perfil_Ident					OR	@Perfil_Ident				= -1)
			
		--,app620.CatPerfilEmpleados Perfil
		--LEFT JOIN [app620].[CatPerfilEmpleadosAccesos] PEA
		LEFT JOIN [app620].[CatPerfilEmpleadosAccesos] PEA
			ON	PEA.[EmpleadoId]			= Emp.Ident
			AND	PEA.[Perfil_Ident]			= Perfil.Perfil_Ident
			AND	(PEA.Active = 1 OR @Activo = 0)

	WHERE
		Emp.Current_Status			= 'Active'
	AND 
		(
			(
				(	-- Filtro para Solicitantes
					Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
				AND
					@TipoAccesoId	= 1
				)
				OR
				(	-- Filtro para Autorizantes
					Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
				AND
					@TipoAccesoId	= 2
				)
				OR
				(	-- Filtro para Responsables
					Emp.Position_Code_Title IN ('IMSS Coordinator', 'IMSS Manager', 'Payroll Coordinator', 'Payroll Manager', 'Payroll Specialist', 'Payroll Sr. Manager')
				AND	
					@TipoAccesoId	= 3
				)
				OR
				(	-- Filtro para Consultas
					Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
				AND	
					@TipoAccesoId	= 4
				)
				OR
				(	-- Filtro para Otros
					Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
				AND	
					@TipoAccesoId = -1
				)	
			)
			OR
				@Activo = 0
		)
	AND
		(Emp.Ident = @Ident AND @Ident <> -1)

	ORDER BY Emp.Nombre

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesosSel]...';


GO
CREATE PROCEDURE [app620].[CatPerfilEmpleadosAccesosSel]
(
	 @Perfil_Ident			INT = -1
)
AS

BEGIN

	DECLARE	@TipoAccesoId	INT

	SELECT
		 @Perfil_Ident			= ISNULL(@Perfil_Ident, -1)

	SELECT	@TipoAccesoId	= TipoAccesoId FROM app620.CatPerfilEmpleados WHERE Perfil_Ident = @Perfil_Ident
	SELECT	@TipoAccesoId	= ISNULL(@TipoAccesoId, -1)
	
	SELECT
		  Emp.Ident
		, Emp.Nombre
		, Emp.Position_Code_Ident
		, Emp.Position_Code_Title
		, Perfil.Perfil_Ident
		, Perfil.NombrePerfilEmpleados
		, Perfil.Active PerfilActivo
		, PEA.Active PerfilEmpleadoAcceso_Activo
		, PEA.Nivel
	
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
		JOIN app620.CatLocationVw AS Loc 
			ON Emp.Location_Ident = Loc.Location_Ident 
		JOIN app620.CatPerfilEmpleados Perfil
			ON	(Perfil.Perfil_Ident		= @Perfil_Ident					OR	@Perfil_Ident				= -1)
			
		--	--AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
		--	AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
		--	AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
		--	AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
		--	AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

		--	AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)

		JOIN app620.CatRelLocationBiosCCMSVw LocBIOS
			ON	(LocBIOS.[location_ccms]	= Loc.Location_Ident)
			--AND	(LocBIOS.[location_bios]	= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)

		--,app620.CatPerfilEmpleados Perfil
		--LEFT JOIN [app620].[CatPerfilEmpleadosAccesos] PEA
		JOIN [app620].[CatPerfilEmpleadosAccesos] PEA
			ON	PEA.[EmpleadoId]			= Emp.Ident
			AND	PEA.[Perfil_Ident]			= Perfil.Perfil_Ident
			AND	PEA.Active = 1

	WHERE
		Emp.Current_Status			= 'Active'
	AND 
		(
			(	-- Filtro para Solicitantes
				Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
			AND
				@TipoAccesoId	= 1
			)
			OR
			(	-- Filtro para Autorizantes
				Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
			AND
				@TipoAccesoId	= 2
			)
			OR
			(	-- Filtro para Responsables
				Emp.Position_Code_Title IN ('IMSS Coordinator', 'IMSS Manager', 'Payroll Coordinator', 'Payroll Manager', 'Payroll Specialist', 'Payroll Sr. Manager')
			AND	
				@TipoAccesoId	= 3
			)
			OR
			(	-- Filtro para Consultas
				Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
			AND	
				@TipoAccesoId	= 4
			)
			OR
			(	-- Filtro para Otros
				Emp.Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
			AND	
				@TipoAccesoId = -1
			)				
		)
	ORDER BY Emp.Nombre
	--AND
	--	PEA.Active = 1
END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesosSi]...';


GO

CREATE PROC [app620].[CatPerfilEmpleadosAccesosSi]
	 @EmpleadoId	INT
	,@Perfil_Ident	INT
	,@Nivel			INT = NULL

	,@UserEmployeeId	INT
	,@Active			BIT
	,@Estatus			INT = 0 OUTPUT
AS
BEGIN
		
	DECLARE @FechaActual DATETIME
	DECLARE @Position_Code_Title VARCHAR(752) = NULL
	DECLARE @UPDATE INT
	DECLARE @TipoAccesoId INT = 0

	SET @FechaActual = GETDATE();
	
	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	-- Se obtiene el tipo de acceso en base al perfil
	SELECT @TipoAccesoId = TipoAccesoId
	FROM [app620].[CatPerfilEmpleados]
	WHERE Perfil_Ident = @Perfil_Ident

	--SELECT @TipoAccesoId TipoAccesoId

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe este registro de Acceso para este empleado y perfil
	- -2 = el empleado no existe en CCMS o no está activo
	- -3 = El puesto del empleado no es válido para este perfil
	- -4 = El nivel ya está asignado a otro empleado
	- 

	*/
	
	IF EXISTS	(
					SELECT 1 
					FROM CatPerfilEmpleadosAccesos
					WHERE Perfil_Ident = @Perfil_Ident
					AND EmpleadoId = @EmpleadoId
					AND Active = 1
					AND ISNULL(Nivel, 0) = ISNULL(@Nivel, 0)
				)
		BEGIN
			SET @Estatus = -1
		END

	IF EXISTS	(
					SELECT 1 
					FROM CatPerfilEmpleadosAccesos
					WHERE Perfil_Ident = @Perfil_Ident
					AND EmpleadoId <> @EmpleadoId
					AND Active = 1
					AND ISNULL(Nivel, 0) = ISNULL(@Nivel, 0)
					AND Nivel > 0
				)
		BEGIN
			SET @Estatus = -4
		END

	--ELSE
	--	BEGIN
			
	--		IF EXISTS	(
	--						SELECT 1 
	--						FROM CatPerfilEmpleadosAccesos
	--						WHERE Perfil_Ident = @Perfil_Ident
	--						AND EmpleadoId = @EmpleadoId
	--						AND Active = 1
	--						AND ISNULL(Nivel, 0) <> ISNULL(@Nivel, 0)
	--						AND Nivel IS NOT NULL
	--					)
	--			BEGIN
	--				SELECT 1
	--			END
	--	END

	IF NOT EXISTS	(
					SELECT 1 
					FROM [app620].[CatEmployeeCCMSVw] Emp
					WHERE Ident = @EmpleadoId
					AND [Current_Status] = 'Active'
				)
		SET @Estatus = -2

	IF (@Estatus = 0 OR @Estatus = -1)
		BEGIN

			SELECT @Position_Code_Title = Emp.Position_Code_Title
			FROM [app620].[CatEmployeeCCMSVw] Emp
			WHERE Ident = @EmpleadoId
			AND [Current_Status] = 'Active'

			--SELECT @Position_Code_Title Position_Code_Title

			--SELECT @Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic') 'Puesto-TipoAccesoId'

			IF NOT (
					(@Position_Code_Title  IS NOT NULL)
				AND
					(
						(	-- Filtro para Solicitantes
							@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
						AND
							@TipoAccesoId	= 1
						)
						OR
						(	-- Filtro para Autorizantes
							@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
						AND
							@TipoAccesoId	= 2
						)
						OR
						(	-- Filtro para Responsables
							@Position_Code_Title IN ('IMSS Coordinator', 'IMSS Manager', 'Payroll Coordinator', 'Payroll Manager', 'Payroll Specialist', 'Payroll Sr. Manager')
						AND	
							@TipoAccesoId	= 3
						)
						OR
						(	-- Filtro para Consultas
							@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
						AND	
							@TipoAccesoId	= 4
						)
						OR
						(	-- Filtro para Otros
							@Position_Code_Title NOT IN ('Becario - Bilingual', 'Becario - Domestic', 'Agent - Bilingual', 'Agent - Domestic', 'Agent - Hispanic', 'Agent SME - Bilingual', 'Agent SME - Domestic', 'Agent SME - Hispanic')
						AND	
							@TipoAccesoId = -1
						)	
					)
				)		
				BEGIN
					SELECT @Estatus = -3
				END
		END

	IF (@Estatus = 0)
		BEGIN
			SELECT @UPDATE = 1 
			FROM CatPerfilEmpleadosAccesos
			WHERE Perfil_Ident = @Perfil_Ident
			AND @EmpleadoId = @EmpleadoId
			AND Active = 0

			--SELECT @UPDATE 'UPDATE'

			--IF (ISNULL(@UPDATE, 0) = 1) --AND (@Estatus = 0)

			--SELECT @Perfil_Ident Perfil_Ident, @EmpleadoId EmpleadoId


			--SELECT * 
			--FROM CatPerfilEmpleadosAccesos
			--WHERE Perfil_Ident = @Perfil_Ident
			--AND EmpleadoId = @EmpleadoId
			----AND Active = 0			


			IF EXISTS (
							SELECT 1 
							FROM CatPerfilEmpleadosAccesos
							WHERE Perfil_Ident = @Perfil_Ident
							AND EmpleadoId = @EmpleadoId
							--AND Active = 0			
			)
				BEGIN
					-- Se actualizan registros a estatus Activo cuando ya aparece en la BD
					UPDATE [app620].[CatPerfilEmpleadosAccesos]
					SET 
						Nivel						= @Nivel,
						LastModifiedBy				= @UserEmployeeId,
						LastModifiedDate			= @FechaActual,

						DeactivatedBy				= NULL,
						DeactivatedDate				= NULL,
						LastModifiedFromPCName		= HOST_NAME(),
						Active						= @Active
					WHERE
						Perfil_Ident				= @Perfil_Ident
					--AND
					--	Active						= 1
					AND
						EmpleadoId					= @EmpleadoId
				END
			ELSE
				BEGIN
			-- Se insertan las claves que no existen en la tabla CatPerfilEmpleadosAccesos
					INSERT INTO [app620].[CatPerfilEmpleadosAccesos]
						(
							EmpleadoId,
							Perfil_Ident,
							Nivel,

							[CreatedBy],
							[CreatedDate],
							[LastModifiedBy]
						)
					SELECT
						@EmpleadoId,
						@Perfil_Ident,
						@Nivel,

						@UserEmployeeId, 
						@FechaActual,
						@UserEmployeeId 
				END
		END
END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesosSi2]...';


GO

CREATE PROC [app620].[CatPerfilEmpleadosAccesosSi2]
	 @Perfil_Ident INT
	,@SelectedKeyNames VARCHAR(500)
	,@SelectedEmpleados VARCHAR(500)
	--,@EmpleadoId INT

	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	
	Create table	#tempSelectedKeys (EmpleadoId INT)
	Insert into		#tempSelectedKeys (EmpleadoId)
		(
			SELECT	item 
			FROM	dbo.fnSplit(@SelectedKeyNames,',')
		)
	
	Create table	#tempSelectedEmpleados (EmpleadoId INT)
	Insert into		#tempSelectedEmpleados (EmpleadoId)
		(
			SELECT	item 
			FROM	dbo.fnSplit(@SelectedEmpleados,',')
		)
	
	DECLARE @FechaActual DATETIME

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro de Acceso para ese empleado
	*/
	
	SET @FechaActual = GETDATE();

	-- Se actualizan registros a estatus Activo cuando no aparece en la lista
	UPDATE [app620].[CatPerfilEmpleadosAccesos]
	SET 
		[Active]					= 1,
		LastModifiedBy				= @UserEmployeeId,
		LastModifiedDate			= @FechaActual,

		DeactivatedBy				= NULL,
		DeactivatedDate				= NULL,
		LastModifiedFromPCName		= HOST_NAME()
	WHERE
		Perfil_Ident				= @Perfil_Ident
	AND
		Active						= 0
	AND
		EmpleadoId IN				(SELECT EmpleadoId FROM #tempSelectedKeys)
	AND
		EmpleadoId IN				(SELECT (EmpleadoId * -1) EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId < 0)
		--EmpleadoId IN				(SELECT EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId > 0)

--SELECT EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId > 0		

	-- Se actualizan registros a estatus Inactivo cuando no aparece en la lista
	UPDATE [app620].[CatPerfilEmpleadosAccesos]
	SET 
		[Active]					= 0,
		LastModifiedBy				= @UserEmployeeId,
		LastModifiedDate			= @FechaActual,

		DeactivatedBy				= @UserEmployeeId,
		DeactivatedDate				= @FechaActual,
		LastModifiedFromPCName		= HOST_NAME()
	WHERE
		Perfil_Ident				= @Perfil_Ident
	AND
		Active						= 1
	AND
		EmpleadoId NOT IN			(SELECT EmpleadoId FROM #tempSelectedKeys)
	AND
		EmpleadoId IN				(SELECT EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId > 0)
		--EmpleadoId IN				(SELECT (EmpleadoId * -1) EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId < 0)

--SELECT (EmpleadoId * -1) EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId < 0

	-- Se insertan las claves que no existen en la tabla CatPerfilEmpleadosAccesos
	INSERT INTO [app620].[CatPerfilEmpleadosAccesos]
		(
			Perfil_Ident,
			EmpleadoId,

			[CreatedBy],
			[LastModifiedBy]
		)
	SELECT
		@Perfil_Ident,
		SK.EmpleadoId,
		--@EmpleadoId,

		@UserEmployeeId, 
		@UserEmployeeId 
	FROM #tempSelectedKeys SK	
	WHERE SK.EmpleadoId NOT IN	(
									SELECT EmpleadoId 
									FROM app620.CatPerfilEmpleadosAccesos
									WHERE Perfil_Ident = @Perfil_Ident
								)
	--AND
	--	SK.EmpleadoId IN			(SELECT EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId > 0)

--SELECT EmpleadoId FROM #tempSelectedEmpleados WHERE EmpleadoId > 0

	--AND	

	--IF NOT EXISTS	
	--		(
	--			SELECT 1 
	--			FROM [app620].[CatPerfilEmpleadosAccesos]
	--			WHERE	Perfil_Ident	= @Perfil_Ident
	--			AND		EmpleadoId		= @EmpleadoId
	--		)

	--	BEGIN
	--		INSERT INTO [app620].[CatPerfilEmpleadosAccesos]
	--		   (
	--				Perfil_Ident,
	--				EmpleadoId,

	--				[CreatedBy],
	--				[LastModifiedBy]
	--		   )
	--	 VALUES
	--			(
	--				@Perfil_Ident,
	--				@EmpleadoId,

	--				@UserEmployeeId, 
	--				@UserEmployeeId 
	--			)
	--	END
	--ELSE
	--	BEGIN
	--		UPDATE [app620].[CatPerfilEmpleadosAccesos]
	--		SET 
	--			[Active]					= @Active,
	--			LastModifiedBy				= @UserEmployeeId,
	--			LastModifiedDate			= @FechaActual,

	--			DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId),
	--			DeactivatedDate				= IIF(@Active=1,NULL,@FechaActual),
	--			LastModifiedFromPCName		= HOST_NAME()
	--		WHERE
	--			Perfil_Ident				= @Perfil_Ident
	--		AND
	--			EmpleadoId					= @EmpleadoId
	--	END

	DROP TABLE #tempSelectedKeys;
	DROP TABLE #tempSelectedEmpleados;

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosAccesosSu]...';


GO

CREATE PROCEDURE [app620].[CatPerfilEmpleadosAccesosSu]
	 @Perfil_Ident INT
	,@EmpleadoId INT
	,@Nivel		INT = NULL

	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = No existe registro con la clave de Perfil/Empleado
	*/
	
	SET @FechaActual = GETDATE();

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatPerfilEmpleadosAccesos] 
						WHERE [Perfil_Ident] = @Perfil_Ident
					)
		BEGIN
			UPDATE [app620].[CatPerfilEmpleadosAccesos]
			SET 
				 [Active]					= @Active
				,LastModifiedBy				= @UserEmployeeId
				,LastModifiedDate			= @FechaActual
				,Nivel						= @Nivel

				,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName		= HOST_NAME()
			WHERE
				Perfil_Ident				= @Perfil_Ident
			AND
				EmpleadoId					= @EmpleadoId
		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosCMB]...';


GO


CREATE PROC [app620].[CatPerfilEmpleadosCMB]
	@TipoAccesoId INT = '-1'
AS
BEGIN
	SET @TipoAccesoId = ISNULL(@TipoAccesoId, -1)

	SELECT DISTINCT
		 [Perfil_Ident] As Ident
		,[NombrePerfilEmpleados] As Valor
	FROM [app620].[CatPerfilEmpleados]
	WHERE Active = 1
	AND (TipoAccesoId = @TipoAccesoId OR @TipoAccesoId = -1)
	ORDER BY NombrePerfilEmpleados
END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadoSel]...';


GO
CREATE PROCEDURE [app620].[CatPerfilEmpleadoSel]
(
	 --,@Perfil_Ident		INT = -1
	  @Ident			INT = -1
	 --,@Activo			INT = 1
)
AS

BEGIN

	DECLARE
		  @Nombre					VARCHAR(752)
		, @Position_Code_Ident		INT
		, @Position_Code_Title		VARCHAR(150)
		, @Manager_Ident			INT
		, @Nombre_Manager			VARCHAR(752)
		, @Active 					BIT

	SELECT
			 @Ident			= ISNULL(@Ident, -1)

	IF (@Ident <> -1) 
		SELECT
		  @Nombre				=  Emp.Nombre				
		, @Position_Code_Ident	=  Emp.Position_Code_Ident	
		, @Position_Code_Title	=  Emp.Position_Code_Title	
		, @Manager_Ident		=  Emp.Manager_Ident		
		, @Nombre_Manager		=  Emp2.Nombre				
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
	JOIN
		app620.CatEmployeeCCMSVw AS Emp2
	ON 
		Emp2.Ident	= Emp.Manager_Ident
	WHERE
		Emp.Ident			= @Ident

		SELECT
		  @Ident						Ident				
		, @Nombre						Nombre				
		, @Position_Code_Ident			Position_Code_Ident	
		, @Position_Code_Title			Position_Code_Title	
		, ISNULL(@Manager_Ident, -1)	Manager_Ident		
		, @Nombre_Manager				Nombre				

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosSel]...';


GO
CREATE PROC [app620].[CatPerfilEmpleadosSel]
	@Perfil_Ident INT = 0 
AS
BEGIN

	SET @Perfil_Ident = ISNULL(@Perfil_Ident, 0)

	SELECT
		 Perfil.[Perfil_Ident]
		,[NombrePerfilEmpleados]
		,Perfil.[Country_Ident]
		,Pais.Country_Full_Name
		,ISNULL(CCVW.Id, -1) City_Ident
		,CCVW.Value City_Name
		,Perfil.[Location_Ident]
		,Location.full_name Location_Name
		,Perfil.[Client_Ident]
		,Client.Client_Name
		,Perfil.[Program_Ident]
		,Program.Program_Name
		,Perfil.[Contract_Type_Ident]
		,Contract.Contract_Type
		--,Perfil.ConceptoId
		,Concepto.Descripcion Concepto
		,Perfil.TipoAccesoId
		,TipoAcceso.Descripcion TipoAcceso
		,Perfil.Active
		,CASE
				WHEN COUNT(CC.Descripcion) > 1
				THEN 'VARIOS'
				ELSE (	SELECT	Descripcion
						FROM	[app620].[RelPerfilEmpleadosConceptos] A WITH(NOLOCK)
								JOIN app620.CatConceptos B ON A.ConceptoId = B.ConceptoId
						WHERE	A.Perfil_Ident = Perfil.Perfil_Ident)
		END AS ConceptoNombre
		,(SELECT DISTINCT  
    SUBSTRING(
        (
            SELECT ',' + CONVERT(VARCHAR(1500),REC1.ConceptoId)  AS [text()]
            FROM app620.RelPerfilEmpleadosConceptos REC1
				JOIN app620.CatConceptos B ON REC1.ConceptoId = B.ConceptoId
            WHERE REC1.Perfil_Ident = REC2.Perfil_Ident
            ORDER BY REC1.Perfil_Ident
            FOR XML PATH ('')
        ), 2, 1000) [ConceptoId]
FROM app620.RelPerfilEmpleadosConceptos REC2 WHERE REC2.Perfil_Ident = Perfil.Perfil_Ident)
		 AS ConceptoId
	FROM [app620].[CatPerfilEmpleados] Perfil
	JOIN [app620].[RelPerfilEmpleadosConceptos] REC WITH(NOLOCK) ON REC.Perfil_Ident = Perfil.Perfil_Ident
	LEFT JOIN [app620].[CatCountryVw] Pais ON Pais.[Country_Ident] = Perfil.Country_Ident
	LEFT JOIN [app620].[CatLocationVw] Location ON Location.Location_Ident = Perfil.Location_Ident
	LEFT JOIN [app620].[CatClientVw] Client ON client.Client_Ident = Perfil.Client_Ident
	LEFT JOIN [app620].[CatProgramVw] Program ON Program.Program_Ident = perfil.Program_Ident
	LEFT JOIN [app620].[CatContractTypeVw] Contract ON Contract.Contract_Type_Ident = Perfil.Contract_Type_Ident
	LEFT JOIN [app620].[CatConceptos] Concepto ON Concepto.ConceptoId = Perfil.ConceptoId
	LEFT JOIN [app620].[CatTiposAcceso] TipoAcceso ON TipoAcceso.TipoAccesoId = Perfil.[TipoAccesoId]
	LEFT JOIN [app620].[CatConceptos] CC ON CC.ConceptoId = REC.ConceptoId
	LEFT JOIN [app620].[CatCityVw] CCVW ON CCVW.Id = Perfil.City_Ident
	WHERE (Perfil.Perfil_Ident =@Perfil_Ident OR @Perfil_Ident = 0)
	GROUP BY Perfil.[Perfil_Ident]
			,[NombrePerfilEmpleados]
			,Perfil.[Country_Ident]
			,Pais.Country_Full_Name
			,ISNULL(CCVW.Id, -1)
			,CCVW.Value 
			,Perfil.[Location_Ident]
			,Location.full_name 
			,Perfil.[Client_Ident]
			,Client.Client_Name
			,Perfil.[Program_Ident]
			,Program.Program_Name
			,Perfil.[Contract_Type_Ident]
			,Contract.Contract_Type
			,Perfil.ConceptoId
			,Concepto.Descripcion
			,Perfil.TipoAccesoId
			,TipoAcceso.Descripcion
			,Perfil.Active
--	ORDER BY Perfil.Perfil_ident
	ORDER BY NombrePerfilEmpleados

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosSi]...';


GO
CREATE PROC [app620].[CatPerfilEmpleadosSi]
	 @NombrePerfilEmpleados VARCHAR(50)
	,@Country_Ident INT
	,@City_Ident INT
	,@Location_Ident INT
	,@Client_Ident INT
	,@Program_Ident INT
	,@Contract_Type_Ident INT
	,@ConceptoId VARCHAR(1500)
	,@TipoAccesoId INT

	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME,
		 @Perfil_Ident INT

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	SET @City_Ident = IIF(@City_Ident=0, -1, @City_Ident)


	SELECT *
	FROM [app620].[CatPerfilEmpleados] 
	WHERE [NombrePerfilEmpleados] = @NombrePerfilEmpleados


	IF NOT EXISTS	
			(
				SELECT 1
				FROM [app620].[CatPerfilEmpleados] 
				WHERE [NombrePerfilEmpleados] = @NombrePerfilEmpleados
			)

		BEGIN
			DECLARE @inserted TABLE (
				[Perfil_Ident] [int]
			)

			INSERT INTO [app620].[CatPerfilEmpleados]
			   (
					[NombrePerfilEmpleados]
				   ,[Country_Ident]
				   ,[City_Ident]
				   ,[Location_Ident]
				   ,[Client_Ident]
				   ,[Program_Ident]
				   ,[Contract_Type_Ident]
				   ,ConceptoId 
				   ,TipoAccesoId 

				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		OUTPUT Inserted.Perfil_Ident INTO @inserted
		 VALUES
				(
					 @NombrePerfilEmpleados
					,@Country_Ident
					,@City_Ident
					,@Location_Ident
					,@Client_Ident
					,@Program_Ident
					,@Contract_Type_Ident
					,NULL --@ConceptoId
					,@TipoAccesoId

					,@UserEmployeeId 
					,@UserEmployeeId 
				)

		SELECT	TOP 1 @Perfil_Ident = Perfil_Ident
		FROM @inserted;
		
		--Se insertan todos los registros de relación en CatPerfilesConceptos
		INSERT INTO app620.RelPerfilEmpleadosConceptos 
		SELECT @Perfil_Ident Perfil_Ident, Con.item ConceptoId
		FROM fnSplit(@ConceptoId,',') Con
		
		--DECLARE @script VARCHAR(200) = 'INSERT INTO app620.RelPerfilEmpleadosConceptos SELECT ' + CONVERT(VARCHAR(50),@Perfil_Ident) + ', ConceptoId FROM app620.CatConceptos WHERE	ConceptoId IN (' + @ConceptoId + ')'

		--exec(@script)


		END		
	ELSE
		SET @Estatus = -1

END
GO
PRINT N'Creating [app620].[CatPerfilEmpleadosSu]...';


GO

CREATE PROCEDURE [app620].[CatPerfilEmpleadosSu]
	 @Perfil_Ident INT
	,@NombrePerfilEmpleados VARCHAR (50)

	,@Country_Ident INT = -1
	,@City_Ident INT = -1
	,@Location_Ident INT = -1
	,@Client_Ident INT = -1
	,@Program_Ident INT = -1
	,@Contract_Type_Ident INT = -1
	,@ConceptoId VARCHAR(1500)		--INT = -1
	,@TipoAccesoId INT = 1

	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
	- 0 = Proceso sin error
	- -1 = Ya existe un registro con la misma descripción
	*/
	
	SET @FechaActual = GETDATE();

	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatPerfilEmpleados] 
						WHERE [Perfil_Ident] = @Perfil_Ident
					)
	AND NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatPerfilEmpleados] 
						WHERE	Perfil_Ident			<> @Perfil_Ident 
						AND		NombrePerfilEmpleados	= @NombrePerfilEmpleados
					)
		BEGIN
			UPDATE [app620].[CatPerfilEmpleados]
			SET 
				 [NombrePerfilEmpleados]	= @NombrePerfilEmpleados

				,[Country_Ident]			= @Country_Ident
				,[City_Ident]				= @City_Ident
				,[Location_Ident]			= @Location_Ident
				,[Client_Ident]				= @Client_Ident
				,[Program_Ident]			= @Program_Ident
				,[Contract_Type_Ident]		= @Contract_Type_Ident
				--,[ConceptoId]				= @ConceptoId
				,[TipoAccesoId]				= @TipoAccesoId

				,[Active]					= @Active
				,LastModifiedBy				= @UserEmployeeId
				,LastModifiedDate			= @FechaActual

				,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName		= HOST_NAME()
			WHERE
				Perfil_Ident				= @Perfil_Ident

		--Se insertan todos los registros de relación en RelPerfilEmpleadosConceptos
		INSERT INTO app620.RelPerfilEmpleadosConceptos 
		SELECT @Perfil_Ident Perfil_Ident, Con.item ConceptoId
		FROM fnSplit(@ConceptoId,',') Con
		WHERE Con.item NOT IN (
			SELECT Con.item 
			FROM
				 RelPerfilEmpleadosConceptos RPEC
				,fnSplit(@ConceptoId,',') Con
			WHERE RPEC.Perfil_Ident = @Perfil_Ident
			AND RPEC.ConceptoId = Con.item
		)

		--Se desactivan todos los registros de relación en CatPerfilesConceptos
		DELETE app620.RelPerfilEmpleadosConceptos
		WHERE ConceptoId NOT IN (SELECT Con.item ConceptoId FROM fnSplit(@ConceptoId,',') Con)
		AND Perfil_Ident = @Perfil_Ident

		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatPerfilTipoAccesoSel]...';


GO

CREATE PROC [app620].[CatPerfilTipoAccesoSel]
	@Perfil_Ident INT = 0 
AS
BEGIN

	SET @Perfil_Ident = ISNULL(@Perfil_Ident, 0)

	SELECT
		 [Perfil_Ident]
		,[NombrePerfilEmpleados]
		,Perfil.TipoAccesoId
		,TA.Descripcion
		,Perfil.Active
	FROM
		[app620].[CatPerfilEmpleados] Perfil
	JOIN
		[app620].[CatTiposAcceso] TA
	ON
		TA.TipoAccesoId = Perfil.TipoAccesoId

		-- [TipoAccesoId] Ident
		--,[Descripcion] Valor
	--FROM [app620].[CatTiposAcceso]


	WHERE (Perfil.Perfil_Ident =@Perfil_Ident OR @Perfil_Ident = 0)
END
GO
PRINT N'Creating [app620].[CatPeriodicidadNominaAnioMesConsecutivoCMB]...';


GO

CREATE PROC [app620].[CatPeriodicidadNominaAnioMesConsecutivoCMB]
@anioId INT,
@mesId VARCHAR(10),
@PeriodicidadNomina VARCHAR(5)
AS
BEGIN
IF @PeriodicidadNomina IS NULL 
BEGIN
	SELECT DISTINCT
		 a.ConsecutivoId AS Ident
		,a.ConsecutivoId AS Valor
	FROM [app620].[CatConsecutivoPeriodos]  a
	INNER JOIN [app620].[CatConsecutivoPeriodicidad] b on a.ConsecutivoId = b.ConsecutivoId
	WHERE a.Active = 1
		AND b.Active =1
END
ELSE
BEGIN
	SELECT DISTINCT
		 a.ConsecutivoId AS Ident
		,a.ConsecutivoId AS Valor
	FROM [app620].[CatConsecutivoPeriodos]  a
	INNER JOIN [app620].[CatConsecutivoPeriodicidad] b on a.ConsecutivoId = b.ConsecutivoId
	WHERE a.Active = 1
		AND b.Active =1
		AND a.AnioId=@anioId
		AND a.MesId =@mesId
		AND a.PeriodicidadNominaId = @PeriodicidadNomina
		END

END
GO
PRINT N'Creating [app620].[CatPeriodicidadNominaCMB]...';


GO


CREATE PROC [app620].[CatPeriodicidadNominaCMB]
AS
BEGIN
	SELECT DISTINCT
		 [PeriodicidadNominaId] As Ident
		,[Descripcion] As Valor
	FROM [app620].[CatPeriodicidadNomina]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatPeriodicidadNominaSel]...';


GO


CREATE PROC [app620].[CatPeriodicidadNominaSel]
AS
BEGIN
	SELECT
		 [PeriodicidadNominaId]
		,[Descripcion]
		,Consecutivos
		,[Active]
	FROM [app620].[CatPeriodicidadNomina]
END
GO
PRINT N'Creating [app620].[CatPeriodicidadNominaSi]...';


GO



CREATE PROC [app620].[CatPeriodicidadNominaSi]
	 @PeriodicidadNominaId VARCHAR(5)
	,@Descripcion VARCHAR(50)
	,@Consecutivos INT
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	
	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con la misma descripción
		-2 = Ya existe un registro con la misma clave
		-3 = Ya existe un registro con la misma clave y/o descripción
	*/
	
	IF EXISTS	(
					SELECT 1 
					FROM [app620].[CatPeriodicidadNomina] 
					WHERE Descripcion = @Descripcion 
				)
		SET @Estatus = @Estatus -1

	IF EXISTS	(
					SELECT 1 
					FROM [app620].[CatPeriodicidadNomina] 
					WHERE [PeriodicidadNominaId] = @PeriodicidadNominaId 
				)
		SET @Estatus = @Estatus -2

	IF @Estatus = 0
		BEGIN
			INSERT INTO [app620].[CatPeriodicidadNomina]
			   (
					[PeriodicidadNominaId]
				   ,[Descripcion]
				   ,[Consecutivos]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @PeriodicidadNominaId 
					,@Descripcion
					,@Consecutivos
					,@UserEmployeeId 
					,@UserEmployeeId 
				)

			EXEC CargaPivote @Consecutivos

			INSERT INTO CatConsecutivoPeriodicidad
			(
				 [ConsecutivoId]
				,[PeriodicidadNominaId]
				,[CreatedBy]
				,[LastModifiedBy]
			)
			SELECT iVarChar, @PeriodicidadNominaId, @UserEmployeeId, @UserEmployeeId
			FROM Pivote
			WHERE i BETWEEN 1 AND @Consecutivos
		END

END
GO
PRINT N'Creating [app620].[CatPeriodicidadNominaSu]...';


GO

CREATE PROCEDURE [app620].[CatPeriodicidadNominaSu]
	 @PeriodicidadNominaId VARCHAR(5)
	,@Descripcion VARCHAR(50)
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS

BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con la misma descripción
	*/
	
	IF EXISTS		(
						SELECT 1 
						FROM [app620].[CatPeriodicidadNomina] 
						WHERE [PeriodicidadNominaId] = @PeriodicidadNominaId
					)
	AND NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatPeriodicidadNomina] 
						WHERE	PeriodicidadNominaId		<> @PeriodicidadNominaId 
						AND		Descripcion					= @Descripcion
					)
		BEGIN
			UPDATE [app620].[CatPeriodicidadNomina]
			SET 
				 [Descripcion]			= @Descripcion
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				[PeriodicidadNominaId] = @PeriodicidadNominaId

			UPDATE [app620].[CatConsecutivoPeriodicidad]
			SET
					[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()

			WHERE
				[PeriodicidadNominaId] = @PeriodicidadNominaId
		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatPeriodosNominaCerradosCMB]...';


GO

CREATE PROC [app620].[CatPeriodosNominaCerradosCMB]
	@Active INT = 1
AS
BEGIN

	SELECT @Active = ISNULL(@Active, 1)

	SELECT --TOP 1
	PeriodoNominaId Ident,
	CAST(AnioId AS VARCHAR(11)) + '_' + [ConsecutivoId] Valor 
	from [app620].[CatPeriodosNomina] 
	WHERE PeriodicidadNominaId = 'C' AND TipoPeriodo = 'O'
	AND convert(date,getdate()) > convert(date,FechaFin) 
	ORDER BY CreatedDate DESC
END
GO
PRINT N'Creating [app620].[CatPeriodosNominaCMB]...';


GO

CREATE PROC [app620].[CatPeriodosNominaCMB]
	@Active INT = 1
AS
BEGIN

	SELECT @Active = ISNULL(@Active, 1)

	SELECT --TOP 1
	PeriodoNominaId Ident,
	CAST(AnioId AS VARCHAR(11)) + '_' + [ConsecutivoId] Valor 
	from [app620].[CatPeriodosNomina]
	WHERE PeriodicidadNominaId = 'C' AND TipoPeriodo = 'O'
	AND convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin)
	ORDER BY CreatedDate DESC
END
GO
PRINT N'Creating [app620].[CatPeriodosNominaSel]...';


GO


CREATE PROC [app620].[CatPeriodosNominaSel]
AS
BEGIN
	SELECT
		 PN.[AnioId]
		,PN.[MesId]
		,PN.[PeriodicidadNominaId]
		,PN.[ConsecutivoId]
		,PN.[TipoPeriodo]
		,CP.TipoConsecutivoId
		,TC.Descripcion
		,CONVERT(date, PN.FechaInicio) FechaInicio
		,CONVERT(date, PN.[FechaFin]) FechaFin, CONVERT(date, GETDATE()) Actual
		,PN.[FechaCaptura]
		,PN.[FechaCierre]
		,PN.[CountryIdents]
		,PN.[NombrePeriodo]
		,PN.[Active]
		,(CASE 
			WHEN (CONVERT(date, PN.FechaInicio) <= CONVERT(date, GETDATE()) AND CONVERT(date, PN.FechaFin) >= CONVERT(date, GETDATE())) THEN 'En Curso' 
			WHEN (CONVERT(date, PN.FechaFin) < CONVERT(date, GETDATE())) THEN 'Cerrado'
			WHEN (CONVERT(date, PN.FechaInicio) > CONVERT(date, GETDATE())) THEN 'Futuro'  
			END) AS Estatus
	FROM [app620].[CatPeriodosNomina] PN
	JOIN [app620].[CatConsecutivoPeriodos] CP
		ON CP.AnioId					= PN.AnioId
		AND CP.MesId					= PN.MesId
		AND CP.PeriodicidadNominaId		= PN.PeriodicidadNominaId
		AND CP.ConsecutivoId			= PN.ConsecutivoId
	JOIN [app620].[CatTiposConsecutivo] TC
		ON TC.TipoConsecutivoId = CP.TipoConsecutivoId
END
GO
PRINT N'Creating [app620].[CatPeriodosNominaSi]...';


GO


CREATE PROC [app620].[CatPeriodosNominaSi]
	 @AnioId INT = 0
	,@MesId INT = 0
	,@PeriodicidadNominaId VARCHAR(5) = NULL
	,@Consecutivo VARCHAR(5) = NULL
	,@TipoPeriodo VARCHAR(5) = NULL


	,@FechaInicio DATETIME = NULL
	,@FechaFin DATETIME = NULL
	,@FechaCaptura DATETIME = NULL
	,@FechaCierre DATETIME = NULL
	,@CountryIdents VARCHAR(50) NULL
	,@NombrePeriodo VARCHAR(50) NULL
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	
	DECLARE
		 @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con los mismos parametros. 
		-2 = Ya existe un registro con el mismo nombre de periodo de nomina
	*/

	IF EXISTS	(
						SELECT 1
						FROM [app620].[CatPeriodosNomina] 
						WHERE
							AnioId					= @AnioId						
						AND	MesId					= @MesId						
						AND	[PeriodicidadNominaId]	= @PeriodicidadNominaId
						AND	[ConsecutivoId]			= @Consecutivo
						AND [TipoPeriodo]			= @TipoPeriodo
						)
						SET @Estatus = @Estatus -1

	IF EXISTS	(
						SELECT 1
						FROM [app620].[CatPeriodosNomina] 
						WHERE
							AnioId					= @AnioId						
						AND	MesId					= @MesId						
						AND	[PeriodicidadNominaId]	= @PeriodicidadNominaId
						AND	[ConsecutivoId]			= @Consecutivo
						AND [TipoPeriodo]			= @TipoPeriodo
						AND UPPER(NombrePeriodo)	= UPPER(@NombrePeriodo)
						)
						SET @Estatus = @Estatus -2

	IF @Estatus=0
	BEGIN
		INSERT INTO [app620].[CatPeriodosNomina]
		(
			 AnioId
			,MesId
			,[PeriodicidadNominaId]
			,[ConsecutivoId]
			,[TipoPeriodo]


			,FechaInicio
			,FechaFin
			,FechaCaptura
			,FechaCierre
			,CountryIdents
			,NombrePeriodo
			,CreatedBy
			,LastModifiedBy
		)
     VALUES
		(
			 @AnioId
			,@MesId
			,@PeriodicidadNominaId
			,@Consecutivo
			,@TipoPeriodo


			,@FechaInicio
			,@FechaFin
			,@FechaCaptura
			,@FechaCierre
			,@CountryIdents
			,@NombrePeriodo
			,@UserEmployeeId
			,@UserEmployeeId
		)
	END

END
GO
PRINT N'Creating [app620].[CatPeriodosNominaSu]...';


GO


CREATE PROC [app620].[CatPeriodosNominaSu]
	 @AnioId INT = 0
	,@MesId INT = 0
	,@PeriodicidadNominaId VARCHAR(5) = NULL
	,@Consecutivo VARCHAR(5) = NULL
	,@TipoPeriodo VARCHAR(5) = NULL
	
	,@FechaInicio VARCHAR(15)
	,@FechaFin VARCHAR(15)
	,@FechaCaptura VARCHAR(15)
	,@FechaCierre VARCHAR(15)
	,@CountryIdents VARCHAR(50) NULL
	,@NombrePeriodo VARCHAR(50) NULL
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE
		 @FechaActual DATETIME

	SET @FechaActual	= GETDATE();
	SET @Estatus		= ISNULL(@Estatus, 0)
	
	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con el mismo nombre de periodo de nomina
	*/

	IF EXISTS (
		SELECT 1
		FROM [app620].[CatPeriodosNomina] 
		WHERE  NombrePeriodo = @NombrePeriodo
	)
	AND NOT EXISTS(
		SELECT 1
		FROM [app620].[CatPeriodosNomina] 
		WHERE
				AnioId					= @AnioId
			AND MesId					= @MesId
			AND	PeriodicidadNominaId	= @PeriodicidadNominaId
			AND ConsecutivoId			= @Consecutivo
			AND TipoPeriodo				= @TipoPeriodo
			AND NombrePeriodo			= @NombrePeriodo
	)
		BEGIN
			SET @Estatus = @Estatus -1
		END
	ELSE
		BEGIN
			UPDATE [app620].[CatPeriodosNomina]
			SET
				 FechaInicio			= @FechaInicio
				,FechaFin				= @FechaFin
				,FechaCaptura			= @FechaCaptura
				,FechaCierre			= @FechaCierre
				,CountryIdents			= @CountryIdents
				,NombrePeriodo			= @NombrePeriodo

				,Active					= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=0,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=0,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE 
					PeriodicidadNominaId	= @PeriodicidadNominaId
				AND AnioId					= @AnioId
				AND MesId					= @MesId
				AND ConsecutivoId			= @Consecutivo
				AND TipoPeriodo				= @TipoPeriodo
		END
END
GO
PRINT N'Creating [app620].[CatProgramByClientCMB]...';


GO

CREATE PROC [app620].[CatProgramByClientCMB]
		@Country INT = NULL
		,@CityId INT = NULL
		,@SiteId INT = NULL
		,@ClientId INT = NULL
		--,@ProgramId INT = NULL
		--,@CrontactId INT = NULL
AS
BEGIN
	SET @ClientId = NULLIF(NULLIF(@ClientId,0),-1)
	SET @Country = NULLIF(NULLIF(@Country,0),-1)
	SET @CityId = NULLIF(NULLIF(@CityId,0),-1)
	SET @SiteId = NULLIF(NULLIF(@SiteId,0),-1)
	--SET @ProgramId = NULLIF(NULLIF(@ProgramId,0),-1)
	--SET @CrontactId = NULLIF(NULLIF(@CrontactId,0),-1)

	SELECT	DISTINCT
			[Program_Ident] As Id
			,[Program_Name] As Value
	FROM	app620.CatEmployeeCCMSVw Emp WITH(NOLOCK)
			JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LocBios WITH(NOLOCK) ON emp.Location_Ident = LocBios.location_ccms
	WHERE	Client_Ident = ISNULL(@ClientId,Client_Ident) AND
			Location_Ident = ISNULL(@SiteId,Location_Ident) AND 
			Emp.country_ident = ISNULL(@Country, Emp.country_ident) AND
			LocBios.location_bios = ISNULL(@CityId,LocBios.location_bios)
			--Program_Ident = ISNULL(@ProgramId,Program_Ident) AND
			--Contract_Type_Ident = ISNULL(@CrontactId,Contract_Type_Ident)
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatProgramCMB]...';


GO

CREATE PROC [app620].[CatProgramCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Program_Ident] As Id
		,[Program_Name] As Value
	FROM [app620].[CatProgramVw]
END
GO
PRINT N'Creating [app620].[CatProgramTodosCMB]...';


GO

CREATE PROC [app620].[CatProgramTodosCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Program_Ident] As Id
		,[Program_Name] As Value
	FROM [app620].[CatProgramVw]
	UNION
	SELECT
		 -1 AS Id
		,'- Todos -' AS Value
END
GO
PRINT N'Creating [app620].[CatRelUserRoleSel]...';


GO


-- =============================================
--*Objeto:				[CatRelUserRoleSel]
--*Autor:				Javier Raygoza
--*Fecha de creación:	Enero 09, 2017
--*Objetivo:			Obtiene los roles de un usuario por medio del CCMSID
--*Entrada:				NA
--*Salida:				NA
--*Precondiciones:		NA
--*Retorno:				NA
--*Revisiones:		
--*Movimiento - /XXX - Fecha del Movimiento 
-- [app620].[CatRelUserRoleSel] 844795
-- =============================================
CREATE PROC [app620].[CatRelUserRoleSel]
(
	@CCMSID int = 0
)
AS
BEGIN

	SELECT DISTINCT TA.Descripcion Role
	FROM app620.[CatEmployeeCCMSVw] Emp
	JOIN app620.CatPerfilEmpleadosAccesos PEA
	ON PEA.EmpleadoId = Emp.Ident
	JOIN app620.CatPerfilEmpleados PE
	ON PE.Perfil_Ident = PEA.Perfil_Ident
	JOIN app620.CatTiposAcceso TA
	ON TA.TipoAccesoId = PE.TipoAccesoId
	WHERE Emp.Ident = @CCMSID
	AND PEA.Active = 1
	AND PE.Active = 1

	UNION

	SELECT R.Role
	FROM app620.RelUserRole UR
	JOIN app620.CatRole R
	ON R.CatRoleId = UR.CatRoleId
	WHERE UR.UserCCMSId = @CCMSID
	AND R.Active = 1
	AND UR.Active = 1

END
GO
PRINT N'Creating [app620].[CatResponsabilidadesSel]...';


GO

CREATE PROC [app620].[CatResponsabilidadesSel]
	 @FolioSolicitud INT = 0
	,@Responsable_Ident	INT = 0
AS
BEGIN

	SET @FolioSolicitud = ISNULL(@FolioSolicitud, 0)

	DECLARE @Temp TABLE(
		 FolioSolicitud		INT NULL
		,Empleado_Ident		INT NULL
		,ConceptoId			INT NULL
		,NivelAutorizacion	INT NULL
		,Autorizador_Ident	INT NULL
	)

	SELECT DISTINCT
		 Sol.[FolioSolicitud]
		,Sol.Solicitante_Ident
		,EMP.Ident
		,EMP.Nombre
		,Con.ConceptoId
		,Con.Descripcion ConceptoDesc
		--,CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' +  Par.Descripcion Monto
		,CASE WHEN Par.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
			   ELSE CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' + Par.Descripcion 
		  END AS Monto
		,CMS.MotivosSolicitudId
		,CMS.Descripcion MotivosSolicitudDesc
		,ISNULL(ConMot.ConceptoMotivoId, -1) ConceptoMotivoId
		,ConMot.Descripcion ConceptoMotivoDesc
		,ISNULL(SED.ResponsableId, 0) ResponsableId
		,EMP2.Nombre NombreResponsable
		,ISNULL(SED.PeriodoOriginalId, -1) PeriodoOriginalId
		,ES.EstatusSolicitudId EstatusId
		,ES.Descripcion EstatusSolicitud
		--,SEA.NivelAutorizacion
		,EmpSol.Active

	FROM
		app620.CatSolicitudes Sol

	JOIN [app620].[CatEmpleadosSolicitudes] EmpSol 
		ON EmpSol.FolioSolicitud = Sol.FolioSolicitud
	    AND Sol.FolioSolicitud = @FolioSolicitud
	    --AND Sol.FolioSolicitud = 9
		AND Sol.Active = 1
		AND EmpSol.Active = 1

	JOIN app620.CatEstatusSolicitudes ES
		ON ES.EstatusSolicitudId = EmpSol.EstatusSolicitudId

	JOIN app620.CatEmployeeCCMSVw EMP 
		--ON EMP.Ident = Sol.Solicitante_Ident
		ON EMP.Ident = EmpSol.Empleado_Ident

	JOIN app620.CatConceptos Con
		ON Con.ConceptoId = EmpSol.ConceptoId

	JOIN app620.CatParametroConceptos Par
		ON Par.[ParametroConceptoId] = Con.ParametroConceptoId

    LEFT JOIN app620.CatMotivosSolicitud CMS 
		ON CMS.MotivosSolicitudId = EmpSol.MotivosSolicitudId

	LEFT JOIN app620.CatSolicitudEmpleadosDetalle SED
		ON SED.FolioSolicitud		= Empsol.FolioSolicitud
		AND SED.[Empleado_Ident]	= Empsol.[Empleado_Ident]
		AND SED.[ConceptoId]		= Empsol.[ConceptoId]
		AND SED.Active = 1

	LEFT JOIN app620.CatEmployeeCCMSVw EMP2 
		ON EMP2.Ident = SED.ResponsableId
		
	LEFT JOIN app620.CatConceptosMotivos ConMot
		ON ConMot.ConceptoMotivoId = SED.ConceptoMotivoId

	JOIN app620.CatPerfilEmpleadosAccesos PEAR
		ON
			PEAR.EmpleadoId		= @Responsable_Ident
			--PEAR.EmpleadoId		= 656654

	JOIN app620.CatPerfilEmpleados PER
		ON 
			PER.Perfil_Ident	= PEAR.Perfil_Ident
		AND 
			PER.TipoAccesoId	= 3 
	JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = EMP.country_ident

END
GO
PRINT N'Creating [app620].[CatRoleCMB]...';


GO

CREATE PROC [app620].[CatRoleCMB]
AS
BEGIN
	SELECT
	CatRoleId As Id,
	[Role] As Valor
	FROM [app620].[CatRole]
END
GO
PRINT N'Creating [app620].[CatSiteCMB]...';


GO
CREATE PROC [app620].[CatSiteCMB]
AS
BEGIN
	SELECT DISTINCT
		 [Location_Ident] As Id
		,[location_Name] As Value
	FROM [app620].[CatEmployeeCCMSVw]
	ORDER BY [Location_Name]
END
GO
PRINT N'Creating [app620].[CatSolicitudAutorizantesSel]...';


GO



/*
	Consulta los autorizadores por solicitud, Concepto y Empleado

 */

CREATE PROCEDURE [app620].[CatSolicitudAutorizantesSel]
	@FolioSolicitud		INT
	,@ConceptoId		INT
	,@Empleado_Ident	INT
AS

BEGIN
SELECT FolioSolicitud
		,Empleado_Ident	
		,ConceptoId		
		,NivelAutorizacion
		,Autorizador_Ident
	FROM app620.CatSolicitudEmpleadosAutorizantes 
	where FolioSolicitud = @FolioSolicitud	--16
	and ConceptoId = @ConceptoId			--9
	and Empleado_Ident = @Empleado_Ident	--3235579
	and Autorizador_Ident IS NOT NULL
END
GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosAutorizantesSel]...';


GO
/*******************************************************************************/
/* Autor: Michell Cuni													 *******/
/* Descripción: Sp que retorna todos los Empleados con sus autorizadores. ******/
/*			Se utiliza para el llenado del grid del ultimo paso de solicitudes */
/*******************************************************************************/
CREATE PROC [app620].[CatSolicitudEmpleadosAutorizantesSel]
@FolioSolicitud INT
AS
BEGIN
	SELECT DISTINCT CSED.[FolioSolicitud]
      ,CSED.[Empleado_Ident]
      ,CSEA.[Autorizador_Ident]
	  ,CEVWEM.Nombre AS NombreEmpleado
	  ,CONCAT(CAST(CEVWRES.Ident AS VARCHAR(10)),' - ',CEVWRES.Nombre, ' - ', CEVWRES.Position_Code_Title) AS NombreAutorizador
      ,CSEA.[NivelAutorizacion]
      ,(CASE
			WHEN CSEA.[Obligatorio] = 1 THEN 'Si' ELSE 'No' END) AS EsObligatorio
	  ,CSEA.[Obligatorio]
      ,CSEA.[MontoAutorizacionAutomatica]
	  ,(CASE
			WHEN CSEA.[Autorizado] = 1 THEN 'AUTORIZADO'
			WHEN CSEA.[Rechazado] = 1 THEN 'RECHAZADO'
			WHEN CSEA.[Cancelado] = 1 THEN 'CANCELADO'
			END
	  ) AS Estatus
	  ,CEVWEM.Contract_Type AS Contrato
	  ,CEVWRES.email1 AS EmailManager
      ,CSEA.[Autorizado]
      ,CSEA.[Rechazado]
      ,CSEA.[Cancelado]
	  ,CS.[Perfil_Ident] AS Perfil
      ,CSEA.[Active]
  FROM [app620].CatEmpleadosSolicitudes CSED
  JOIN [app620].[CatSolicitudes] CS ON CS.FolioSolicitud = CSED.FolioSolicitud
  LEFT JOIN  [app620].[CatSolicitudEmpleadosAutorizantes] CSEA ON CSEA.Empleado_Ident = CSED.Empleado_Ident
  LEFT JOIN [app620].[CatEmployeeCCMSVw] CEVWEM on CEVWEM.Ident = CSED.Empleado_Ident
  LEFT JOIN [app620].[CatEmployeeCCMSVw] CEVWRES on CEVWRES.Ident = CSEA.Autorizador_Ident
  WHERE CSED.FolioSolicitud = @FolioSolicitud AND CSED.Active=1
END
GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosAutorizantesSI]...';


GO


CREATE PROC [app620].[CatSolicitudEmpleadosAutorizantesSI]
@FolioSolicitud INT = 0
,@Empleado_Ident INT = 0
,@Autorizador_Ident INT = 0
,@NivelAutorizacion INT =0
,@Obligatorio BIT
,@MontoAutorizacionAutomatica DECIMAL(18,2)
,@Accion INT = 0
,@TTAutorizador_Ident BIT
,@TTNivelAutorizacion BIT
,@TTMontoAutorizacionAutomatica BIT
,@Active BIT
,@UserEmployeeId INT
,@Estatus INT = 0 OUTPUT
AS
BEGIN

IF EXISTS(SELECT 1 FROM app620.CatSolicitudEmpleadosAutorizantes WHERE FolioSolicitud = @FolioSolicitud AND Empleado_Ident =@Empleado_Ident AND Autorizador_Ident =@Autorizador_Ident)
SET @Estatus =-1

IF(@Estatus =0)
BEGIN
INSERT INTO app620.CatSolicitudEmpleadosAutorizantes
(
	FolioSolicitud
    ,Empleado_Ident
    ,Autorizador_Ident
    ,NivelAutorizacion
    ,Obligatorio
    ,MontoAutorizacionAutomatica
    ,Autorizado
    ,Rechazado
    ,Cancelado
    ,Active
    ,CreatedBy
    ,CreatedDate
)VALUES
(
	@FolioSolicitud
    ,@Empleado_Ident
    ,@Autorizador_Ident
    ,@NivelAutorizacion
    ,@Obligatorio--Obligatorio
    ,@MontoAutorizacionAutomatica
    ,(CASE WHEN @Accion =2 THEN 1 ELSE 0 END)--Autorizado
    ,(CASE WHEN @Accion =3 THEN 1 ELSE 0 END)--Rechazado
    ,(CASE WHEN @Accion =4 THEN 1 ELSE 0 END)--Cancelado
    ,1
	,@UserEmployeeId
	,GETDATE()
)
END
ELSE IF @TTAutorizador_Ident =1 OR @TTNivelAutorizacion = 1 OR @TTMontoAutorizacionAutomatica =1
BEGIN
	IF @TTAutorizador_Ident = 1
	BEGIN

		DECLARE @TempEmpleadosSolicitud TABLE (Id INT IDENTITY(1, 1),idEmpleado INT)
		DECLARE @indiceBase int=1,@TotalRegistros int=0;
		SELECT @TotalRegistros=COUNT(*) FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @FolioSolicitud AND Active=1

		INSERT INTO @TempEmpleadosSolicitud (idEmpleado)
		SELECT Empleado_Ident FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @FolioSolicitud AND Active=1

		WHILE @indiceBase <= @TotalRegistros
			BEGIN

				DECLARE @CatEmpleado_Id INT = 0
				SELECT @CatEmpleado_Id= idEmpleado  FROM @TempEmpleadosSolicitud WHERE Id=@indiceBase

				IF NOT EXISTS(SELECT 1 FROM [app620].CatSolicitudEmpleadosAutorizantes WHERE FolioSolicitud = @FolioSolicitud AND Empleado_Ident = @CatEmpleado_Id)
				BEGIN
					INSERT INTO app620.CatSolicitudEmpleadosAutorizantes
						(
							FolioSolicitud
							,Empleado_Ident
							,Autorizador_Ident
							,NivelAutorizacion
							,Obligatorio
							,MontoAutorizacionAutomatica
							,Autorizado
							,Rechazado
							,Cancelado
							,Active
							,CreatedBy
							,CreatedDate
						)VALUES
						(
							@FolioSolicitud
							,@CatEmpleado_Id
							,@Autorizador_Ident
							,@NivelAutorizacion
							,@Obligatorio--Obligatorio
							,@MontoAutorizacionAutomatica
							,(CASE WHEN @Accion =2 THEN 1 ELSE 0 END)--Autorizado
							,(CASE WHEN @Accion =3 THEN 1 ELSE 0 END)--Rechazado
							,(CASE WHEN @Accion =4 THEN 1 ELSE 0 END)--Cancelado
							,1
							,@UserEmployeeId
							,GETDATE()
						)
				END
				ELSE
				BEGIN
					UPDATE app620.CatSolicitudEmpleadosAutorizantes 
					SET
					 Autorizador_Ident	= @Autorizador_Ident
					,LastModifiedBy		= @UserEmployeeId
					,LastModifiedDate	= GETDATE()
					WHERE
						FolioSolicitud = @FolioSolicitud AND Active = 1
				END

				SET @indiceBase= @indiceBase+1
			END

	END

	IF @TTNivelAutorizacion = 1
	BEGIN
		UPDATE app620.CatSolicitudEmpleadosAutorizantes
		SET
			NivelAutorizacion	= @NivelAutorizacion
			,LastModifiedBy		= @UserEmployeeId
			,LastModifiedDate	= GETDATE()
		WHERE
			FolioSolicitud = @FolioSolicitud AND Active = 1
	END

	IF @TTMontoAutorizacionAutomatica =1
	BEGIN
		UPDATE app620.CatSolicitudEmpleadosAutorizantes
		SET
			MontoAutorizacionAutomatica	= @MontoAutorizacionAutomatica
			,LastModifiedBy		= @UserEmployeeId
			,LastModifiedDate	= GETDATE()
		WHERE
			FolioSolicitud = @FolioSolicitud AND Active = 1
	END

END
ELSE
BEGIN
	UPDATE app620.CatSolicitudEmpleadosAutorizantes 
	SET
     Autorizador_Ident	= @Autorizador_Ident
    ,NivelAutorizacion	= @NivelAutorizacion
    ,Obligatorio		= @Obligatorio--Obligatorio
    ,MontoAutorizacionAutomatica = @MontoAutorizacionAutomatica
    ,Autorizado			= (CASE WHEN @Accion =2 THEN 1 ELSE 0 END)--Autorizado
    ,Rechazado			= (CASE WHEN @Accion =3 THEN 1 ELSE 0 END)--Rechazado
    ,Cancelado			= (CASE WHEN @Accion =4 THEN 1 ELSE 0 END)--Cancelado
    ,Active				= @Active
	,LastModifiedBy		= @UserEmployeeId
	,LastModifiedDate	= GETDATE()
	WHERE
		FolioSolicitud = @FolioSolicitud AND Empleado_Ident=@Empleado_Ident
END
END
GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosDetalleMasivoSi]...';


GO


CREATE PROC [app620].[CatSolicitudEmpleadosDetalleMasivoSi]
@SolicitudId INT
      ,@CatEmpleadoId INT
	  ,@Detalle VARCHAR(250)
	  ,@UserEmployeeId INT
	  ,@Estatus Varchar(Max) = '' OUTPUT
AS
BEGIN
	DECLARE @FechaActual DATETIME
	DECLARE @Perfil INT

	SELECT @Perfil= Perfil_Ident FROM [app620].[CatSolicitudes] WHERE FolioSolicitud = @SolicitudId

	SET @FechaActual = GETDATE();
	SET @Estatus = ISNULL(@Estatus, 0)

	IF EXISTS( SELECT 1 FROM [app620].CatSolicitudEmpleadosDetalle WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId)
	SET @Estatus = '-1_Existe un empleado con el mismo CCMID en la solicitud'

	
	IF NOT EXISTS( SELECT CPEA.Perfil_Ident, CS.Perfil_Ident FROM [app620].[CatSolicitudes] CS
	JOIN [app620].[CatPerfilEmpleadosAccesos] CPEA ON CPEA.Perfil_Ident = CS.Perfil_Ident
	  WHERE  CPEA.[EmpleadoId]=@CatEmpleadoId AND CPEA.Perfil_Ident = @Perfil)
	  SET @Estatus = '-2_No pertenece al perfil de la solicitud'


	IF @Estatus=''
	BEGIN
			DECLARE @Responsable INT=0
			SELECT @Responsable = Manager_Ident FROM [app620].[CatEmployeeCCMSVw] WHERE Ident = @CatEmpleadoId

		INSERT INTO [app620].[CatSolicitudEmpleadosDetalle]
		(
			FolioSolicitud
			  ,Empleado_Ident
			  ,ResponsableId		 
			  ,Active
			  ,CreatedBy
			  ,CreatedDate
			  ,LastModifiedBy  
		)
		VALUES
		(	@SolicitudId
			  ,@CatEmpleadoId
			  ,@Responsable
			  ,1
			  ,@UserEmployeeId
			  ,@FechaActual
			  ,@UserEmployeeId
		)
	END
END
GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosDetalleSi]...';


GO

CREATE PROC [app620].[CatSolicitudEmpleadosDetalleSi]
	 @SolicitudId INT
    ,@CatEmpleadoId INT
    ,@ConceptoMotivoId INT
	,@PeriodoNomina VARCHAR(100) = ''
	,@ReponsableId INT = 0
	,@Monto DECIMAL(18,2)=0
	,@Detalle VARCHAR(250)=''
	,@TTConceptoMotivoId BIT = 0
	,@TTManager_Ident BIT = 0
	,@TTMonto BIT = 0
	,@TTDetalle BIT = 0
	,@TTPeriodoNomina BIT = 0
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE @FechaActual DATETIME
	DECLARE @PeriodoOriginalId INT = 0

	SET @FechaActual = GETDATE();
	SET @Estatus = ISNULL(@Estatus, 0)

	--IF EXISTS( SELECT 1 FROM [app620].CatSolicitudEmpleadosDetalle WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId AND CatConceptoMotivoId=@CatConceptoMotivoId)
	--SET @Estatus = @Estatus -1

	IF(@PeriodoNomina <> '')
		SELECT @PeriodoOriginalId=PeriodoNominaId FROM app620.CatPeriodosNomina WHERE NombrePeriodo = @PeriodoNomina
		
	IF NOT EXISTS( SELECT 1 FROM [app620].CatSolicitudEmpleadosDetalle WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId AND ConceptoMotivoId=@ConceptoMotivoId)--@Estatus=0
		BEGIN
				DECLARE @Responsable INT=0
				SELECT @Responsable = Manager_Ident 
				FROM [app620].[CatEmployeeCCMSVw] 
				WHERE Ident = @CatEmpleadoId

			INSERT INTO [app620].[CatSolicitudEmpleadosDetalle]
			(
				FolioSolicitud
				  ,Empleado_Ident
				  ,ConceptoMotivoId	
				  ,ResponsableId
				  ,PeriodoOriginalId
				  ,Active
				  ,CreatedBy
				  ,CreatedDate
				  ,LastModifiedBy  
			)
			VALUES
			(	@SolicitudId
				  ,@CatEmpleadoId
				  ,@ConceptoMotivoId
				  ,@Responsable
				  ,@PeriodoOriginalId
				  ,1
				  ,@UserEmployeeId
				  ,@FechaActual
				  ,@UserEmployeeId
			)
		END
	ELSE
		BEGIN
			--UPDATE [app620].CatSolicitudEmpleadosDetalle SET Active=1 WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId AND CatConceptoMotivoId=@CatConceptoMotivoId
			UPDATE [app620].CatSolicitudEmpleadosDetalle 
			SET Active=1, PeriodoOriginalId = @PeriodoOriginalId
			WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId AND ConceptoMotivoId=@ConceptoMotivoId
		END

	IF @ReponsableId <> 0 OR @TTConceptoMotivoId = 1 OR @TTManager_Ident = 1 OR @TTDetalle =1 OR @TTMonto = 1 OR @TTPeriodoNomina = 1
		BEGIN 
			-- Si encuentra que esta seleccionado el check de todo de ConceptoMotivo
			-- Consultar todos los empleados de la tabla solicitudes que esten activos y validar si existen en LA TABLA CatSolicitudEmpleadosDetalle
			-- Realiza un insert y asignarle el concepto o un update seguin sea el caso
			IF @TTConceptoMotivoId = 1
				BEGIN

				DECLARE @TempEmpleadosSolicitud TABLE (Id INT IDENTITY(1, 1),idEmpleado INT)
				DECLARE @indiceBase int=1,@TotalRegistros int=0;
				SELECT @TotalRegistros=COUNT(*) FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @SolicitudId AND Active=1

				INSERT INTO @TempEmpleadosSolicitud (idEmpleado)
				SELECT Empleado_Ident FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @SolicitudId AND Active=1

					WHILE 	@indiceBase <= @TotalRegistros
					BEGIN

						DECLARE @CatEmpleado_Id INT = 0

						SELECT @CatEmpleado_Id= idEmpleado  FROM @TempEmpleadosSolicitud WHERE Id=@indiceBase

						IF NOT EXISTS(SELECT 1 FROM [app620].[CatSolicitudEmpleadosDetalle] WHERE FolioSolicitud = @SolicitudId AND Empleado_Ident = @CatEmpleado_Id)
						BEGIN
							DECLARE @Responsable_Id INT=0

							SELECT @Responsable_Id = Manager_Ident FROM [app620].[CatEmployeeCCMSVw] WHERE Ident = @CatEmpleado_Id

							INSERT INTO [app620].[CatSolicitudEmpleadosDetalle]
							(
								FolioSolicitud
								  ,Empleado_Ident
								  ,ConceptoMotivoId	
								  ,ResponsableId
								  ,PeriodoOriginalId
								  ,Active
								  ,CreatedBy
								  ,CreatedDate
								  ,LastModifiedBy  
							)
							VALUES
							(	@SolicitudId
								  ,@CatEmpleado_Id
								  ,@ConceptoMotivoId
								  ,@Responsable_Id
								  ,@PeriodoOriginalId
								  ,1
								  ,@UserEmployeeId
								  ,@FechaActual
								  ,@UserEmployeeId
							)
						END
						ELSE
						BEGIN
							UPDATE [app620].[CatSolicitudEmpleadosDetalle]
							SET
								 ConceptoMotivoId		= @ConceptoMotivoId
								,Active					= 1
								,LastModifiedBy			= @UserEmployeeId
								,LastModifiedDate		= @FechaActual
								,DeactivatedBy			= @UserEmployeeId --IIF(@Active=0,NULL,@UserEmployeeId)
								,DeactivatedDate		= @FechaActual --IIF(@Active=0,NULL,@FechaActual)
								,LastModifiedFromPCName	= HOST_NAME()
							WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident = @CatEmpleado_Id
						END

						SET @indiceBase= @indiceBase+1
					END
				END

			IF @ReponsableId <> 0
				BEGIN
					DECLARE @Empleado_Ident INT,
						@Empleado_First_Name VARCHAR(100),
						@Empleado_Middle_Name VARCHAR(100),
						@Empleado_Last_Name VARCHAR(100),
						@Empleado_Position_Code_Ident INT,
						@Empleado_Position_Code_Title VARCHAR(100),
						@Empleado_Contract_Type_Ident INT,
						@Empleado_Contract_Type VARCHAR(100)

					SELECT 
						@Empleado_Ident = Ident,
						@Empleado_First_Name = First_Name,
						@Empleado_Middle_Name = Middle_Name,
						@Empleado_Last_Name = Last_Name,
						@Empleado_Position_Code_Ident = Position_Code_Ident,
						@Empleado_Position_Code_Title = Position_Code_Title,
						@Empleado_Contract_Type_Ident = Contract_Type_Ident,
						@Empleado_Contract_Type = Contract_Type
					FROM [app620].[CatEmployeeCCMSVw] WHERE Ident = @ReponsableId

					UPDATE [app620].[CatEmpleadosSolicitudes] 
					SET
						 ParametroConceptoMonto =@Monto--, Detalle = @Detalle 
						--,[Manager_Ident] = @Empleado_Ident
						--,[Manager_First_Name] = @Empleado_First_Name
						--,[Manager_Middle_Name] = @Empleado_Middle_Name
						--,[Manager_Last_Name] = @Empleado_Last_Name
						--,[Manager_Position_Code_Ident] = @Empleado_Position_Code_Ident
						--,[Manager_Position_Code_Title] = @Empleado_Position_Code_Title
						--,[Manager_Contract_Type_Ident] = @Empleado_Contract_Type_Ident
						--,[Manager_Contract_Type] = @Empleado_Contract_Type
					WHERE FolioSolicitud =@SolicitudId AND Empleado_Ident = @CatEmpleadoId
				END

			IF @TTManager_Ident = 1
				BEGIN
				UPDATE [app620].[CatSolicitudEmpleadosDetalle]
				SET
					ResponsableId			= @ReponsableId
					,LastModifiedBy			= @UserEmployeeId
					,LastModifiedDate		= @FechaActual
					,DeactivatedBy			= @UserEmployeeId--IIF(@Active=0,NULL,@UserEmployeeId)
					,DeactivatedDate		= @FechaActual --IIF(@Active=0,NULL,@FechaActual)
					,LastModifiedFromPCName	= HOST_NAME()
					WHERE FolioSolicitud=@SolicitudId AND Active =1
				END

			--IF @TTDetalle =1
			--	BEGIN
			--		UPDATE [app620].[CatEmpleadosSolicitudes]
			--		SET Detalle =  @Detalle
			--		WHERE FolioSolicitud=@SolicitudId AND Active =1
			--	END

			IF @TTMonto = 1
				BEGIN
					UPDATE [app620].[CatEmpleadosSolicitudes]
					SET ParametroConceptoMonto =  @Monto
					WHERE FolioSolicitud=@SolicitudId AND Active =1
				END

			IF @TTPeriodoNomina = 1
				BEGIN

					DECLARE
						@PeriodoOriginalAnio_Id INT
						,@PeriodoOriginalMes_Id INT
						,@PeriodoOriginalConsecutivoid VARCHAR(5)
						,@PeriodoOriginalPeriodicidadNomina_Id VARCHAR(5)
						,@PeriodoOriginalTipoPeriodo_Id VARCHAR(5) 
	  
					SELECT
						 @PeriodoOriginalAnio_Id = AnioId
						,@PeriodoOriginalMes_Id = MesId
						,@PeriodoOriginalConsecutivoid = ConsecutivoId
						,@PeriodoOriginalPeriodicidadNomina_Id = PeriodicidadNominaId
						,@PeriodoOriginalTipoPeriodo_Id = TipoPeriodo
					FROM [app620].[CatPeriodosNomina] WHERE NombrePeriodo = @PeriodoNomina
	  
					UPDATE [app620].[CatSolicitudEmpleadosDetalle]
					SET
						 PeriodoOriginalId						= @PeriodoOriginalId
						,LastModifiedBy							= @UserEmployeeId
						,LastModifiedDate						= @FechaActual
						,DeactivatedBy							= @UserEmployeeId --IIF(@Active=0,NULL,@UserEmployeeId)
						,DeactivatedDate						= @FechaActual --IIF(@Active=0,NULL,@FechaActual)
						,LastModifiedFromPCName					= HOST_NAME()
					WHERE FolioSolicitud=@SolicitudId AND Active=1
				 END
		END
END
GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosDetalleSu]...';


GO


CREATE PROC [app620].[CatSolicitudEmpleadosDetalleSu]
	 @SolicitudId INT
    ,@CatEmpleadoId INT
    ,@ConceptoMotivoId VARCHAR(50) = NULL
    ,@ResponsableId INT = NULL
    ,@PeriodoNomina VARCHAR(50)
	,@Active BIT
	,@TTConceptoMotivoId BIT
	,@TTManager_Ident BIT
	,@TTMonto BIT
	,@TTDetalle BIT
	,@TTPeriodoNomina BIT
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	DECLARE @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	SET @Estatus = ISNULL(@Estatus, 0)

	IF NOT EXISTS( SELECT 1 FROM [app620].CatSolicitudEmpleadosDetalle WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId)
	SET @Estatus = @Estatus -1

	IF @Estatus=0
	BEGIN
		UPDATE [app620].[CatSolicitudEmpleadosDetalle]
		SET
			 ConceptoMotivoId		= @ConceptoMotivoId
			,ResponsableId			= @ResponsableId
			,Active					= @Active
			,LastModifiedBy			= @UserEmployeeId
			,LastModifiedDate		= @FechaActual
			,DeactivatedBy			= IIF(@Active=0,NULL,@UserEmployeeId)
			,DeactivatedDate		= IIF(@Active=0,NULL,@FechaActual)
			,LastModifiedFromPCName	= HOST_NAME()
		WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId

		IF @TTConceptoMotivoId = 1
		BEGIN
			UPDATE [app620].[CatSolicitudEmpleadosDetalle]
			SET
				 ConceptoMotivoId		= @ConceptoMotivoId				
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual
				,DeactivatedBy			= IIF(@Active=0,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=0,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE FolioSolicitud=@SolicitudId AND Active =1

		END
		
		IF @TTManager_Ident = 1
		BEGIN
			UPDATE [app620].[CatSolicitudEmpleadosDetalle]
			SET
				ResponsableId			= @ResponsableId
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual
				,DeactivatedBy			= IIF(@Active=0,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=0,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE FolioSolicitud=@SolicitudId AND Active =1
		END

	  
	 -- IF @TTPeriodoNomina = 1
	 -- BEGIN
		--UPDATE [app620].[CatSolicitudEmpleadosDetalle]
		--SET
		--	,LastModifiedBy			= @UserEmployeeId
		--	,LastModifiedDate		= @FechaActual
		--	,DeactivatedBy			= IIF(@Active=0,NULL,@UserEmployeeId)
		--	,DeactivatedDate		= IIF(@Active=0,NULL,@FechaActual)
		--	,LastModifiedFromPCName	= HOST_NAME()
		--WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@CatEmpleadoId
	 -- END

	END
END
GO
PRINT N'Creating [app620].[CatSolicitudesArchivosSi]...';


GO


CREATE PROC [app620].[CatSolicitudesArchivosSi]
	 @FolioSolicitud INT
      ,@NombreArchivo VARCHAR(85) = NULL
	  ,@UserEmployeeId INT
	  ,@Estatus VARCHAR(10) = '0' OUTPUT
AS
BEGIN
	
	DECLARE @FechaActual VARCHAR(15)
	SET @FechaActual = format(getdate(),'yyyyMMddHHmmss')


	IF EXISTS	(
						SELECT 1
						FROM app620.CatSolicitudesArchivos
						WHERE					
							NombreArchivo	= CONCAT(@NombreArchivo,@FechaActual)
						)
						SET @Estatus = '-1'


	IF @Estatus='0'
	BEGIN
	
		INSERT INTO [app620].[CatSolicitudesArchivos]
		(
			FolioSolicitud
			,NombreArchivo
			,Active
			,CreatedBy
			,LastModifiedBy
		)
     VALUES
		(
			@FolioSolicitud
			,@NombreArchivo
			,1
			,@UserEmployeeId
			,@UserEmployeeId
		)
	END
END
GO
PRINT N'Creating [app620].[CatSolicitudesSel]...';


GO
CREATE PROC [app620].[CatSolicitudesSel]
	@FolioSolicitud INT = 0
AS
BEGIN

	SET @FolioSolicitud = ISNULL(@FolioSolicitud, 0)

	--DECLARE @Temp TABLE(
	--	 FolioSolicitud		INT NULL
	--	,Empleado_Ident		INT NULL
	--	,ConceptoId			INT NULL
	--	,NivelAutorizacion	INT NULL
	--	,Autorizador_Ident	INT NULL
	--)

	--INSERT INTO @Temp
	--SELECT FolioSolicitud
	--	,Empleado_Ident	
	--	,ConceptoId		
	--	,NivelAutorizacion
	--	,Autorizador_Ident
	--FROM app620.CatSolicitudEmpleadosAutorizantes 
	--where FolioSolicitud = @FolioSolicitud

	DECLARE @TempAutorizantes AS TABLE (FolioSolicitud INT,Empleado_Ident INT, ConceptoId INT, Autorizador_Ident INT,Pendiente BIT, Autorizado BIT, Rechazado BIT, Cancelado BIT)

	INSERT	INTO @TempAutorizantes(FolioSolicitud,Empleado_Ident,ConceptoId,Autorizador_Ident,Pendiente,Autorizado,Rechazado,Cancelado)
	SELECT	FolioSolicitud,Empleado_Ident,ConceptoId,Autorizador_Ident,Pendiente,Autorizado,Rechazado,Cancelado
	FROM	[app620].[CatSolicitudEmpleadosAutorizantes]
	WHERE	FolioSolicitud = @FolioSolicitud
			AND Autorizador_Ident IS NOT NULL
			AND (Pendiente = 1 OR Rechazado = 1 OR Cancelado = 1)


	SELECT
		 Sol.[FolioSolicitud]
		,EMP.Ident
		,EMP.Nombre
		,Con.ConceptoId
		,Con.Descripcion ConceptoDesc
		--,CONVERT(VARCHAR(22), ParametroConceptoMonto) As Monto + ' ' +  Par.Descripcion Monto
		,CASE WHEN Par.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
			ELSE CONVERT(VARCHAR(22), EmpSol.ParametroConceptoMonto) + ' ' + Par.Descripcion 
		END AS Monto
		,CMS.MotivosSolicitudId
		,CMS.Descripcion MotivosSolicitudDesc
		,ISNULL(ConMot.ConceptoMotivoId, -1) ConceptoMotivoId
		--,ConMot.ConceptoMotivoId
		,ConMot.Descripcion ConceptoMotivoDesc
		,ISNULL(SED.ResponsableId, 0) ResponsableId
		--,SED.ResponsableId
		,EMP2.Nombre NombreResponsable
		,ISNULL(SED.PeriodoOriginalId, -1) PeriodoOriginalId
		,SED.PeriodoOriginalId
		,ES.EstatusSolicitudId EstatusId
		,ES.Descripcion EstatusSolicitud
		,EmpSol.Active
		,SEA.Autorizador_Ident
		,AUT.Nombre Autorizador		
	FROM [app620].[CatSolicitudes] Sol

	JOIN [app620].[CatEmpleadosSolicitudes] EmpSol 
		ON empSol.FolioSolicitud = sol.FolioSolicitud

	JOIN app620.CatEstatusSolicitudes ES
		ON ES.EstatusSolicitudId = EmpSol.EstatusSolicitudId

	JOIN app620.CatEmployeeCCMSVw EMP 
		ON EMP.Ident = EmpSol.[Empleado_Ident]

	JOIN [app620].[CatConceptos] Con
		ON Con.ConceptoId = EmpSol.ConceptoId

	JOIN app620.CatParametroConceptos Par
		ON Par.[ParametroConceptoId] = Con.ParametroConceptoId

    LEFT JOIN [app620].[CatMotivosSolicitud] CMS 
		ON CMS.MotivosSolicitudId = EmpSol.MotivosSolicitudId

	LEFT JOIN [app620].[CatSolicitudEmpleadosDetalle] SED
		ON SED.FolioSolicitud = Empsol.FolioSolicitud
		AND SED.[Empleado_Ident] = Empsol.[Empleado_Ident]
		AND SED.[ConceptoId] = Empsol.[ConceptoId]
		AND SED.Active = 1

	LEFT JOIN app620.CatEmployeeCCMSVw EMP2 
		ON EMP2.Ident = SED.ResponsableId

	LEFT JOIN [app620].[CatConceptosMotivos] ConMot
		ON ConMot.ConceptoMotivoId = SED.ConceptoMotivoId

	LEFT JOIN @TempAutorizantes SEA 
		ON	SEA.FolioSolicitud = Sol.FolioSolicitud 
		AND SEA.Empleado_Ident	= EmpSol.Empleado_Ident
			AND Con.ConceptoId = SEA.ConceptoId

	LEFT JOIN [app620].[CatEmployeeCCMSVw] AUT 
		ON	AUT.Ident = SEA.Autorizador_Ident

		JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = EMP.country_ident
	WHERE Sol.[Active] = 1
	AND EmpSol.Active = 1
    AND (Sol.FolioSolicitud = @FolioSolicitud OR @FolioSolicitud = 0)

	-- WHERE CS.[Active] = 1
	-- AND (CS.FolioSolicitud = @FolioSolicitud OR @FolioSolicitud = 0)

END
GO
PRINT N'Creating [app620].[CatSolicitudesSi]...';


GO

CREATE PROC [app620].[CatSolicitudesSi]
	 @FolioSolicitud INT = NULL
	,@EmployeeId INT 
	,@ConceptoId INT
	,@ConceptoMonto DECIMAL(18,2) = NULL
	,@MotivosSolicitudId INT = NULL
	,@ConceptoMotivoId INT = NULL
	,@ResponsableId INT = NULL
	,@PeriododOriginalId INT = NULL
	,@Autorizador1 INT = 0
	,@Autorizador2 INT = 0
	,@Autorizador3 INT = 0
	,@Autorizador4 INT = 0
	,@Autorizador5 INT = 0
	,@Autorizador6 INT = 0
	,@Autorizador7 INT = 0
	,@Autorizador8 INT = 0
	,@Autorizador9 INT = 0
	,@PeriodoNomina_Id INT = 0

	,@Active BIT = NULL
	,@UserEmployeeId INT = NULL

	,@FolioSolicitudOut INT = -1 OUTPUT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN
	

	DECLARE @idSolicitud INT =0
	DECLARE @FechaActual DATETIME
	--DECLARE @FolioSolicitudOut INT = 0
	DECLARE @EstatusSolicitud VARCHAR(5) = ''

	DECLARE
		 @CantidadTotal		INT = 0

	SET @FechaActual = GETDATE();
	--SET @FolioSolicitudOut = -1;
	SET @Estatus = ISNULL(@Estatus, 0);
	SET @ConceptoMotivoId = ISNULL(@ConceptoMotivoId, 0)
	SET @ConceptoMotivoId = IIF(@ConceptoMotivoId = -1,0,@ConceptoMotivoId)


	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-2 = Ya existe un registro con este Empleado y Concepto.
	*/

	SET @FolioSolicitudOut	= @FolioSolicitud

	SELECT @EstatusSolicitud = EstatusSolicitudId
	FROM app620.CatSolicitudes
	WHERE					
		FolioSolicitud	= @FolioSolicitud 

	IF EXISTS	(
					SELECT 1
					FROM app620.CatSolicitudes
					WHERE					
						FolioSolicitud	= @FolioSolicitud
				)
		BEGIN
			--SET @Estatus = '-1'
			SET @FolioSolicitudOut	= @FolioSolicitud

		END
	ELSE
		BEGIN
			DECLARE @inserted TABLE (
				[FolioSolicitud] [int]
			)

			INSERT INTO [app620].[CatSolicitudes]
			(
				 Fecha_Solicitud
				,Solicitante_Ident
				,PeriodoNominaId
				,EstatusSolicitudId
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate
			)
			OUTPUT Inserted.FolioSolicitud INTO @inserted
			VALUES
			(
				 @FechaActual
				,@UserEmployeeId
				,@PeriodoNomina_Id
				,'EB'
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual
			)
				
			SELECT TOP 1 @FolioSolicitudOut = FolioSolicitud FROM @inserted;
			SET @Estatus= 0
		END

	IF EXISTS(
				SELECT 1 FROM CatEmpleadosSolicitudes 
				WHERE
					FolioSolicitud	= @FolioSolicitud
				AND
					Empleado_Ident	= @EmployeeId
				AND
					ConceptoId		= @ConceptoId
				--AND
				--	Active			= 0

	)
		BEGIN

			UPDATE CatEmpleadosSolicitudes SET
				 ParametroConceptoMonto	= ISNULL(@ConceptoMonto, ParametroConceptoMonto)
				,MotivosSolicitudId		= ISNULL(@MotivosSolicitudId, MotivosSolicitudId)
				--,EstatusSolicitudId		= 'PA'

				,Active					= ISNULL(@Active, Active)
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()

			WHERE
				 FolioSolicitud			= @FolioSolicitud
			AND
				Empleado_Ident			= @EmployeeId
			AND
				ConceptoId				= @ConceptoId

			IF EXISTS(
						SELECT 1 FROM CatSolicitudEmpleadosAutorizantes
						WHERE
							FolioSolicitud	= @FolioSolicitud
						AND
							Empleado_Ident	= @EmployeeId
						AND
							ConceptoId		= @ConceptoId
						AND
							Rechazado		= 1
			)
				BEGIN

					UPDATE CatSolicitudEmpleadosAutorizantes
					SET Rechazado			= 0,
						Pendiente			= 1
					WHERE
						FolioSolicitud	= @FolioSolicitud
					AND
						Empleado_Ident	= @EmployeeId
					AND
						ConceptoId		= @ConceptoId
					AND
						Rechazado		= 1

					-- En esta sección el concepto de la solicitud pasa a Pendiente de Autorizar
					UPDATE CatEmpleadosSolicitudes 
					SET
						 EstatusSolicitudId		= 'PA'
					WHERE
						 FolioSolicitud			= @FolioSolicitud
					AND
						Empleado_Ident			= @EmployeeId
					AND
						ConceptoId				= @ConceptoId


					-- En esta sección se revisa si la solicitud pasa a Pendiente de Autorizar
					SELECT	@CantidadTotal =	COUNT(1)
					FROM	CatSolicitudEmpleadosAutorizantes 
					WHERE	FolioSolicitud		= @FolioSolicitud
					AND		Rechazado			= 1
					AND		Autorizador_Ident	IS NOT NULL					

					IF (
							@CantidadTotal = 0 
						AND 
							(ISNULL(@CantidadTotal, 0) = 0)
						)
						BEGIN
							UPDATE CatSolicitudes
							SET EstatusSolicitudId	= 'PA'
							WHERE	FolioSolicitud	= @FolioSolicitud

						END

					--UPDATE app620.CatSolicitudes
					--SET EstatusSolicitudId = 'PA'
					--WHERE					
					--	FolioSolicitud	= @FolioSolicitud			
				END
		END

	ELSE 
		BEGIN
			INSERT INTO CatEmpleadosSolicitudes
			(
				 FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,ParametroConceptoMonto
				,MotivosSolicitudId
				,Active
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate
			)
			VALUES
			(
				 @FolioSolicitudOut
				,@EmployeeId 
				,@ConceptoId
				,@ConceptoMonto
				,@MotivosSolicitudId
				,@Active
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual
			)
		END




	IF (@Estatus = 0)
		BEGIN

	IF (@ConceptoMotivoId <> 0)
		BEGIN
				IF NOT EXISTS(
					SELECT 1 
					FROM CatSolicitudEmpleadosDetalle 
					WHERE
						FolioSolicitud		= @FolioSolicitudOut
					AND
						Empleado_Ident		= @EmployeeId
					AND
						ConceptoId			= @ConceptoId
				--  Comentario para evitar múltiples registros de Detalles de Solicitud de Empleado
				--	AND
				--		ConceptoMotivoId	= @ConceptoMotivoId
				)
					BEGIN

						IF (@PeriododOriginalId = -1)
							BEGIN
								SELECT @PeriododOriginalId = NULL;
							END

						-- Valida que el Respon
						IF (@ResponsableId IS NOT NULL)
							BEGIN
								INSERT INTO CatSolicitudEmpleadosDetalle
								(
										FolioSolicitud
									,Empleado_Ident
									,ConceptoId
									,ConceptoMotivoId
									,ResponsableId
									,PeriodoOriginalId
									,CreatedBy
									,CreatedDate
									,LastModifiedBy
									,LastModifiedDate

								)
								VALUES
								(
									 @FolioSolicitudOut
									,@EmployeeId 
									,@ConceptoId
									,@ConceptoMotivoId
									,@ResponsableId
									,@PeriododOriginalId
									,@UserEmployeeId
									,@FechaActual
									,@UserEmployeeId
									,@FechaActual
								)

								IF (@PeriododOriginalId IS NULL)
									BEGIN
										SELECT @PeriododOriginalId = -1;
									END
							END
					END
				ELSE 					
					BEGIN
						IF (@PeriododOriginalId = -1)
							BEGIN
								SELECT @PeriododOriginalId = NULL;
							END

						UPDATE CatSolicitudEmpleadosDetalle SET
								ResponsableId			= ISNULL(@ResponsableId, ResponsableId)
							,PeriodoOriginalId		= ISNULL(@PeriododOriginalId, PeriodoOriginalId)
							,[Active]				= ISNULL(@Active, Active)
							,LastModifiedBy			= @UserEmployeeId
							,LastModifiedDate		= @FechaActual

							,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
							,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
							,LastModifiedFromPCName	= HOST_NAME()

						WHERE
								FolioSolicitud			= @FolioSolicitudOut
						AND
							Empleado_Ident			= @EmployeeId
						AND
							ConceptoId				= @ConceptoId
					--  Comentario para evitar múltiples registros de Detalles de Solicitud de Empleado
					--	AND
					--		ConceptoMotivoId		= @ConceptoMotivoId

						IF (@PeriododOriginalId IS NULL)
							BEGIN
								SELECT @PeriododOriginalId = -1;
							END
					END
			END
		END
		
	IF (@ConceptoMotivoId = 0)
		BEGIN
			IF (@PeriododOriginalId = -1)
				BEGIN
					SELECT @PeriododOriginalId = NULL;
				END
					
			UPDATE CatSolicitudEmpleadosDetalle SET
					ResponsableId			= ISNULL(@ResponsableId, ResponsableId)
				,PeriodoOriginalId		= ISNULL(@PeriododOriginalId, PeriodoOriginalId)
				,[Active]				= ISNULL(@Active, Active)
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()

			WHERE
					FolioSolicitud			= @FolioSolicitudOut
			AND
				Empleado_Ident			= @EmployeeId
			AND
				ConceptoId				= @ConceptoId
		--  Comentario para evitar múltiples registros de Detalles de Solicitud de Empleado
		--	AND
		--		ConceptoMotivoId		= @ConceptoMotivoId

			IF (@PeriododOriginalId IS NULL)
				BEGIN
					SELECT @PeriododOriginalId = -1;
				END
		END


						
	--END

	IF NOT EXISTS(
		SELECT 1 
		FROM [app620].CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 1
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,1
				,@Autorizador1
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)
		END
	ELSE
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
						SET  Autorizador_Ident			= @Autorizador1

							,Active						= ISNULL(@Active, Active)
							,LastModifiedBy				= @UserEmployeeId
							,LastModifiedDate			= @FechaActual

							,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
							,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
							,LastModifiedFromPCName		= HOST_NAME()
						WHERE FolioSolicitud				= @FolioSolicitudOut
						AND Empleado_Ident				= @EmployeeId
						AND ConceptoId					= @ConceptoId
						AND NivelAutorizacion			= 1
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 2
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,2
				,@Autorizador2
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador2

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
						WHERE FolioSolicitud				= @FolioSolicitudOut
						AND Empleado_Ident				= @EmployeeId
						AND ConceptoId					= @ConceptoId
						AND NivelAutorizacion			= 2
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 3
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,3
				,@Autorizador3
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)
		END
	ELSE 
		BEGIN
			BEGIN
				UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
				SET  Autorizador_Ident			= @Autorizador3

					,Active						= ISNULL(@Active, Active)
					,LastModifiedBy				= @UserEmployeeId
					,LastModifiedDate			= @FechaActual

					,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
					,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
					,LastModifiedFromPCName		= HOST_NAME()
			WHERE FolioSolicitud				= @FolioSolicitudOut
			AND Empleado_Ident				= @EmployeeId
			AND ConceptoId					= @ConceptoId
			AND NivelAutorizacion			= 3
			END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 4
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,4
				,@Autorizador4
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador4

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
				WHERE FolioSolicitud				= @FolioSolicitudOut
				AND Empleado_Ident				= @EmployeeId
				AND ConceptoId					= @ConceptoId
				AND NivelAutorizacion			= 4
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 5
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,5
				,@Autorizador5
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador5

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
					WHERE FolioSolicitud			= @FolioSolicitudOut
					AND Empleado_Ident				= @EmployeeId
					AND ConceptoId					= @ConceptoId
					AND NivelAutorizacion			= 5
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 6
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,6
				,@Autorizador6
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador6

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
					WHERE FolioSolicitud			= @FolioSolicitudOut
					AND Empleado_Ident				= @EmployeeId
					AND ConceptoId					= @ConceptoId
					AND NivelAutorizacion			= 6
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 7
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,7
				,@Autorizador7
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador7

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
					WHERE FolioSolicitud			= @FolioSolicitudOut
					AND Empleado_Ident				= @EmployeeId
					AND ConceptoId					= @ConceptoId
					AND NivelAutorizacion			= 7
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 8
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,8
				,@Autorizador8
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador8

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
					WHERE FolioSolicitud			= @FolioSolicitudOut
					AND Empleado_Ident				= @EmployeeId
					AND ConceptoId					= @ConceptoId
					AND NivelAutorizacion			= 8
				END
		END

	IF NOT EXISTS(
		SELECT 1 
		FROM CatSolicitudEmpleadosAutorizantes
		WHERE
			FolioSolicitud		= @FolioSolicitudOut
		AND
			Empleado_Ident		= @EmployeeId
		AND
			ConceptoId			= @ConceptoId
		AND
			NivelAutorizacion	= 9
	)
		BEGIN
			INSERT INTO [app620].[CatSolicitudEmpleadosAutorizantes]
				(FolioSolicitud
				,Empleado_Ident
				,ConceptoId
				,NivelAutorizacion
				,Autorizador_Ident
				,CreatedBy
				,CreatedDate
				,LastModifiedBy
				,LastModifiedDate)
			VALUES
				(@FolioSolicitudOut
				,@EmployeeId
				,@ConceptoId
				,9
				,@Autorizador9
				,@UserEmployeeId
				,@FechaActual
				,@UserEmployeeId
				,@FechaActual)

		END
	ELSE 
		BEGIN
			IF (@EstatusSolicitud <> 'R')
				BEGIN
					UPDATE [app620].[CatSolicitudEmpleadosAutorizantes]
					SET  Autorizador_Ident			= @Autorizador9

						,Active						= ISNULL(@Active, Active)
						,LastModifiedBy				= @UserEmployeeId
						,LastModifiedDate			= @FechaActual

						,DeactivatedBy				= IIF(@Active=1,NULL,@UserEmployeeId)
						,DeactivatedDate			= IIF(@Active=1,NULL,@FechaActual)
						,LastModifiedFromPCName		= HOST_NAME()
					WHERE FolioSolicitud			= @FolioSolicitudOut
					AND Empleado_Ident				= @EmployeeId
					AND ConceptoId					= @ConceptoId
					AND NivelAutorizacion			= 9
				END
		END
END
GO
PRINT N'Creating [app620].[CatSolicitudesSu]...';


GO
/*************************************************************/
/* Autor: Michell Cuni										 */
/* Función: Actualizar la solicitud y cambiar su estatus	 */
/*															 */
/* NOTA: Cuando se le pasa el valor 1 al parametro @Estatus=1*/
/*  quiere decir que se cambie el estatus de la solicitud	 */
/*  "A Enviado".											 */
/*************************************************************/

CREATE PROC [app620].[CatSolicitudesSu]
	 @FolioSolicitud INT
    ,@Fecha_Solicitud DATETIME = NULL
    ,@Perfil_Ident INT
    ,@Solicitante_Ident INT = NULL
    ,@Solicintante_Nombre VARCHAR(100) = NULL
    ,@Puesto_solicitante_Ident INT = NULL
	,@PeriodoNomina_Id VARCHAR(50) =''
	,@PeriodoNominaOriginal_Id VARCHAR(50) =''  
    ,@ConceptoId INT = NULL
    ,@MotivoId INT = NULL
    ,@Justficacion VARCHAR(1024) = NULL
    ,@Responsable_Id INT = NULL
    ,@Detalle INT = NULL
    ,@Autorizantes VARCHAR(100) = NULL
	,@Estatus INT = 0 OUTPUT
	,@UserEmployeeId INT
AS
BEGIN
	
	DECLARE
		 @FechaActual DATETIME

	SET @FechaActual = GETDATE();
	SET @Estatus	 = ISNULL(@Estatus, 0)

	IF @Estatus=0
		BEGIN
			UPDATE [app620].[CatSolicitudes]
				SET
					Solicitante_Ident = @Solicitante_Ident
				  ,LastModifiedDate = GETDATE()
				  ,LastModifiedBy=@UserEmployeeId
				WHERE 
					FolioSolicitud = @FolioSolicitud
				--AND Perfil_Ident = @Perfil_Ident				  				  
		END
	ELSE
		IF @Estatus =1
			BEGIN

				--Validar que no sea mayor a la fecha maxima del periodo de la solicitud.
				DECLARE @FechaPeriodo datetime

				SELECT @FechaPeriodo = CPN.FechaCierre  FROM [app620].[CatSolicitudes] CS
				JOIN [app620].[CatPeriodosNomina] CPN on CPN.PeriodoNominaId = CS.PeriodoNominaId
				WHERE CS.FolioSolicitud = @FolioSolicitud

				IF @FechaPeriodo <= GETDATE()
					BEGIN
						UPDATE [app620].[CatSolicitudes]
							SET
							EstatusSolicitudId = 'E',
							LastModifiedDate = GETDATE(),
							LastModifiedBy=@UserEmployeeId
						WHERE 
							FolioSolicitud = @FolioSolicitud
					END
				ELSE
					BEGIN
						SET @Estatus = -2
					END
			END
END
GO
PRINT N'Creating [app620].[CatTipoConceptosCMB]...';


GO

CREATE PROC [app620].[CatTipoConceptosCMB]
AS
BEGIN
	SELECT
		 [TipoConceptoId] Ident
		,[Descripcion] Valor
	FROM [app620].[CatTipoConceptos]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatTiposAccesoCMB]...';


GO

CREATE PROC [app620].[CatTiposAccesoCMB]
AS
BEGIN
	SELECT
		 [TipoAccesoId] Ident
		,[Descripcion] Valor
	FROM [app620].[CatTiposAcceso]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatTiposConsecutivoCMB]...';


GO
CREATE PROC [app620].[CatTiposConsecutivoCMB]
AS
BEGIN
	SELECT DISTINCT
		 [TipoConsecutivoId] As Id
		,[Descripcion] As Value
	FROM [app620].[CatTiposConsecutivo]
END
GO
PRINT N'Creating [app620].[CatTiposPeriodoNominaCMB]...';


GO

CREATE PROC [app620].[CatTiposPeriodoNominaCMB]
AS
BEGIN
	SELECT DISTINCT
		 [TipoPeriodoId] As Id
		,[Descripcion] As Value
	FROM [app620].[CatTiposPeriodoNomina]
	WHERE Active = 1
END
GO
PRINT N'Creating [app620].[CatTiposPeriodoNominaSel]...';


GO

CREATE PROC [app620].[CatTiposPeriodoNominaSel]
AS
BEGIN
	SELECT
		 [TipoPeriodoId]
		,[Descripcion]
		,[Active]
	FROM [app620].[CatTiposPeriodoNomina]
END
GO
PRINT N'Creating [app620].[CatTiposPeriodoNominaSi]...';


GO


CREATE PROC [app620].[CatTiposPeriodoNominaSi]
	 @TipoPeriodoId VARCHAR(5)
	,@Descripcion VARCHAR(50)
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS

BEGIN
	DECLARE
		 @FechaActual DATETIME

	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con la misma descripción
		-2 = Ya existe un registro con la misma clave
		-3 = Ya existe un registro con la misma clave y/o descripcion
	*/
	
	IF EXISTS	(
					SELECT 1 
					FROM [app620].[CatTiposPeriodoNomina] 
					WHERE Descripcion = @Descripcion 
				)
		SET @Estatus = @Estatus -1

	IF EXISTS	(
					SELECT 1 
					FROM [app620].[CatTiposPeriodoNomina] 
					WHERE [TipoPeriodoId] = @TipoPeriodoId 
				)
		SET @Estatus = @Estatus -2

	IF @Estatus = 0
		BEGIN
			INSERT INTO [app620].[CatTiposPeriodoNomina]
			   (
					[TipoPeriodoId]
				   ,[Descripcion]
				   ,[CreatedBy]
				   ,[LastModifiedBy]
			   )
		 VALUES
				(
					 @TipoPeriodoId 
					,@Descripcion
					,@UserEmployeeId 
					,@UserEmployeeId 
				)
		END

END
GO
PRINT N'Creating [app620].[CatTiposPeriodoNominaSu]...';


GO

CREATE PROCEDURE [app620].[CatTiposPeriodoNominaSu]
	 @TipoPeriodoId VARCHAR(5)
	,@Descripcion VARCHAR(50)
	,@UserEmployeeId INT
	,@Active BIT
	,@Estatus INT = 0 OUTPUT
AS

BEGIN
	DECLARE
		 @FechaActual DATETIME
		,@DeactivatedBy INT
		,@DeactivatedDate DATETIME
		,@LastModifiedBy INT
		,@LastModifiedDate DATETIME

	SET @FechaActual = GETDATE();

	-- Se inicializa @Estatus a cero si el valor de entrada es NULL
	SET @Estatus = ISNULL(@Estatus, 0)

	/*
	Estados para @Estatus, de esta manera de lado de la aplicacion recibe un estatus de la ejecución del SP
		 0 = Proceso sin error
		-1 = Ya existe un registro con la misma descripción
	*/
	
	IF EXISTS	(
					SELECT 1 
					FROM [app620].[CatTiposPeriodoNomina] 
					WHERE [TipoPeriodoId] = @TipoPeriodoId 
				)
	AND NOT EXISTS	(
						SELECT 1 
						FROM [app620].[CatTiposPeriodoNomina] 
						WHERE	TipoPeriodoId		<> @TipoPeriodoId 
						AND		Descripcion			= @Descripcion
					)

		BEGIN
			UPDATE [app620].[CatTiposPeriodoNomina]
			SET 
				 [Descripcion]			= @Descripcion
				,[Active]				= @Active
				,LastModifiedBy			= @UserEmployeeId
				,LastModifiedDate		= @FechaActual

				,DeactivatedBy			= IIF(@Active=1,NULL,@UserEmployeeId)
				,DeactivatedDate		= IIF(@Active=1,NULL,@FechaActual)
				,LastModifiedFromPCName	= HOST_NAME()
			WHERE
				[TipoPeriodoId] = @TipoPeriodoId

		END
	ELSE
		SET @Estatus = -1
END
GO
PRINT N'Creating [app620].[CatUserInfoSel]...';


GO



-- =============================================
--*Objeto:				[CatUserInfoSel]
--*Autor:				Javier Raygoza
--*Fecha de creación:	Enero 09, 2017
--*Objetivo:			Obtiene la informacion del empleado
--*Entrada:				NA
--*Salida:				NA
--*Precondiciones:		NA
--*Retorno:				NA
--*Revisiones:		
--*Movimiento - /XXX - Fecha del Movimiento 
-- [app601].[CatUserInfoSel] 844795
-- =============================================
CREATE PROC [app620].[CatUserInfoSel]
(
	@CCMSID int = 0
)
AS
BEGIN
	
	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			cast(null as int)				as Ident
			,cast(null as nvarchar(MAX))    as First_Name
			,cast(null as nvarchar(MAX))    as Middle_Name
			,cast(null as nvarchar(MAX))    as Last_Name
			,cast(null as int)				as Manager_Ident
			,cast(null as nvarchar(MAX))    as Manager_First_Name
			,cast(null as nvarchar(MAX))    as Manager_Middle_Name
			,cast(null as nvarchar(MAX))    as Manager_Last_Name
			,cast(null as datetime)			as Hire_Date
			,cast(null as nvarchar(MAX))    as Position_Code_Title
			,cast(null as int)				as Location_Ident
			,cast(null as nvarchar(MAX))    as Location_Name
			,cast(null as int)				as Contract_Type_Ident
			,cast(null as nvarchar(MAX))    as Contract_Type
			,cast(null as nvarchar(MAX))    as Account_ID
			,cast(null as int)				as Country_ident
			,cast(null as nvarchar(MAX))	as FullName
			--,cast(null as int)				as CountryIdBIOS
			--,cast(null as int)				as CityIdBIOS
		WHERE
			1 = 2  
	END

	SELECT 
		a.ident 
		,a.First_Name
		,a.Middle_Name
		,a.Last_Name
		,a.Manager_Ident
		,a.Manager_First_Name
		,a.Manager_Middle_Name
		,a.Manager_Last_Name
		,a.Hire_Date
		,a.Position_Code_Title
		,a.Location_Ident
		,a.Location_Name
		,a.Contract_Type_Ident
		,a.Contract_Type
		,a.Account_ID
		,a.[country_ident]
		,CASE WHEN a.Middle_Name IS NULL OR LEN(a.Middle_Name) = 0 THEN a.First_Name + ' ' + a.Last_Name ELSE a.First_Name + ' ' + isnull(a.Middle_Name,'') + ' ' + a.Last_Name END AS FullName
		--,b.CountryId as CountryIdBIOS
		--,b.CityId As CityIdBIOS
	FROM [app620].CatEmployeeCCMSVw a
	--INNER JOIN [app591].[CatRelLocationCityVw] b on a.Location_Ident = b.LocationId
	WHERE Ident = @CCMSID
END
GO
PRINT N'Creating [app620].[CierraSolicitud]...';


GO

CREATE PROCEDURE [app620].[CierraSolicitud]
	 @FolioSolicitud	INT
	,@Responsable_Ident	INT
	,@Estatus			INT = 1 OUTPUT
AS
	SET XACT_ABORT ON;
	SET NOCOUNT ON;
BEGIN TRY
	DECLARE
		 @CantidadTotal				INT = 0
		,@CantidadTotalAC			INT = 0

	BEGIN TRAN

		SELECT	@CantidadTotalAC		=	COUNT(1) 
		FROM	CatEmpleadosSolicitudes
		WHERE	FolioSolicitud			= @FolioSolicitud
		AND		EstatusSolicitudId		IN ('A', 'C', 'CE')	--Estatus de Autorizada, Cancelada y Cerrada.
		AND		Active				= 1

		SELECT	@CantidadTotal			=	COUNT(1) 
		FROM	CatEmpleadosSolicitudes
		WHERE	FolioSolicitud			= @FolioSolicitud
		AND		Active				= 1

		--Aun no se ha procesado ninguna solicitud
		IF (@CantidadTotal = @CantidadTotalAC)
			BEGIN
				UPDATE	CatEmpleadosSolicitudes
				SET		EstatusSolicitudId	= 'CE'
				WHERE	FolioSolicitud		= @FolioSolicitud
				AND		EstatusSolicitudId	<> 'C'

				UPDATE	CatSolicitudes
				SET		EstatusSolicitudId	= 'CE'
						,Responsable_Ident	= @Responsable_Ident 
				WHERE	FolioSolicitud		= @FolioSolicitud

			END
		ELSE
			BEGIN
				SET @Estatus = -1
			END

	COMMIT TRAN
END TRY
BEGIN CATCH  -- Modulo de manejo de errores
	
    DECLARE @Error_Number INT ,
        @Error_Severity INT ,
        @Error_State INT ,
        @Error_Procedure VARCHAR(1000) ,
        @Error_Line INT ,
        @Error_Message VARCHAR(8000);

    SELECT  @Error_Number = ERROR_NUMBER() ,
            @Error_Severity = ERROR_SEVERITY() ,
            @Error_State = ERROR_STATE() ,
            @Error_Procedure = ERROR_PROCEDURE() ,
            @Error_Line = ERROR_LINE() ,
            @Error_Message = ERROR_MESSAGE();

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
	
	SELECT @Estatus = -1	

	RAISERROR(@Error_Message,@Error_Severity, @Error_State);	
END CATCH;
GO
PRINT N'Creating [app620].[DescargaArchivoSolicitud]...';


GO
CREATE PROC app620.DescargaArchivoSolicitud
	@EmpleadoId INT
	,@Activos INT
AS
	BEGIN
		DECLARE
			@PeriodoNominaId INT = 0
			,@CurrentStatus VARCHAR(10)

		SELECT	@PeriodoNominaId = PeriodoNominaId
		FROM	[app620].[CatPeriodosNomina]
		WHERE	PeriodicidadNominaId = 'C' 
				AND TipoPeriodo = 'O'
				AND convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin)
		ORDER BY CreatedDate DESC		

		SELECT	'EMPLEADO' EMPLEADO,'CONCEPTO' CONCEPTO,'ACCION' ACCION,'UNIDAD' UNIDAD,'IMPORTE' IMPORTE,'PORCENTAJE' PORCENTAJE,'FECHA' FECHA,'INICIO' INICIO,'FIN' FIN,'FOLIO' FOLIO,'CONSECUENCIA' CONSECUENCIA,'CONTROL' CONTROL,'SEMANA' SEMANA
		UNION
		SELECT	CONVERT(VARCHAR(20),EMS.Empleado_Ident) EMPLEADO,
				PS.Descripcion CONCEPTO,
				'' ACCION,
				CASE
					WHEN C.ParametroConceptoId IN (1,2)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END UNIDAD,
				CASE
					WHEN C.ParametroConceptoId IN (3)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END IMPORTE,
				CASE
					WHEN C.ParametroConceptoId IN (4)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END PORCENTAJE,
				'' FECHA,
				''	INICIO,
				''	FIN,
				''	FOLIO,
				''	CONSECUENCIA,
				''	CONTROL,
				''	SEMANA
				--,S.*
				--,E.country_ident
				--,E.country_full_name
				--,LB.location_bios
				--,LB.city
				--,E.Location_Ident
				--,E.Location_Name
				--,E.Client_Ident
				--,E.Client_Name
				--,E.Program_Ident
				--,E.Program_Name
				--,E.Contract_Type_Ident
				--,E.Contract_Type
				--,PE.Country_Ident
				--,PE.City_Ident
				--,LB.location_ccms
		FROM	[app620].[CatSolicitudes] S
				JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
				INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
				INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
				LEFT JOIN [app620].[CatEmployeeCCMSVw] E ON E.Ident = EMS.[Empleado_Ident]
				INNER JOIN [app620].[CatLocationVw] AS b ON E.Location_Ident = b.Location_Ident
				INNER JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LB ON LB.location_ccms = E.Location_Ident
				INNER JOIN [app620].[CatPerfilEmpleados] PE ON	ISNULL(NULLIF(PE.Country_Ident, -1), b.country_ident) = b.country_ident AND 
																ISNULL(NULLIF(PE.City_Ident, -1), LB.location_bios) = LB.location_bios AND 
																ISNULL(NULLIF(PE.Location_Ident, -1), E.Location_Ident) = E.Location_Ident AND 
																ISNULL(NULLIF(PE.Client_Ident, -1), E.Client_Ident) = E.Client_Ident AND
																ISNULL(NULLIF(PE.Program_Ident, -1),E.Program_Ident) = E.Program_Ident AND
																ISNULL(NULLIF(PE.Contract_Type_Ident, -1), E.Contract_Type_Ident) = E.Contract_Type_Ident
				INNER JOIN [app620].[CatPerfilEmpleadosAccesos] PEA ON PE.Perfil_Ident = PEA.Perfil_Ident
				INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		WHERE	
				S.EstatusSolicitudId = 'CE'
				AND EMS.EstatusSolicitudId = 'CE'
				AND PE.TipoAccesoId = 3
				AND PE.Active = 1
				AND PEA.Active = 1
				AND PN.PeriodoNominaId = @PeriodoNominaId
				AND PEA.EmpleadoId = @EmpleadoId
				AND E.Current_Status IN (CASE WHEN @Activos = 1 THEN 'Active'  ELSE 'Terminated' END)
	END
GO
PRINT N'Creating [app620].[DescargaArchivoSolicitudSel]...';


GO
CREATE PROC [app620].[DescargaArchivoSolicitudSel]
	@Activos BIT
AS
	BEGIN
		DECLARE
			@PeriodoNominaId INT = 0
			,@CurrentStatus VARCHAR(10)

		SELECT	@PeriodoNominaId = PeriodoNominaId
		FROM	[app620].[CatPeriodosNomina]
		WHERE	PeriodicidadNominaId = 'C' 
				AND TipoPeriodo = 'O'
				AND convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin)
		ORDER BY CreatedDate DESC		

		--SELECT	'EMPLEADO' EMPLEADO,'CONCEPTO' CONCEPTO,'ACCION' ACCION,'UNIDAD' UNIDAD,'IMPORTE' IMPORTE,'PORCENTAJE' PORCENTAJE,'FECHA' FECHA,'INICIO' INICIO,'FIN' FIN,'FOLIO' FOLIO,'CONSECUENCIA' CONSECUENCIA,'CONTROL' CONTROL,'SEMANA' SEMANA
		--UNION
		SELECT	CONVERT(VARCHAR(20),EMS.Empleado_Ident) EMPLEADO,
				PS.Descripcion CONCEPTO,
				'' ACCION,
				CASE
					WHEN C.ParametroConceptoId IN (1,2)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END UNIDAD,
				CASE
					WHEN C.ParametroConceptoId IN (3)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END IMPORTE,
				CASE
					WHEN C.ParametroConceptoId IN (4)
					THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
					ELSE ''
				END PORCENTAJE,
				'' FECHA,
				''	INICIO,
				''	FIN,
				''	FOLIO,
				''	CONSECUENCIA,
				''	CONTROL,
				''	SEMANA
				--,S.*
				--,E.country_ident
				--,E.country_full_name
				--,LB.location_bios
				--,LB.city
				--,E.Location_Ident
				--,E.Location_Name
				--,E.Client_Ident
				--,E.Client_Name
				--,E.Program_Ident
				--,E.Program_Name
				--,E.Contract_Type_Ident
				--,E.Contract_Type
				--,PE.Country_Ident
				--,PE.City_Ident
				--,LB.location_ccms
		FROM	[app620].[CatSolicitudes] S
				JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
				INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
				INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
				LEFT JOIN [app620].[CatEmployeeCCMSVw] E ON E.Ident = EMS.[Empleado_Ident]
				INNER JOIN [app620].[CatLocationVw] AS b ON E.Location_Ident = b.Location_Ident
				INNER JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LB ON LB.location_ccms = E.Location_Ident
				INNER JOIN [app620].[CatPerfilEmpleados] PE ON	ISNULL(NULLIF(PE.Country_Ident, -1), b.country_ident) = b.country_ident AND 
																ISNULL(NULLIF(PE.City_Ident, -1), LB.location_bios) = LB.location_bios AND 
																ISNULL(NULLIF(PE.Location_Ident, -1), E.Location_Ident) = E.Location_Ident AND 
																ISNULL(NULLIF(PE.Client_Ident, -1), E.Client_Ident) = E.Client_Ident AND
																ISNULL(NULLIF(PE.Program_Ident, -1),E.Program_Ident) = E.Program_Ident AND
																ISNULL(NULLIF(PE.Contract_Type_Ident, -1), E.Contract_Type_Ident) = E.Contract_Type_Ident
				--INNER JOIN [app620].[CatPerfilEmpleadosAccesos] PEA ON PE.Perfil_Ident = PEA.Perfil_Ident
				INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		WHERE	
				S.EstatusSolicitudId = 'CE'
				AND EMS.EstatusSolicitudId = 'CE'
				AND PE.TipoAccesoId = 3
				AND PE.Active = 1
				--AND PEA.Active = 1
				AND PN.PeriodoNominaId = @PeriodoNominaId
				--AND PEA.EmpleadoId = @EmpleadoId
				AND E.Current_Status IN (CASE WHEN @Activos = 1 THEN 'Active'  ELSE 'Terminated' END)
	END
GO
PRINT N'Creating [app620].[EmpleadosxPerfilSel]...';


GO
CREATE PROCEDURE [app620].[EmpleadosxPerfilSel]
(
	 @Perfil_Ident			INT = -1
)
AS

BEGIN

	SELECT
			@Perfil_Ident			= ISNULL(@Perfil_Ident, -1)

	SELECT
			Emp.Ident
		, Emp.Nombre
		, Emp.First_Name
		, Emp.Last_Name
		, Emp.Manager_Ident
		, Emp.Manager_First_Name
		, Emp.Manager_Last_Name

		, Emp.Program_Ident
		, Emp.Program_Name
		, Emp.Client_Ident
		, Emp.Client_Name
		, Emp.Company_Ident
		, Emp.Company_Name
		, Emp.Contract_Type_Ident
		, Emp.Contract_Type
		, Emp.Position_Code_Ident
		, Emp.Position_Code_Title

		, Loc.Location_Ident
		, Loc.full_name
		, Loc.country_ident
		, Loc.country_full_name
		, LocBIOS.[location_bios] city_Ident
		, LocBIOS.LocationName city
		, Emp.Current_Status
		,(CASE WHEN Perfil.ConceptoId IS NULL THEN 'TODOS' ELSE CC.Descripcion END) AS ConceptoNombre
	
	FROM
		app620.CatEmployeeCCMSVw AS Emp 
		JOIN app620.CatLocationVw AS Loc 
			ON Emp.Location_Ident = Loc.Location_Ident 
		JOIN app620.CatPerfilEmpleados Perfil
			ON	(Perfil.Perfil_Ident		= @Perfil_Ident					OR	@Perfil_Ident				= -1)

			--AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
			AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
			AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
			AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
			AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

			AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
		JOIN app620.CatRelLocationBiosCCMSVw LocBIOS
			ON	(LocBIOS.[location_bios]	= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)
			AND	(LocBIOS.[location_ccms]	= Loc.Location_Ident)
		LEFT JOIN [app620].[CatConceptos] CC ON CC.ConceptoId = Perfil.ConceptoId
	WHERE
		Emp.Position_Code_Title NOT LIKE 'agent%' 
	AND 
		Emp.Position_Code_Title NOT LIKE '%becario%'
END
GO
PRINT N'Creating [app620].[EmpleadosxSolicitanteSel]...';


GO
CREATE PROCEDURE [app620].[EmpleadosxSolicitanteSel]
(
	  @Solicitante_Ident	INT = -1
	 ,@Empleado_Ident		INT = -1
)
AS

BEGIN

	SELECT
		 @Solicitante_Ident	= ISNULL(@Solicitante_Ident, -1)
		,@Empleado_Ident	= ISNULL(@Empleado_Ident, -1)

	SELECT DISTINCT Emp.Ident
	FROM [app620].[CatEmployeeCCMSVw] Emp
	JOIN CatPerfilEmpleados PE
	ON (PE.Country_Ident = Emp.Country_Ident OR PE.Country_Ident = -1)
	AND  (PE.Location_Ident = Emp.Location_Ident OR PE.Location_Ident = -1)
	AND  (PE.Client_Ident = Emp.Client_Ident OR PE.Client_Ident = -1)
	AND  (PE.Program_Ident = Emp.Program_Ident OR PE.Program_Ident = -1)
	AND  (PE.Contract_Type_Ident = Emp.Contract_Type_Ident OR PE.Contract_Type_Ident = -1)
	AND PE.Active = 1

	JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity 
	ON (BiosCity.location_bios = PE.City_Ident  OR PE.City_Ident = -1)
	AND (BiosCity.location_ccms = Emp.Location_Ident)
	WHERE 
		PE.Perfil_Ident IN (
		SELECT Perfil_Ident 
		FROM CatPerfilEmpleadosAccesos 
		WHERE (EmpleadoId = @Solicitante_Ident OR @Solicitante_Ident = -1)
		AND Active = 1
	)
	AND (emp.Ident = @Empleado_Ident OR @Empleado_Ident = -1)

END
GO
PRINT N'Creating [app620].[EnviaNotificacionAutorizante]...';


GO
CREATE PROCEDURE app620.EnviaNotificacionAutorizante
@CCMSID INT
AS
	BEGIN
			Declare @val Varchar(MAX),
					@CorreoAutorizador VARCHAR(200),
					@NombreAutorizador VARCHAR(300); 

			SELECT @val = (
			select 
			  (select SEA.FolioSolicitud as 'td' for xml path(''), type),
			  (select E.Nombre as 'td' for xml path(''), type),
			  (select ESO.Descripcion as 'td' for xml path(''), type)
			FROM	app620.CatSolicitudEmpleadosAutorizantes SEA WITH(NOLOCK)
					INNER JOIN [app620].[CatEmployeeCCMSVw] E WITH(NOLOCK) ON E.Ident = SEA.[Empleado_Ident]
					INNER JOIN app620.CatConceptos C WITH(NOLOCK) ON C.ConceptoId = SEA.ConceptoId
					INNER JOIN app620.CatSolicitudes S WITH(NOLOCK) ON S.FolioSolicitud = SEA.FolioSolicitud
					INNER JOIN app620.CatParametroConceptos P WITH(NOLOCK) ON P.ParametroConceptoId = C.ParametroConceptoId
					INNER JOIN app620.CatEmpleadosSolicitudes ES WITH(NOLOCK) ON ES.FolioSolicitud = S.FolioSolicitud
					INNER JOIN app620.CatMotivosSolicitud M WITH(NOLOCK) ON M.MotivosSolicitudId = ES.MotivosSolicitudId
					INNER JOIN app620.CatEstatusSolicitudes ESO WITH(NOLOCK) ON ESO.EstatusSolicitudId = S.EstatusSolicitudId
					INNER JOIN [app620].[CatEmployeeCCMSVw] A WITH(NOLOCK) ON A.Ident = SEA.Autorizador_Ident
			WHERE	SEA.Pendiente = 1
					AND SEA.Autorizador_Ident = @CCMSID
			GROUP BY SEA.FolioSolicitud, 
					--SEA.Empleado_Ident, 
					E.Nombre, 
					--SEA.ConceptoId, 
					--C.Descripcion, 
					--M.Descripcion, 
					ESO.Descripcion --, 
					--SEA.Autorizador_Ident,
					--A.First_Name + ' ' + A.Last_Name
					--,A.email1
			for xml path('tr'))


			SELECT	@NombreAutorizador = Nombre					
					,@CorreoAutorizador = email1
			FROM	[app620].[CatEmployeeCCMSVw] WITH(NOLOCK)
			WHERE	Ident = @CCMSID
		
		

			DECLARE @mensaje NVARCHAR(MAX)
			
			SET @mensaje = '<!DOCTYPE html>
							<html>
								<head>
									<style type="text/css">
										#customers {
											font-family: Verdana, Arial, Helvetica, sans-serif;
											font-size: 8pt;
											color: #333333;
											background-color: #f2f2f2;    
											margin: 5px 0 10px 0;  
											border: 1px solid #333333; 
											border-collapse: collapse;								
										}

										#customers td, #customers th {
											border: 1px solid #ddd;
											padding: 8px;
											text-align: center;
										}

										#customers tr:nth-child(even){background-color: #f2f2f2;}

										#customers tr:hover {background-color: #ddd;}

										#customers th {
											padding-top: 2px;
											padding-bottom: 2px;
											background-color: #0072B1;
											color: white;
										}
									</style>
								</head>
								<body bgcolor="#3f3f3f" text="#919191" alink="#cccccc" vlink="#cccccc" style="margin: 0;padding: 0;background-color: #ffffff;color: #919191;">								
									<span style="font-family:Calibri;">Buen d&iacute;a, ' + @NombreAutorizador + ' (' + @CorreoAutorizador + ')' 
									+ '<br/>Mediante el presente correo electr&oacute;nico le informamos que tiene pendiente de autorizar la(s) siguiente(s) solicitud(es).<br/>Para su seguimiento, entrar a la aplicaci&oacute;n Nomina Manual en la parte de Mis Autorizaciones</span>


									<br/>
									<br/>
									<br/>
									<div align="center">					
										<table id="customers">
											<tr>
												<th>Folio</th>
												<th>Nombre</th>
												<th>Estatus</th>												
											</tr>' + 
											 @val +
										'</table>
									</div>						
								</body>
							</html>'
							
			--EXEC msdb.dbo.sp_send_dbmail 
			--	@profile_name= 'mtysqldev01'
			--	,@recipients='jdelossantosr@outlook.com' --'alfredo.guerrero@teleperformance.com'
			--	--,@copy_recipients=@CC
			--	--,@blind_copy_recipients=@BCC
			--	,@subject='Notificación de Nómina Manual'
			--	--,@file_attachments =@File_destination
			--	,@body= @mensaje
			--	,@body_format='HTML'
			
			SELECT @mensaje Body, 'alfredo.guerrero@teleperformance.com' CorreoAutorizador, 'Solicitudes Pendientes de Autorizar' [Subject], 'alfredo.guerrero@teleperformance.com' CorreoCopia
			--SELECT @mensaje Body, @CorreoAutorizador CorreoAutorizador, 'Solicitudes Pendientes de Autorizar' [Subject]
		END
GO
PRINT N'Creating [app620].[EnviaNotificacionSolicitante]...';


GO
CREATE PROCEDURE app620.EnviaNotificacionSolicitante
@CCMSID INT
AS
	BEGIN
			Declare @val Varchar(MAX),
					@CorreoSolicitante VARCHAR(200),
					@NombreSolicitante VARCHAR(300); 

			SELECT @val = (
			select 
			  (select S.FolioSolicitud     as 'td' for xml path(''), type),
			  --(select E.First_Name + ' ' + E.Last_Name     as 'td' for xml path(''), type),
			  (select ES.Descripcion           as 'td' for xml path(''), type)			  
			FROM	app620.CatSolicitudes S WITH(NOLOCK)
					--INNER JOIN app620.CatSolicitudEmpleadosDetalle D WITH(NOLOCK) ON D.FolioSolicitud = S.FolioSolicitud
					--INNER JOIN [Mty1vacd-01].CCMS.dbo.TPNSR_CCMS_EmployeePlus E WITH(NOLOCK) ON E.Ident = S.[Solicitante_Ident]
					INNER JOIN app620.CatEstatusSolicitudes ES WITH(NOLOCK) ON ES.EstatusSolicitudId = S.EstatusSolicitudId					
			WHERE	Solicitante_Ident = @CCMSID
					AND S.EstatusSolicitudId IN ('EB','R')			
			for xml path('tr'))			

			SELECT	@NombreSolicitante = Nombre
					,@CorreoSolicitante = email1
			FROM	[app620].[CatEmployeeCCMSVw] WITH(NOLOCK)
			WHERE	Ident = @CCMSID
		
		

			DECLARE @mensaje NVARCHAR(MAX)
			
			SET @mensaje = '<!DOCTYPE html>
							<html>
								<head>
									<style type="text/css">
										#customers {
											font-family: Verdana, Arial, Helvetica, sans-serif;
											font-size: 8pt;
											color: #333333;
											background-color: #f2f2f2;    
											margin: 5px 0 10px 0;  
											border: 1px solid #333333; 
											border-collapse: collapse;								
										}

										#customers td, #customers th {
											border: 1px solid #ddd;
											padding: 8px;
											text-align: center;
										}

										#customers tr:nth-child(even){background-color: #f2f2f2;}

										#customers tr:hover {background-color: #ddd;}

										#customers th {
											padding-top: 2px;
											padding-bottom: 2px;
											background-color: #0072B1;
											color: white;
										}
									</style>
								</head>
								<body bgcolor="#3f3f3f" text="#919191" alink="#cccccc" vlink="#cccccc" style="margin: 0;padding: 0;background-color: #ffffff;color: #919191;">								
									<span style="font-family:Calibri;">Buen d&iacute;a, ' + @NombreSolicitante + ' (' + @CorreoSolicitante + ')' 
									+ '<br/>Mediante el presente correo electr&oacute;nico le informamos que tiene pendiente de enviar la(s) siguiente(s) solicitud(es).<br/>Para su seguimiento, entrar a la aplicaci&oacute;n Nomina Manual en la parte de Mis Solicitudes</span>
									<br/>
									<br/>
									<br/>
									<div align="center">					
										<table id="customers">
											<tr>
												<th>Folio</th>
												<th>Estatus</th>												
											</tr>' + 
											 @val +
										'</table>
									</div>						
								</body>
							</html>'
							
			--EXEC msdb.dbo.sp_send_dbmail 
			--	@profile_name= 'mtysqldev01'
			--	,@recipients='jdelossantosr@outlook.com' --'alfredo.guerrero@teleperformance.com'
			--	--,@copy_recipients=@CC
			--	--,@blind_copy_recipients=@BCC
			--	,@subject='Notificación de Nómina Manual'
			--	--,@file_attachments =@File_destination
			--	,@body= @mensaje
			--	,@body_format='HTML'
			
			SELECT @mensaje Body, 'alfredo.guerrero@teleperformance.com' CorreoSolicitante, 'Solicitudes Pendientes de Enviar' [Subject], 'alfredo.guerrero@teleperformance.com' CorreoCopia
			--SELECT @mensaje Body, @CorreoAutorizador CorreoAutorizador, 'Solicitudes Pendientes de Autorizar' [Subject]
		END
GO
PRINT N'Creating [app620].[EnviaSolicitud]...';


GO

CREATE PROCEDURE [app620].[EnviaSolicitud]
	 @FolioSolicitud INT
	,@Estatus INT = 1 OUTPUT
AS
	SET XACT_ABORT ON;
	SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRAN
		DECLARE @EstatusSolicitudId VARCHAR(5) = ''

		SELECT @EstatusSolicitudId = EstatusSolicitudId
		FROM CatSolicitudes
		WHERE FolioSolicitud = @FolioSolicitud

		IF (@EstatusSolicitudId = 'EB')
			BEGIN
				UPDATE CatSolicitudes
				SET EstatusSolicitudId = 'PA'
				WHERE FolioSolicitud = @FolioSolicitud

				UPDATE CatEmpleadosSolicitudes
				SET EstatusSolicitudId = 'PA'
				WHERE FolioSolicitud = @FolioSolicitud
			END

		UPDATE app620.CatSolicitudEmpleadosAutorizantes 
		SET Pendiente = 1, Rechazado = 0
		FROM (
			SELECT 
				 MIN(NivelAutorizacion) AS NivelAutorizacion
				,SEA.FolioSolicitud, SEA.Empleado_Ident, SEA.ConceptoId--, Pendiente, Autorizado, Rechazado
			FROM app620.CatSolicitudEmpleadosAutorizantes SEA
			JOIN app620.CatEmpleadosSolicitudes CES
			ON CES.FolioSolicitud = SEA.FolioSolicitud
			AND CES.Empleado_Ident = SEA.Empleado_Ident
			AND CES.ConceptoId = SEA.ConceptoId
			AND CES.EstatusSolicitudId <> 'R'
			AND CES.EstatusSolicitudId <> 'C'
			WHERE SEA.FolioSolicitud = @FolioSolicitud
			AND SEA.Autorizador_Ident IS NOT NULL
			AND ((SEA.Pendiente = 1) OR (SEA.Autorizado = 0 AND SEA.Rechazado = 0 AND SEA.Pendiente = 0 AND SEA.Cancelado = 0) OR (SEA.Rechazado = 1))
			GROUP BY SEA.FolioSolicitud, SEA.Empleado_Ident, SEA.ConceptoId--, Pendiente, Autorizado, Rechazado
		) SEA
		WHERE
			SEA.FolioSolicitud		= CatSolicitudEmpleadosAutorizantes.FolioSolicitud
		AND
			SEA.Empleado_Ident		= CatSolicitudEmpleadosAutorizantes.Empleado_Ident
		AND
			SEA.ConceptoId			= CatSolicitudEmpleadosAutorizantes.ConceptoId
		AND
			SEA.NivelAutorizacion	= CatSolicitudEmpleadosAutorizantes.NivelAutorizacion		

		SELECT @Estatus = 1

	COMMIT TRAN
END TRY
BEGIN CATCH  -- Modulo de manejo de errores
	
    DECLARE @Error_Number INT ,
        @Error_Severity INT ,
        @Error_State INT ,
        @Error_Procedure VARCHAR(1000) ,
        @Error_Line INT ,
        @Error_Message VARCHAR(8000);
    SELECT  @Error_Number = ERROR_NUMBER() ,
            @Error_Severity = ERROR_SEVERITY() ,
            @Error_State = ERROR_STATE() ,
            @Error_Procedure = ERROR_PROCEDURE() ,
            @Error_Line = ERROR_LINE() ,
            @Error_Message = ERROR_MESSAGE();

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
	
	SELECT @Estatus = -1	

	RAISERROR(@Error_Message,@Error_Severity, @Error_State);	
END CATCH;
GO
PRINT N'Creating [app620].[GeneraArchivoSolicitudSel]...';


GO
CREATE PROC [app620].[GeneraArchivoSolicitudSel]
@Activos bit = 0
AS
BEGIN
	DECLARE @TablaDeSolicitudes TABLE (EMPLEADO int, CONCEPTO nvarchar(50), UNIDAD nvarchar(10), IMPORTE nvarchar(10), PORCENTAJE nvarchar(10))

	INSERT INTO @TablaDeSolicitudes
	EXEC [app620].[ArchivoSolicitud] 1

	--SELECT * FROM @TablaDeSolicitudes order by EMPLEADO desc

	IF 1 = 2 BEGIN
		SELECT
			cast(null as int)				as EMPLEADO
			,cast(null as nvarchar(MAX))    as REG
			,cast(null as nvarchar(MAX))    as CONCEPTO
			,cast(null as nvarchar(MAX))    as ACCION
			,cast(null as nvarchar(MAX))	as UNIDAD
			,cast(null as int)			    as IMPORTE
			,cast(null as nvarchar(MAX))    as PORCENTAJE
			,cast(null as nvarchar(MAX))    as FECHA
			,cast(null as nvarchar(MAX))	as SEMANA
			,cast(null as nvarchar(MAX))    as FECHA_INI
			,cast(null as nvarchar(MAX))	as FECHA_FIN
			,cast(null as nvarchar(MAX))    as DURACION
			,cast(null as nvarchar(MAX))	as FOLIO
			,cast(null as nvarchar(MAX))    as CONSECUENCIA
			,cast(null as nvarchar(MAX))    as CONTROL
			,cast(null as nvarchar(MAX))	as ID_Empresa
			,cast(null as nvarchar(MAX))	as CIA_IDReporteo
			,cast(null as nvarchar(MAX))	as Folder
			,cast(null as nvarchar(MAX)) 	as Compania
			,cast(null as nvarchar(MAX)) 	as ID_REP
		WHERE
			1 = 2  
	END

	SELECT
	EMPLEADO,
	REG,
	Concepto,
	ACCION,
	UNIDAD,
	CASE WHEN IMPORTE = 0 THEN '' ELSE CONVERT(nvarchar(10),IMPORTE) END IMPORTE,
	PORCENTAJE,
	FECHA,
	SEMANA,
	FECHA_INI,
	FECHA_FIN,
	DURACION,
	FOLIO,
	CONSECUENCIA,
	CONTROL,
	ID_Empresa,
	CIA_IDReporteo,
	Folder,
	Compania,
	ID_REP
	FROM
	(SELECT
	r.EMPLEADO,
	r.REG,
	r.Concepto,
	r.ACCION,
	r.UNIDAD,
	SUM(r.IMPORTE) IMPORTE,
	--r.Importe,
	r.PORCENTAJE,
	r.FECHA,
	r.SEMANA,
	r.FECHA_INI,
	r.FECHA_FIN,
	r.DURACION,
	r.FOLIO,
	r.CONSECUENCIA,
	r.CONTROL,
	r.ID_Empresa,
	r.CIA_IDReporteo,
	r.Folder,
	r.Compania,
	r.ID_REP
	FROM
	(
	SELECT 
	EMPLEADO,
	'0' REG,
	CONCEPTO,
	'' ACCION,
	UNIDAD,
	--IMPORTE,
	--LEN(IMPORTE),
	CASE WHEN Isnumeric(IMPORTE) != 1  THEN 0 ELSE 
		--convert(decimal(18,2), IMPORTE) 
		CAST(IMPORTE AS DECIMAL(12,2))
	END IMPORTE,
	PORCENTAJE,
	'' FECHA,
	''	SEMANA,
	''	FECHA_INI,
	''	FECHA_FIN,
	''	DURACION,
	''	FOLIO,
	''	CONSECUENCIA,
	''	CONTROL,
	c.ID_Empresa,
	c.CIA_IDReporteo,
	c.Folder,
	d.Compania,
	d.ID_REP
	FROM @TablaDeSolicitudes a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.EMPLEADO = b.Ident
	INNER JOIN [app620].[CatIdEmpresaXCCMSContractVw] c WITH (NOLOCK) on b.Contract_Type_Ident = c.Contract_Type_Ident AND c.SiteId IS NULL
	INNER JOIN [app620].[CatCompaniaXIdEmpresaVw] d WITH (NOLOCK) on c.CIA_IDReporteo = d.CIA_IDReporteo AND c.ID_Empresa = d.ID_Empresa
	WHERE 
	b.Location_Ident not in (SELECT x.SiteId FROM [app620].[CatIdEmpresaXCCMSContractVw] x WHERE x.SiteId IS NOT NULL)

	UNION ALL

	SELECT 
	EMPLEADO,
	'0' REG,
	CONCEPTO,
	'' ACCION,
	UNIDAD,
	--IMPORTE,
	--LEN(IMPORTE),
	CASE WHEN Isnumeric(IMPORTE) != 1 THEN 0 ELSE 
		--convert(decimal(18,2), IMPORTE) 
		CAST(IMPORTE AS DECIMAL(12,2))
	END IMPORTE,
	PORCENTAJE,
	'' FECHA,
	''	SEMANA,
	''	FECHA_INI,
	''	FECHA_FIN,
	''	DURACION,
	''	FOLIO,
	''	CONSECUENCIA,
	''	CONTROL,
	c.ID_Empresa,
	c.CIA_IDReporteo,
	c.Folder,
	d.Compania,
	d.ID_REP
	FROM @TablaDeSolicitudes a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.EMPLEADO = b.Ident
	INNER JOIN [app620].[CatIdEmpresaXCCMSContractVw] c WITH (NOLOCK) on b.Contract_Type_Ident = c.Contract_Type_Ident AND c.SiteId = b.Location_Ident
	INNER JOIN [app620].[CatCompaniaXIdEmpresaVw] d WITH (NOLOCK) on c.CIA_IDReporteo = d.CIA_IDReporteo AND c.ID_Empresa = d.ID_Empresa
	WHERE 
	b.Location_Ident in (SELECT x.SiteId FROM [app620].[CatIdEmpresaXCCMSContractVw] x WHERE x.SiteId IS NOT NULL)
	) r
	group by r.EMPLEADO,
	r.Concepto,
	r.Reg,	
	r.Accion,
	r.Unidad,
	--Importe,
	r.Porcentaje,
	r.Fecha,
	r.Semana,
	r.Fecha_Ini,
	r.Fecha_Fin,
	r.Duracion,
	r.Folio,
	r.Consecuencia,
	r.Control,
	r.ID_Empresa,
	r.CIA_IDReporteo,
	r.Folder,
	r.Compania,
	r.ID_REP) rr
	order by rr.EMPLEADO desc
END
GO
PRINT N'Creating [app620].[NivelesAutorizacionxEmpleadoxConcepto]...';


GO
CREATE PROCEDURE [app620].[NivelesAutorizacionxEmpleadoxConcepto]
(
	@EmpleadoIdent INT = 0--2964012
	,@ConceptoId INT = 0--2
	,@FolioId INT = 0--87
)
AS

BEGIN
	SET @ConceptoId = ISNULL(@ConceptoId, 0)

	--SELECT * FROM app620.CatSolicitudEmpleadosAutorizantes WHERE FolioSolicitud = @FolioId AND Empleado_Ident = @EmpleadoIdent AND ConceptoId = @ConceptoId AND Autorizador_Ident IS NOT NULL

	IF EXISTS(SELECT 1 FROM app620.CatSolicitudEmpleadosAutorizantes WHERE FolioSolicitud = @FolioId AND Empleado_Ident = @EmpleadoIdent AND ConceptoId = @ConceptoId AND Autorizador_Ident IS NOT NULL)
	BEGIN
		--SELECT 'verdadero'
		SELECT 
		NivelAutorizacion AS Nivel
		,Autorizador_Ident AS Id
		,b.Nombre AS Valor
		FROM app620.CatSolicitudEmpleadosAutorizantes a
		INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.Autorizador_Ident = b.Ident
		WHERE FolioSolicitud = @FolioId AND Empleado_Ident = @EmpleadoIdent AND ConceptoId = @ConceptoId AND Autorizador_Ident IS NOT NULL
	END
	ELSE
	BEGIN
		--SELECT 'falso'
		SELECT DISTINCT 
			 ISNULL(PEA.Nivel, 999) Nivel
			,PEA.EmpleadoId Id
			,Aut.Nombre		Valor
			--, PE.ConceptoId
		FROM
			 app620.CatPerfilEmpleadosAccesos PEA
		JOIN app620.CatPerfilEmpleados PE ON PE.Perfil_Ident = PEA.Perfil_Ident
		JOIN app620.RelPerfilEmpleadosConceptos REC ON REC.Perfil_Ident = PE.Perfil_Ident
		JOIN app620.CatConceptos C ON (C.ConceptoId	= REC.ConceptoId)
		JOIN [app620].[CatEmployeeCCMSVw] Aut ON Aut.Ident		= PEA.EmpleadoId
		JOIN [app620].[CatEmployeeCCMSVw] Emp ON Emp.Ident		= @EmpleadoIdent
			AND	(PE.Country_Ident = Emp.Country_Ident OR PE.Country_Ident = -1)
			AND	(PE.Location_Ident = Emp.Location_Ident OR PE.Location_Ident = -1)
			AND	(PE.Client_Ident = Emp.Client_Ident OR PE.Client_Ident = -1)
			AND	(PE.Program_Ident = Emp.Program_Ident OR PE.Program_Ident = -1)
			AND (PE.Contract_Type_Ident = Emp.Contract_Type_Ident OR PE.Contract_Type_Ident = -1)
		JOIN [app620].[CatRelLocationBiosCCMSVw] BiosCity ON (BiosCity.location_bios = PE.City_Ident  OR PE.City_Ident = -1)
			AND (BiosCity.location_ccms = Emp.Location_Ident)

		WHERE 
			PEA.Active		= 1
			AND	PE.TipoAccesoId	= 2	--El perfil es de Autorizadores
			AND PE.Active		= 1
			AND C.Active		= 1
			AND (
					C.ConceptoId	= @ConceptoId 
				OR 
					@ConceptoId	= 0
				)
			AND
				PEA.Nivel		<= C.NumeroNivelAutorizante
		ORDER BY Nivel
	END
END
GO
PRINT N'Creating [app620].[ProcesaSolicitudEmpleadoDetalleSi]...';


GO

CREATE PROCEDURE [app620].[ProcesaSolicitudEmpleadoDetalleSi]
 @SolicitudId INT
,@ListaEmpleados VARCHAR(MAX)
,@ConceptoMotivoId INT
,@ListaConceptoMotivo VARCHAR(MAX)
,@AplicaAtodos BIT =0
,@UserEmployeeId INT
,@Estatus INT = 0 OUTPUT
AS
SET XACT_ABORT ON;
SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRAN
	
	DECLARE @TempTableEmpleados TABLE (Id INT IDENTITY(1, 1),idEmp VARCHAR(100), estatus int default null)
	DECLARE @TempTableConceptos TABLE (Id INT IDENTITY(1, 1),idConceptoMotivo VARCHAR(100))

	INSERT INTO @TempTableEmpleados(idEmp)
	SELECT item FROM dbo.fnSplit(@ListaEmpleados,',')

	INSERT INTO @TempTableConceptos(idConceptoMotivo)
	SELECT item FROM dbo.fnSplit(@ListaConceptoMotivo,',')

	DECLARE @TotalRegistros Int = (Select count(*) from @TempTableEmpleados)	
	DECLARE @indiceBase int=1;

WHILE 	@indiceBase <= @TotalRegistros
BEGIN
	
	Declare @EmpleadoId Int= 0
	Declare @EstatusRegistro INT= NULL

	SELECT @EmpleadoId=idEmp, @EstatusRegistro=estatus FROM @TempTableEmpleados WHERE Id=@indiceBase
	
	IF @AplicaAtodos =0
		BEGIN
			DECLARE @Responsable INT=0
			SELECT @Responsable = Manager_Ident FROM [app620].[CatEmployeeCCMSVw] WHERE Ident = @EmpleadoId

			DECLARE @ExisteRegistro INT =0
			
			IF NOT EXISTS(SELECT 1 FROM [app620].CatSolicitudEmpleadosDetalle WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@EmpleadoId AND ConceptoMotivoId=@ConceptoMotivoId)
			SET @ExisteRegistro = 1

			IF @ExisteRegistro =0
				BEGIN
					EXEC [app620].[CatSolicitudEmpleadosDetalleSi]
									@SolicitudId = @SolicitudId,
									@CatEmpleadoId = @EmpleadoId,
									@ConceptoMotivoId = @ConceptoMotivoId,
									@ResponsableId = @Responsable,
									@ParametroConceptoMonto = NULL,
									@Detalle = NULL,
									@PeriodoNomina = NULL,
									@UserEmployeeId = @UserEmployeeId
				END
			ELSE
				BEGIN
					UPDATE [app620].CatSolicitudEmpleadosDetalle SET Active=1 WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@EmpleadoId AND ConceptoMotivoId=@ConceptoMotivoId
				END
		END									
	--ELSE
	--BEGIN
	--	--Si aplica a todos se crean los registros y se le agrega el mismo ConceptoMotivo
	--	INSERT INTO [app620].CatSolicitudEmpleadosDetalle (CatSolicitudId, CatEmpleadoId, CatConceptoMotivoId, Active)
	--	--UPDATE [app620].CatSolicitudEmpleadosDetalle SET CatConceptoMotivoId=@ConceptoMotivoId, Active=1 WHERE CatSolicitudId=@SolicitudId
	--END

		SET @indiceBase= @indiceBase+1
END
	COMMIT TRAN;
END TRY
BEGIN CATCH  -- Modulo de manejo de errores
	
    DECLARE @Error_Number INT ,
        @Error_Severity INT ,
        @Error_State INT ,
        @Error_Procedure VARCHAR(1000) ,
        @Error_Line INT ,
        @Error_Message VARCHAR(8000);
    SELECT  @Error_Number = ERROR_NUMBER() ,
            @Error_Severity = ERROR_SEVERITY() ,
            @Error_State = ERROR_STATE() ,
            @Error_Procedure = ERROR_PROCEDURE() ,
            @Error_Line = ERROR_LINE() ,
            @Error_Message = ERROR_MESSAGE();

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
	
	RAISERROR(@Error_Message,@Error_Severity, @Error_State);	
END CATCH;
GO
PRINT N'Creating [app620].[ProcesaSolicitudEmpleados]...';


GO

CREATE PROCEDURE [app620].[ProcesaSolicitudEmpleados]
@SolicitudId INT
,@Empleado_Ident INT 
,@Autorizantes VARCHAR(100) = NULL
,@UserEmployeeId INT
,@ListaEmpleados VARCHAR(MAX)
,@ParametroConceptoMonto DECIMAL(18,2)
,@Detalle VARCHAR(250)
--,@Tabla AS dbo.EmpleadosSolicitud READONLY  
,@Estatus Varchar(Max) = '' OUTPUT
AS
SET XACT_ABORT ON;
SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRAN
	
IF @ListaEmpleados = ''
BEGIN

	DECLARE @Perfil INT

	SELECT @Perfil= Perfil_Ident FROM [app620].[CatSolicitudes] WHERE FolioSolicitud = @SolicitudId
	
	IF EXISTS( SELECT 1 FROM [app620].CatSolicitudEmpleadosDetalle WHERE FolioSolicitud=@SolicitudId AND Empleado_Ident=@Empleado_Ident)
	SET @Estatus = '-1_Existe un empleado con el mismo CCMID en la solicitud'

	IF NOT EXISTS(SELECT 1 FROM
			app620.CatEmployeeCCMSVw AS Emp 
			JOIN app620.CatLocationVw AS Loc 
				ON Emp.Location_Ident = Loc.Location_Ident 
			JOIN app620.CatPerfilEmpleados Perfil
				ON	(Perfil.Perfil_Ident		= @Perfil					OR	@Perfil				= -1)
				--AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
				AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
				AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
				AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
				AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

				AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
				WHERE Emp.Ident = @Empleado_Ident)
	  SET @Estatus = '-2_No pertenece al perfil de la solicitud'

	
	IF @Estatus =''
	BEGIN
		--Cuando se requiere realizar solo una inserción
		INSERT INTO [app620].[CatEmpleadosSolicitudes] (
							   [FolioSolicitud]
							  ,[Empleado_Ident]
							  --,[Empleado_First_Name]
							  --,[Empleado_Middle_Name]
							  --,[Empleado_Last_Name]
							  --,[Empleado_Position_Code_Ident]
							  --,[Empleado_Position_Code_Title]
							  --,[Empleado_Contract_Type_Ident]
							  --,[Empleado_Contract_Type]
							  --,[Manager_Ident]
							  --,[Manager_First_Name]
							  --,[Manager_Middle_Name]
							  --,[Manager_Last_Name]
							  --,[Manager_Position_Code_Ident]
							  --,[Manager_Position_Code_Title]
							  --,[Manager_Contract_Type_Ident]
							  --,[Manager_Contract_Type]
							  ,ParametroConceptoMonto
							  --,Detalle
							  ,[Active])
				SELECT 
				@SolicitudId as FolioSolicitud
				,CE.Ident
				--,CE.[First_Name]
				--,CE.[Middle_Name]
				--,CE.[Last_Name]
				--,CE.[Position_Code_Ident]
				--,CE.Position_Code_Title
				--,CE.Contract_Type_Ident
				--,CE.Contract_Type
				--,CE.[Manager_Ident]
				--,CE.[Manager_First_Name]
				--,CE.[Manager_Middle_Name]
				--,CE.[Manager_Last_Name]
				--,MAN.[Position_Code_Ident] AS [Manager_Position_Code_Ident]
				--,MAN.Position_Code_Title AS [Manager_Position_Code_Title]
				--,MAN.Contract_Type_Ident AS [Manager_Contract_Type_Ident]
				--,MAN.Contract_Type AS [Manager_Contract_Type]
				,@ParametroConceptoMonto AS ParametroConceptoMonto
				--,@Detalle AS Detalle
				, 1 AS [Active]
				FROM [app620].[CatEmployeeCCMSVw] CE
				JOIN [app620].[CatEmployeeCCMSVw] MAN ON CE.Manager_Ident = MAN.Ident
				WHERE CE.Ident = @Empleado_Ident
	END
END
ELSE
BEGIN
	
	DECLARE @TempTable1 TABLE (Id INT IDENTITY(1, 1),idEmp VARCHAR(100), estatus int default null)

	INSERT INTO @TempTable1(idEmp)
	SELECT item FROM dbo.fnSplit(@ListaEmpleados,',')
		
	DECLARE @TotalRegistros Int = (Select count(*) from @TempTable1)-- #TempEmpleadosSolicitud)		
	DECLARE @indiceBase int=1;

	UPDATE [app620].[CatEmpleadosSolicitudes] SET Active =0 WHERE FolioSolicitud = @SolicitudId

-- Se recorre la tabla de empleados y se valida por medio de la columna estatus la acción a realizar
--Por medio de un Swith se encapsulara las acciones de crear o actualizar.
	WHILE 	@indiceBase <= @TotalRegistros
	BEGIN
	
		Declare @EmpleadoId Int= 0
		Declare @EstatusRegistro INT= NULL

		SELECT @EmpleadoId=idEmp, @EstatusRegistro=estatus FROM @TempTable1 WHERE Id=@indiceBase
			
		--Si estatus es 1 = Crear
		--Si Estatus es 2 = Actualizar y dar de baja
		--Si Estatus es 3 = Actualizar y reactivar
		 
		IF NOT EXISTS(SELECT * FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @SolicitudId AND Empleado_Ident = @EmpleadoId)--(@EstatusRegistro IS NULL )
		BEGIN
			INSERT INTO [app620].[CatEmpleadosSolicitudes] (
							   [FolioSolicitud]
							  ,[Empleado_Ident]
							  --,[Empleado_First_Name]
							  --,[Empleado_Middle_Name]
							  --,[Empleado_Last_Name]
							  --,[Empleado_Position_Code_Ident]
							  --,[Empleado_Position_Code_Title]
							  --,[Empleado_Contract_Type_Ident]
							  --,[Empleado_Contract_Type]
							  --,[Manager_Ident]
							  --,[Manager_First_Name]
							  --,[Manager_Middle_Name]
							  --,[Manager_Last_Name]
							  --,[Manager_Position_Code_Ident]
							  --,[Manager_Position_Code_Title]
							  --,[Manager_Contract_Type_Ident]
							  --,[Manager_Contract_Type]
							  ,[Active])
				SELECT 
				@SolicitudId as FolioSolicitud
				,CE.Ident
				--,CE.[First_Name]
				--,CE.[Middle_Name]
				--,CE.[Last_Name]
				--,CE.[Position_Code_Ident]
				--,CE.Position_Code_Title
				--,CE.Contract_Type_Ident
				--,CE.Contract_Type
				--,CE.[Manager_Ident]
				--,CE.[Manager_First_Name]
				--,CE.[Manager_Middle_Name]
				--,CE.[Manager_Last_Name]
				--,MAN.[Position_Code_Ident] AS [Manager_Position_Code_Ident]
				--,MAN.Position_Code_Title AS [Manager_Position_Code_Title]
				--,MAN.Contract_Type_Ident AS [Manager_Contract_Type_Ident]
				--,MAN.Contract_Type AS [Manager_Contract_Type]
				, 1 AS [Active]
				FROM [app620].[CatEmployeeCCMSVw] CE
				JOIN [app620].[CatEmployeeCCMSVw] MAN ON CE.Manager_Ident = MAN.Ident
				WHERE CE.Ident = @EmpleadoId	
		END
		ELSE --IF @EstatusRegistro=2 
			BEGIN 
				Update [app620].[CatEmpleadosSolicitudes] SET Active=1 WHERE [FolioSolicitud]= @SolicitudId AND [Empleado_Ident] =@EmpleadoId
			END
		--ELSE IF @EstatusRegistro=3
		--	BEGIN
		--		Update [app620].[CatEmpleadosSolicitudes] SET Active=0 WHERE [FolioSolicitud]= @SolicitudId AND [Empleado_Ident] =@EmpleadoId
		--	END

			SET @indiceBase= @indiceBase+1
	END
END
	COMMIT TRAN;
END TRY
BEGIN CATCH  -- Modulo de manejo de errores
	
    DECLARE @Error_Number INT ,
        @Error_Severity INT ,
        @Error_State INT ,
        @Error_Procedure VARCHAR(1000) ,
        @Error_Line INT ,
        @Error_Message VARCHAR(8000);
    SELECT  @Error_Number = ERROR_NUMBER() ,
            @Error_Severity = ERROR_SEVERITY() ,
            @Error_State = ERROR_STATE() ,
            @Error_Procedure = ERROR_PROCEDURE() ,
            @Error_Line = ERROR_LINE() ,
            @Error_Message = ERROR_MESSAGE();

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
	
	RAISERROR(@Error_Message,@Error_Severity, @Error_State);	
END CATCH;
GO
PRINT N'Creating [app620].[RelPeriodicidadPaisCMB]...';


GO

CREATE PROC [app620].[RelPeriodicidadPaisCMB]
@country VARCHAR(50)
AS
BEGIN

if (@country is null or @country = '')
BEGIN
	SELECT DISTINCT CPNOM.[PeriodicidadNominaId] As Ident
		,CPNOM.[Descripcion] As Valor FROM [app620].[CatPeriodicidadNomina] CPNOM 
		JOIN [app620].[RelPeriodicidadPais] RPP ON CPNOM.PeriodicidadNominaId = RPP.PeriodicidadNominaId AND RPP.Active=1 
		WHERE CPNOM.Active = 1 
END
ELSE
BEGIN
DECLARE @query nvarchar(max) = 'SELECT DISTINCT CPNOM.[PeriodicidadNominaId] As Ident '+
		',CPNOM.[Descripcion] As Valor FROM [app620].[CatPeriodicidadNomina] CPNOM '+
		'JOIN [app620].[RelPeriodicidadPais] RPP ON CPNOM.PeriodicidadNominaId = RPP.PeriodicidadNominaId AND RPP.Active=1 '+
		'WHERE CPNOM.Active = 1 AND RPP.Country_Ident IN ('+@country+')';

		 EXEC sp_executesql @query
END
END
GO
PRINT N'Creating [app620].[ReporteAuditoriasDetalleAutorizadoresSel]...';


GO
CREATE PROC [app620].[ReporteAuditoriasDetalleAutorizadoresSel]
	@FolioId INT = 0
	--@EID INT = 0,
	--@ConceptoId INT = 0
AS
BEGIN
	--DECLARE @FolioId INT = 89--90--89
	--DECLARE @EID INT = 1796962--3160115--1796962
	--DECLARE @ConceptoId INT = 44--2--44

	SELECT  DISTINCT
		[Autorizador_Ident]
		,[FolioSolicitud]
		,[Empleado_Ident]
		,a.[ConceptoId]
		,x.Descripcion As ConceptoDesc
		,NivelAutorizacion
		,i.Nombre
	FROM [app620].[CatSolicitudEmpleadosAutorizantes] a
	INNER JOIN [app620].[CatEmployeeCCMSVw] i ON a.Autorizador_Ident = i.Ident
	INNER JOIN [app620].[CatConceptos] x ON a.ConceptoId = x.ConceptoId
	where FolioSolicitud = @FolioId
	--AND ConceptoId= @ConceptoId
	--AND Empleado_Ident = @EID
	--AND Autorizador_Ident IS NOT NULL
	order by ConceptoId,NivelAutorizacion
END
GO
PRINT N'Creating [app620].[ReporteAuditoriasDetalleHistorialAutorizadoresSel]...';


GO
CREATE PROC [app620].[ReporteAuditoriasDetalleHistorialAutorizadoresSel]
	@FolioId INT = 0,
	@EID INT = 0, --Autorizador Ident
	@ConceptoId INT = 0
AS
BEGIN
	--DECLARE @FolioId INT = 89
	--DECLARE @EID INT = 666229--3160115--1796962
	--DECLARE @ConceptoId INT = 44

	SELECT  
		[Autorizador_Ident]
		,[FolioSolicitud]
		,[Empleado_Ident]
		,a.[ConceptoId]
		,x.Descripcion As ConceptoDesc
		--,NivelAutorizacion
		--,LastModifiedDate
		,convert(nvarchar(19),a.LastModifiedDate,120) As FechaModificacion
		,i.Nombre
		,CASE 
			WHEN Pendiente = 1 THEN 'Pendiente'
			WHEN Autorizado = 1 THEN 'Autorizado'
			WHEN Rechazado = 1 THEN 'Rechazado'
			WHEN Cancelado = 1 THEN 'Cancelado'
			ELSE 'En borrador'
		END AS Accion
	FROM [app620].[CatSolicitudEmpleadosAutorizantesLog] a
	INNER JOIN [app620].[CatEmployeeCCMSVw] i ON a.Autorizador_Ident = i.Ident
	INNER JOIN [app620].[CatConceptos] x ON a.ConceptoId = x.ConceptoId
	where FolioSolicitud = @FolioId
	AND a.ConceptoId= @ConceptoId
	AND a.Autorizador_Ident = @EID
	AND Autorizador_Ident IS NOT NULL
	order by a.LastModifiedDate DESC
END
GO
PRINT N'Creating [app620].[ReporteAuditoriasDetalleHistorialSel]...';


GO
CREATE PROC [app620].[ReporteAuditoriasDetalleHistorialSel]
	@FolioId INT = 0,
	@EID INT = 0,
	@ConceptoId INT = 0
AS
BEGIN
	--DECLARE @FolioId INT = 88
	--DECLARE @EID INT = 3160115
	--DECLARE @ConceptoId INT = 6

	--SELECT
	--CASE WHEN y.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), a.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
	--		   ELSE CONVERT(VARCHAR(22), a.ParametroConceptoMonto) + ' ' + y.Descripcion 
	--	  END AS Monto,
	--a.EstatusSolicitudId,
	--a.MotivosSolicitudId,
	--f.Descripcion As MotivoSolicitudDesc,
	--b.ConceptoMotivoId,
	--d.Descripcion As ConceptoMotivoDesc,
	--b.ResponsableId,
	----c.Nombre As NombreResponsable, 
	----convert(date,a.LastModifiedDate) As FechaModificacion,
	----convert(nvarchar(19),h.LastModifiedDate,120) As FechaModificacion,
	--convert(nvarchar(19),a.LastModifiedDate,120) As FechaModificacion,
	--h.Autorizador_Ident,
	--i.Nombre As NombreAutorizador
	--,h.Accion
	--,h.NivelAutorizacion
	--FROM [app620].[CatEmpleadosSolicitudesLog] a
	--INNER JOIN [app620].[CatSolicitudEmpleadosDetalleLog] b ON a.FolioSolicitud = b.FolioSolicitud AND a.Empleado_Ident = b.Empleado_Ident AND a.ConceptoId = b.ConceptoId AND a.LastModifiedDate = b.LastModifiedDate
	--LEFT JOIN [app620].[CatEmployeeCCMSVw] c ON b.ResponsableId = c.Ident
	--INNER JOIN [app620].[CatConceptosMotivos] d ON b.ConceptoMotivoId = d.ConceptoMotivoId
	--INNER JOIN [app620].[CatMotivosSolicitud] f ON a.MotivosSolicitudId = f.MotivosSolicitudId
	--INNER JOIN [app620].[CatConceptos] x ON a.ConceptoId = x.ConceptoId
	--INNER JOIN [app620].[CatParametroConceptos] y ON x.ParametroConceptoId = y.ParametroConceptoId
	--LEFT JOIN [app620].[CatEmployeeCCMSVw] g ON a.Empleado_Ident = g.Ident
	--INNER JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = g.country_ident
	--INNER JOIN (
	--	SELECT  DISTINCT 
	--		[Autorizador_Ident]
	--		,[FolioSolicitud]
	--		,[Empleado_Ident]
	--		,[ConceptoId]
	--		,NivelAutorizacion
	--		--,LastModifiedDate
	--		,CASE 
	--			WHEN Pendiente = 1 THEN 'Pendiente'
	--			WHEN Autorizado = 1 THEN 'Autorizado'
	--			WHEN Rechazado = 1 THEN 'Rechazado'
	--			WHEN Cancelado = 1 THEN 'Cancelado'
	--			ELSE 'Ninguna'
	--		END AS Accion
	--	FROM [ASN2].[app620].[CatSolicitudEmpleadosAutorizantesLog]
	--	where FolioSolicitud = @FolioId
	--	AND ConceptoId= @ConceptoId
	--	AND Empleado_Ident = @EID
	--	AND Autorizador_Ident IS NOT NULL
	--) h ON @FolioId = h.FolioSolicitud AND @EID = h.Empleado_Ident AND @ConceptoId = h.ConceptoId
	--INNER JOIN [app620].[CatEmployeeCCMSVw] i ON h.Autorizador_Ident = i.Ident
	--WHERE a.FolioSolicitud = @FolioId
	--AND a.Empleado_Ident = @EID
	--AND a.ConceptoId = @ConceptoId
	--ORDER BY FechaModificacion DESC
	----ORDER BY h.LastModifiedDate DESC


	SELECT
	CASE WHEN y.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), a.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
			   ELSE CONVERT(VARCHAR(22), a.ParametroConceptoMonto) + ' ' + y.Descripcion 
		  END AS Monto,
	a.EstatusSolicitudId,
	a.MotivosSolicitudId,
	f.Descripcion As MotivoSolicitudDesc,
	b.ConceptoMotivoId,
	d.Descripcion As ConceptoMotivoDesc,
	--b.ResponsableId,
	--c.Nombre As NombreResponsable, 
	--convert(date,a.LastModifiedDate) As FechaModificacion
	convert(nvarchar(19),a.LastModifiedDate,120) As FechaModificacion
	FROM [app620].[CatEmpleadosSolicitudesLog] a
	INNER JOIN [app620].[CatSolicitudEmpleadosDetalleLog] b ON a.FolioSolicitud = b.FolioSolicitud AND a.Empleado_Ident = b.Empleado_Ident AND a.ConceptoId = b.ConceptoId AND a.LastModifiedDate = b.LastModifiedDate
	LEFT JOIN [app620].[CatEmployeeCCMSVw] c ON b.ResponsableId = c.Ident
	INNER JOIN [app620].[CatConceptosMotivos] d ON b.ConceptoMotivoId = d.ConceptoMotivoId
	INNER JOIN [app620].[CatMotivosSolicitud] f ON a.MotivosSolicitudId = f.MotivosSolicitudId
	INNER JOIN [app620].[CatConceptos] x ON a.ConceptoId = x.ConceptoId
	INNER JOIN [app620].[CatParametroConceptos] y ON x.ParametroConceptoId = y.ParametroConceptoId
	LEFT JOIN [app620].[CatEmployeeCCMSVw] g ON a.Empleado_Ident = g.Ident
	INNER JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = g.country_ident
	WHERE a.FolioSolicitud = @FolioId
	AND a.Empleado_Ident = @EID
	AND a.ConceptoId = @ConceptoId
	ORDER BY FechaModificacion DESC
END
GO
PRINT N'Creating [app620].[ReporteAuditoriasDetalleSel]...';


GO
CREATE PROC [app620].[ReporteAuditoriasDetalleSel]
@FolioId INT = 0
AS
BEGIN
	--DECLARE @FolioId INT = 88

	SELECT
	b.FolioSolicitud, 
	b.Empleado_Ident, 
	b.ConceptoId, 
	g.Descripcion AS ConceptoDesc,
	b.ConceptoMotivoId, 
	f.Descripcion AS ConceptoMotivoDesc,
	b.ResponsableId, 
	e.Nombre As NombreResponsable,
	b.PeriodoOriginalId,
	c.ParametroConceptoMonto, 
	c.MotivosSolicitudId, 
	h.Descripcion AS MotivoSolicitudDesc,
	c.EstatusSolicitudId,
	d.Nombre As NombreEmpleado,
	convert(date,c.LastModifiedDate) AS FechaDeModificacion,
	convert(date,c.CreatedDate) AS FechaDeCreacion
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatSolicitudEmpleadosDetalle] b ON b.FolioSolicitud = a.FolioSolicitud
	INNER JOIN [app620].[CatEmpleadosSolicitudes] c ON c.FolioSolicitud = b.FolioSolicitud and c.Empleado_Ident = b.Empleado_Ident AND c.ConceptoId = b.ConceptoId
	LEFT JOIN [app620].[CatEmployeeCCMSVw] d ON b.Empleado_Ident = d.Ident
	LEFT JOIN [app620].[CatEmployeeCCMSVw] e ON b.ResponsableId = e.Ident
	INNER JOIN [app620].[CatConceptosMotivos] f ON b.ConceptoMotivoId = f.ConceptoMotivoId
	INNER JOIN [app620].[CatConceptos] g ON b.ConceptoId = g.ConceptoId
	INNER JOIN [app620].[CatMotivosSolicitud] h ON c.MotivosSolicitudId = h.MotivosSolicitudId
	WHERE a.PeriodoNominaId IS NOT NULL
	AND a.FolioSolicitud = @FolioId
	ORDER BY b.LastModifiedDate DESC
END
GO
PRINT N'Creating [app620].[ReporteAuditoriasSel]...';


GO
CREATE PROC [app620].[ReporteAuditoriasSel]
AS
BEGIN
	SELECT
	a.PeriodoNominaId, a.FolioSolicitud, a.Fecha_Solicitud, Solicitante_Ident, EstatusSolicitudId, b.Nombre AS NombreDelSolicitante, a.LastModifiedDate AS FechaDeModificacion, YEAR(a.Fecha_Solicitud) As Anio
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.Solicitante_Ident = b.Ident
	WHERE a.PeriodoNominaId IS NOT NULL
	ORDER BY a.FolioSolicitud DESC
END
GO
PRINT N'Creating [app620].[ReporteConceptoGeneralSel]...';


GO
CREATE PROC [app620].[ReporteConceptoGeneralSel]
AS
	BEGIN
		DECLARE
			@PeriodoNominaId INT = 0
			,@CurrentStatus VARCHAR(10)

		SELECT	@PeriodoNominaId = PeriodoNominaId
		FROM	[app620].[CatPeriodosNomina]
		WHERE	PeriodicidadNominaId = 'C' 
				AND TipoPeriodo = 'O'
				AND convert(date,getdate()) between convert(date,FechaInicio) and convert(date,FechaFin)
		ORDER BY CreatedDate DESC		

		SELECT
		COUNT(EMS.ConceptoId) CONTEO,
				C.Descripcion CONCEPTO,
				CASE
					WHEN C.ParametroConceptoId IN (3)
					THEN sum(EMS.ParametroConceptoMonto)
					ELSE 0
				END IMPORTE,
				c.ConceptoId
				--EMS.*
				--sum(EMS.ParametroConceptoMonto)
				--'' ACCION,
				--CASE
				--	WHEN C.ParametroConceptoId IN (1,2)
				--	THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
				--	ELSE ''
				--END UNIDAD,
				--CASE
				--	WHEN C.ParametroConceptoId IN (3)
				--	THEN sum(EMS.ParametroConceptoMonto)
				--	ELSE 0
				--END IMPORTE
				--CASE
				--	WHEN C.ParametroConceptoId IN (4)
				--	THEN CONVERT(VARCHAR(10),EMS.ParametroConceptoMonto)
				--	ELSE ''
				--END PORCENTAJE
		FROM	[app620].[CatSolicitudes] S
				JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
				INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
				INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
				--LEFT JOIN [app620].[CatEmployeeCCMSVw] E ON E.Ident = EMS.[Empleado_Ident]
				--INNER JOIN [app620].[CatLocationVw] AS b ON E.Location_Ident = b.Location_Ident
				--INNER JOIN [ITAL].[app012].[RelLocationBiosCCMSVw] LB ON LB.location_ccms = E.Location_Ident
				--INNER JOIN [app620].[CatPerfilEmpleados] PE ON	ISNULL(NULLIF(PE.Country_Ident, -1), b.country_ident) = b.country_ident AND 
				--												ISNULL(NULLIF(PE.City_Ident, -1), LB.location_bios) = LB.location_bios AND 
				--												ISNULL(NULLIF(PE.Location_Ident, -1), E.Location_Ident) = E.Location_Ident AND 
				--												ISNULL(NULLIF(PE.Client_Ident, -1), E.Client_Ident) = E.Client_Ident AND
				--												ISNULL(NULLIF(PE.Program_Ident, -1),E.Program_Ident) = E.Program_Ident AND
				--												ISNULL(NULLIF(PE.Contract_Type_Ident, -1), E.Contract_Type_Ident) = E.Contract_Type_Ident
				--INNER JOIN [app620].[CatPerfilEmpleadosAccesos] PEA ON PE.Perfil_Ident = PEA.Perfil_Ident
				INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		WHERE	
				S.EstatusSolicitudId = 'CE'
				AND EMS.EstatusSolicitudId = 'CE'
				--AND PE.TipoAccesoId = 3
				--AND PE.Active = 1
				--AND PEA.Active = 1
				AND PN.PeriodoNominaId = @PeriodoNominaId
				--AND PEA.EmpleadoId = @EmpleadoId
				--AND E.Current_Status IN (CASE WHEN @Activos = 1 THEN 'Active'  ELSE 'Terminated' END)
		GROUP BY EMS.ConceptoId,C.Descripcion, C.ParametroConceptoId, c.ConceptoId
	END
GO
PRINT N'Creating [app620].[ReporteConceptoXEstatusSel]...';


GO
CREATE PROC app620.ReporteConceptoXEstatusSel
@FechaIni varchar(15) --= '2019-09-28'
,@FechaFin varchar(15) --= '2019-10-29'
--,@City int --= 'Monterrey'
--,@Site int --= 317
--,@Solicitante int --= 1286941
,@EstatusSolicitud varchar(5) --= 'A'
,@EstatusConcepto varchar(5) --= 'A'
AS
BEGIN
	--DECLARE
	--@FechaIni varchar(15) --= '2019-09-28'
	--,@FechaFin varchar(15) --= '2019-10-29'
	--,@City varchar(20) --= 'Monterrey'
	--,@Site int --= 317
	--,@Solicitante int --= 1286941
	--,@EstatusSolicitud varchar(5) --= 'A'
	--,@EstatusConcepto varchar(5) --= 'A'

	SELECT
	Ciudad,
	Site,
	Concepto,
	SUM(Total) AS Total,
	EstatusSol,
	EstatusCon
	FROM
	(SELECT
		r.city As Ciudad,
		b.Location_Name As Site,
		C.Descripcion Concepto,
		CASE
			WHEN C.ParametroConceptoId IN (3)
			THEN sum(EMS.ParametroConceptoMonto)
			ELSE 0
		END Total
		--,convert(nvarchar(19),S.Fecha_Solicitud,120) As Fecha
		,d.Descripcion AS EstatusSol
		,CASE WHEN EMS.EstatusSolicitudId IS NOT NULL THEN
				(SELECT Descripcion FROM  [app620].[CatEstatusSolicitudes] WHERE EstatusSolicitudId = EMS.EstatusSolicitudId)
			ELSE 
				''
			END
		 AS EstatusCon
	FROM [app620].[CatSolicitudes] S
		JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
		INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
		INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
		INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		INNER JOIN [app620].[CatEmployeeCCMSVw] b on S.Solicitante_Ident = b.Ident
		INNER JOIN [app620].[CatRelLocationBiosCCMSVw] r on b.Location_Ident = r.location_ccms
		INNER JOIN [app620].[CatEstatusSolicitudes] d on S.EstatusSolicitudId = d.EstatusSolicitudId
	WHERE	
		--S.Solicitante_Ident = isnull(@Solicitante,S.Solicitante_Ident)
		--AND
		--r.location_bios = isnull(@City,r.location_bios)
		--AND
		--b.Location_Ident = isnull(@Site,b.Location_Ident)
		--AND
		S.Fecha_Solicitud between isnull(@FechaIni,S.Fecha_Solicitud) and isnull(@FechaFin,S.Fecha_Solicitud)
		AND
		S.EstatusSolicitudId = isnull(IIF(LEN(@EstatusSolicitud) = 0,NULL,@EstatusSolicitud),S.EstatusSolicitudId)
		AND 
		EMS.EstatusSolicitudId = isnull(IIF(LEN(@EstatusConcepto) = 0,NULL,@EstatusConcepto),EMS.EstatusSolicitudId)
		AND 
		C.ParametroConceptoId = 3 -- Montos
	GROUP BY r.city, b.Location_Name, C.Descripcion, C.ParametroConceptoId, S.Fecha_Solicitud, d.Descripcion, EMS.EstatusSolicitudId
	) X
	GROUP BY Concepto, Ciudad, Site, EstatusSol, EstatusCon
	order by Concepto
END
GO
PRINT N'Creating [app620].[ReporteGeneralDetalleSel]...';


GO
CREATE PROC [app620].[ReporteGeneralDetalleSel]
@FolioId INT = 0
AS
BEGIN
	--DECLARE @FolioId INT = 88

	SELECT
	b.FolioSolicitud,
	d.country_full_name,
	d.country_ident,
	d.Location_Name,
	d.Location_Ident,
	d.Client_Name,
	d.Client_Ident,
	d.[Program_Name],
	d.Program_Ident,
	i.Ident AS JefeInmediatoCCMSID,
	i.Nombre AS JefeInmediatoNombre,
	d.Ident AS EmpleadoCCMSID,
	d.Nombre AS EmpleadoNombre,
	b.ConceptoId, 
	g.Descripcion AS ConceptoDesc,
	c.MotivosSolicitudId, 
	h.Descripcion AS MotivoSolicitudDesc,
	b.ConceptoMotivoId, 
	f.Descripcion AS ConceptoMotivoDesc,
	b.ResponsableId, 
	e.Nombre As NombreResponsable,
	CASE WHEN y.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), c.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
		ELSE CONVERT(VARCHAR(22), c.ParametroConceptoMonto) + ' ' + y.Descripcion 
	END AS Monto,
	--b.PeriodoOriginalId,
	--c.ParametroConceptoMonto, 
	c.EstatusSolicitudId
	--d.Nombre As NombreEmpleado,
	--convert(date,c.LastModifiedDate) AS FechaDeModificacion,
	--convert(date,c.CreatedDate) AS FechaDeCreacion
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatSolicitudEmpleadosDetalle] b ON b.FolioSolicitud = a.FolioSolicitud
	INNER JOIN [app620].[CatEmpleadosSolicitudes] c ON c.FolioSolicitud = b.FolioSolicitud and c.Empleado_Ident = b.Empleado_Ident AND c.ConceptoId = b.ConceptoId
	LEFT JOIN [app620].[CatEmployeeCCMSVw] d ON b.Empleado_Ident = d.Ident
	LEFT JOIN [app620].[CatEmployeeCCMSVw] e ON b.ResponsableId = e.Ident
	INNER JOIN [app620].[CatConceptosMotivos] f ON b.ConceptoMotivoId = f.ConceptoMotivoId
	INNER JOIN [app620].[CatConceptos] g ON b.ConceptoId = g.ConceptoId
	INNER JOIN [app620].[CatMotivosSolicitud] h ON c.MotivosSolicitudId = h.MotivosSolicitudId
	LEFT JOIN [app620].[CatEmployeeCCMSVw] i ON d.Manager_Ident = i.Ident
	INNER JOIN [app620].[CatParametroConceptos] y ON g.ParametroConceptoId = y.ParametroConceptoId
	INNER JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = d.country_ident
	WHERE a.PeriodoNominaId IS NOT NULL
	AND a.FolioSolicitud = @FolioId
	ORDER BY b.LastModifiedDate DESC
END
GO
PRINT N'Creating [app620].[ReporteGeneralSel]...';


GO

CREATE PROC [app620].[ReporteGeneralSel]
AS
BEGIN
	SELECT
	a.PeriodoNominaId, a.FolioSolicitud, a.Fecha_Solicitud, Solicitante_Ident, a.EstatusSolicitudId, b.Nombre AS NombreDelSolicitante, a.LastModifiedDate AS FechaDeModificacion, YEAR(a.Fecha_Solicitud) As Anio
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.Solicitante_Ident = b.Ident
	WHERE a.PeriodoNominaId IS NOT NULL
	ORDER BY a.FolioSolicitud DESC
END
GO
PRINT N'Creating [app620].[ReporteIndividualDetalleSel]...';


GO

CREATE PROC [app620].[ReporteIndividualDetalleSel]
@FolioId INT = 0
AS
BEGIN
	--DECLARE @FolioId INT = 88

	SELECT
	b.FolioSolicitud,
	d.country_full_name,
	d.country_ident,
	d.Location_Name,
	d.Location_Ident,
	d.Client_Name,
	d.Client_Ident,
	d.[Program_Name],
	d.Program_Ident,
	i.Ident AS JefeInmediatoCCMSID,
	i.Nombre AS JefeInmediatoNombre,
	d.Ident AS EmpleadoCCMSID,
	d.Nombre AS EmpleadoNombre,
	b.ConceptoId, 
	g.Descripcion AS ConceptoDesc,
	c.MotivosSolicitudId, 
	h.Descripcion AS MotivoSolicitudDesc,
	b.ConceptoMotivoId, 
	f.Descripcion AS ConceptoMotivoDesc,
	b.ResponsableId, 
	e.Nombre As NombreResponsable,
	CASE WHEN y.ParametroConceptoId = 3 THEN CONVERT(VARCHAR(22), c.ParametroConceptoMonto) + ' ' + TM.TipoDeMoneda
		ELSE CONVERT(VARCHAR(22), c.ParametroConceptoMonto) + ' ' + y.Descripcion 
	END AS Monto,
	--b.PeriodoOriginalId,
	--c.ParametroConceptoMonto, 
	c.EstatusSolicitudId
	--d.Nombre As NombreEmpleado,
	--convert(date,c.LastModifiedDate) AS FechaDeModificacion,
	--convert(date,c.CreatedDate) AS FechaDeCreacion
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatSolicitudEmpleadosDetalle] b ON b.FolioSolicitud = a.FolioSolicitud
	INNER JOIN [app620].[CatEmpleadosSolicitudes] c ON c.FolioSolicitud = b.FolioSolicitud and c.Empleado_Ident = b.Empleado_Ident AND c.ConceptoId = b.ConceptoId
	LEFT JOIN [app620].[CatEmployeeCCMSVw] d ON b.Empleado_Ident = d.Ident
	LEFT JOIN [app620].[CatEmployeeCCMSVw] e ON b.ResponsableId = e.Ident
	INNER JOIN [app620].[CatConceptosMotivos] f ON b.ConceptoMotivoId = f.ConceptoMotivoId
	INNER JOIN [app620].[CatConceptos] g ON b.ConceptoId = g.ConceptoId
	INNER JOIN [app620].[CatMotivosSolicitud] h ON c.MotivosSolicitudId = h.MotivosSolicitudId
	LEFT JOIN [app620].[CatEmployeeCCMSVw] i ON d.Manager_Ident = i.Ident
	INNER JOIN [app620].[CatParametroConceptos] y ON g.ParametroConceptoId = y.ParametroConceptoId
	INNER JOIN [app620].[CatTipoDeMoneda] TM ON TM.Pais = d.country_ident
	WHERE a.PeriodoNominaId IS NOT NULL
	AND a.FolioSolicitud = @FolioId
	ORDER BY b.LastModifiedDate DESC
END
GO
PRINT N'Creating [app620].[ReporteIndividualSel]...';


GO

CREATE PROC [app620].[ReporteIndividualSel]
@SolicitanteIdent INT = 0
AS
BEGIN
	SELECT
	a.PeriodoNominaId, a.FolioSolicitud, a.Fecha_Solicitud, Solicitante_Ident, a.EstatusSolicitudId, b.Nombre AS NombreDelSolicitante, a.LastModifiedDate AS FechaDeModificacion, YEAR(a.Fecha_Solicitud) As Anio
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.Solicitante_Ident = b.Ident
	WHERE a.PeriodoNominaId IS NOT NULL
	AND a.Solicitante_Ident = @SolicitanteIdent
	ORDER BY a.FolioSolicitud DESC
END
GO
PRINT N'Creating [app620].[ReporteSolcitudSel]...';


GO
CREATE PROC app620.ReporteSolcitudSel
@FechaIni varchar(15) --= '2019-09-28'
,@FechaFin varchar(15) --= '2019-10-29'
--,@City int --= 'Monterrey'
--,@Site int --= 317
--,@Solicitante int --= 1286941
--,@Estatus varchar(10) --= 'CE'
AS
BEGIN
	--DECLARE
	--@FechaIni varchar(15) --= '2019-09-28'
	--,@FechaFin varchar(15) --= '2019-10-29'
	--,@City varchar(20) --= 'Monterrey'
	--,@Site int --= 317
	--,@Solicitante int --= 1286941
	--,@Estatus varchar(5) = 'CE'

	SELECT
	c.city AS Ciudad, 
	b.Location_Name AS Site, 
	a.Solicitante_Ident AS SolicitanteCCMSID, 
	convert(nvarchar(19),a.Fecha_Solicitud,120) As Fecha, 
	a.FolioSolicitud AS Folio, 
	d.Descripcion AS Estatus
	FROM app620.CatSolicitudes a
	INNER JOIN [app620].[CatEmployeeCCMSVw] b on a.Solicitante_Ident = b.Ident
	INNER JOIN [app620].[CatRelLocationBiosCCMSVw] c on b.Location_Ident = c.location_ccms
	INNER JOIN [app620].[CatEstatusSolicitudes] d on a.EstatusSolicitudId = d.EstatusSolicitudId
	WHERE 
	--a.Solicitante_Ident = isnull(@Solicitante,a.Solicitante_Ident)
	--AND
	--c.location_bios = isnull(@City,c.location_bios)
	--AND
	--b.Location_Ident = isnull(@Site,b.Location_Ident)
	--AND
	--d.EstatusSolicitudId = isnull(@Estatus,d.EstatusSolicitudId)
	--AND
	a.Fecha_Solicitud between isnull(@FechaIni,a.Fecha_Solicitud) and isnull(@FechaFin,a.Fecha_Solicitud)
	--ORDER BY a.CreatedDate DESC
END
GO
PRINT N'Creating [app620].[ReporteSolicitudXEstatusSel]...';


GO
CREATE PROC app620.ReporteSolicitudXEstatusSel
@FechaIni varchar(15) --= '2019-09-28'
,@FechaFin varchar(15) --= '2019-10-29'
--,@City int --= 1
--,@Site int --= 317
--,@Solicitante int --= 1286941
,@EstatusSolicitud varchar(50) --= 'A'
,@EstatusConcepto varchar(50) --= 'A'
AS
BEGIN
	--DECLARE
	--@FechaIni varchar(15) --= '2019-09-28'
	--,@FechaFin varchar(15) --= '2019-10-29'
	--,@City varchar(20) --= 'Monterrey'
	--,@Site int --= 317
	--,@Solicitante int --= 1286941
	--,@EstatusSolicitud varchar(5) = 'A'
	--,@EstatusConcepto varchar(5) = 'A'

	SELECT
		S.FolioSolicitud As Folio,
		C.Descripcion Concepto,
		CASE
			WHEN C.ParametroConceptoId IN (3)
			THEN sum(EMS.ParametroConceptoMonto)
			ELSE 0
		END Total
		,r.city As Ciudad
		,b.Location_Name As Site
		,convert(nvarchar(19),S.Fecha_Solicitud,120) As Fecha
		,d.Descripcion AS EstatusSol
		,CASE WHEN EMS.EstatusSolicitudId IS NOT NULL THEN
				(SELECT Descripcion FROM  [app620].[CatEstatusSolicitudes] WHERE EstatusSolicitudId = EMS.EstatusSolicitudId)
			ELSE 
				''
			END
		 AS EstatusCon
		,S.Solicitante_Ident AS SolicitanteCCMSID
	FROM [app620].[CatSolicitudes] S
		JOIN [app620].[CatEmpleadosSolicitudes] EMS ON S.FolioSolicitud = EMS.FolioSolicitud
		INNER JOIN [app620].[CatConceptos] C ON C.ConceptoId = EMS.ConceptoId
		INNER JOIN [app620].[CatConceptosPeopleSoft] PS ON PS.ConceptoId = C.PeopleSoftId
		INNER JOIN [app620].[CatPeriodosNomina] PN ON PN.PeriodoNominaId = S.PeriodoNominaId
		INNER JOIN [app620].[CatEmployeeCCMSVw] b on S.Solicitante_Ident = b.Ident
		INNER JOIN [app620].[CatRelLocationBiosCCMSVw] r on b.Location_Ident = r.location_ccms
		INNER JOIN [app620].[CatEstatusSolicitudes] d on S.EstatusSolicitudId = d.EstatusSolicitudId
		--INNER JOIN [app620].[CatEstatusSolicitudes] e on EMS.EstatusSolicitudId = d.EstatusSolicitudId
	WHERE	
		--S.Solicitante_Ident = isnull(@Solicitante,S.Solicitante_Ident)
		--AND
		--r.location_bios = isnull(@City,r.location_bios)
		--AND
		--b.Location_Ident = isnull(@Site,b.Location_Ident)
		--AND
		S.Fecha_Solicitud between isnull(@FechaIni,S.Fecha_Solicitud) and isnull(@FechaFin,S.Fecha_Solicitud)
		AND
		S.EstatusSolicitudId = isnull(IIF(LEN(@EstatusSolicitud) = 0,NULL,@EstatusSolicitud),S.EstatusSolicitudId)
		AND 
		EMS.EstatusSolicitudId = isnull(IIF(LEN(@EstatusConcepto) = 0,NULL,@EstatusConcepto),EMS.EstatusSolicitudId)
		AND 
		C.ParametroConceptoId = 3 -- Montos
	GROUP BY S.FolioSolicitud, EMS.ConceptoId, C.Descripcion, C.ParametroConceptoId, r.city, b.Location_Name, S.Fecha_Solicitud, d.Descripcion, S.Solicitante_Ident, EMS.EstatusSolicitudId
END
GO
PRINT N'Creating [app620].[SolicitantePendienteDeEnviarSel]...';


GO
CREATE PROCEDURE app620.SolicitantePendienteDeEnviarSel
AS
	BEGIN
		SELECT	DISTINCT S.Solicitante_Ident
		FROM	app620.CatSolicitudes S WITH(NOLOCK)
		WHERE	S.EstatusSolicitudId IN ('EB','R')
	END
GO
PRINT N'Creating [app620].[SolicitudEmpleadosxPerfilCMB]...';


GO
CREATE PROCEDURE [app620].[SolicitudEmpleadosxPerfilCMB]
(
	 @Perfil_Ident			INT = -1
	 ,@Solicitud INT =0
)
AS

BEGIN

	IF @Solicitud =0
	BEGIN
		SELECT
			 @Perfil_Ident			= ISNULL(@Perfil_Ident, -1)
	END
	ELSE
	BEGIN
		SELECT @Perfil_Ident = [Perfil_Ident] FROM [app620].[CatSolicitudes] WHERE [FolioSolicitud] = @Solicitud	
	END

		SELECT
			  Emp.Ident 
			, Emp.Nombre AS Value	
		FROM
			app620.CatEmployeeCCMSVw AS Emp 
			JOIN app620.CatLocationVw AS Loc 
				ON Emp.Location_Ident = Loc.Location_Ident 
			JOIN app620.CatPerfilEmpleados Perfil
				ON	(Perfil.Perfil_Ident		= @Perfil_Ident				OR	@Perfil_Ident				= -1)

				--AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
				AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
				AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
				AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
				AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

				AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
			JOIN app620.CatRelLocationBiosCCMSVw LocBIOS
				ON	(LocBIOS.[location_bios]	= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)
				AND	(LocBIOS.[location_ccms]	= Loc.Location_Ident)
			LEFT JOIN [app620].[CatEmpleadosSolicitudes] CES ON CES.Empleado_Ident = Emp.Ident
			LEFT JOIN [app620].[CatConceptos] CC ON CC.ConceptoId = Perfil.ConceptoId
			ORDER BY CES.FolioSolicitud DESC
	
END
GO
PRINT N'Creating [app620].[SolicitudEmpleadosxPerfilSel]...';


GO
CREATE PROCEDURE [app620].[SolicitudEmpleadosxPerfilSel]
(
	 @Perfil_Ident			INT = -1
	 ,@Solicitud INT =0
)
AS

BEGIN

	IF @Solicitud =0
	BEGIN
		SELECT
			 @Perfil_Ident			= ISNULL(@Perfil_Ident, -1)
	END
	ELSE
	BEGIN
		SELECT @Perfil_Ident = [Perfil_Ident] FROM [app620].[CatSolicitudes] WHERE [FolioSolicitud] = @Solicitud	
	END

		SELECT
			  Emp.Ident
			, Emp.Nombre
			, Emp.First_Name
			, Emp.Last_Name
			, Emp.Manager_Ident
			, Emp.Manager_First_Name
			, Emp.Manager_Last_Name

			, Emp.Program_Ident
			, Emp.Program_Name
			, Emp.Client_Ident
			, Emp.Client_Name
			, Emp.Company_Ident
			, Emp.Company_Name
			, Emp.Contract_Type_Ident
			, Emp.Contract_Type
			, Emp.Position_Code_Ident
			, Emp.Position_Code_Title

			, Loc.Location_Ident
			, Loc.full_name
			, Loc.country_ident
			, Loc.country_full_name
			, LocBIOS.[location_bios] city_Ident
			, LocBIOS.LocationName city
			, Emp.Current_Status
			,(CASE WHEN CES.FolioSolicitud IS NULL THEN 0 ELSE 1 END) AS Existe
			,(CASE WHEN CES.FolioSolicitud IS NULL THEN 1 ELSE 0 END) AS EsNuevo
			,CASE
				WHEN COUNT(CC.Descripcion) > 1
				THEN 'VARIOS'
				ELSE (	SELECT	Descripcion
						FROM	[app620].[RelPerfilEmpleadosConceptos] A WITH(NOLOCK)
								JOIN app620.CatConceptos B ON A.ConceptoId = B.ConceptoId
						WHERE	A.Perfil_Ident = Perfil.Perfil_Ident)
			END AS ConceptoNombre
	
		FROM
			app620.CatEmployeeCCMSVw AS Emp 
			JOIN app620.CatLocationVw AS Loc 
				ON Emp.Location_Ident = Loc.Location_Ident 
			JOIN app620.CatPerfilEmpleados Perfil
				ON	(Perfil.Perfil_Ident		= @Perfil_Ident					OR	@Perfil_Ident				= -1)

				--AND	(Emp.Company_Ident			= Perfil.Company_Ident			OR	Perfil.Company_Ident		= -1)
				AND (Emp.Location_Ident			= Perfil.Location_Ident			OR	Perfil.Location_Ident		= -1)
				AND (Emp.Client_Ident			= Perfil.Client_Ident			OR	Perfil.Client_Ident			= -1)
				AND (Emp.Program_Ident			= Perfil.Program_Ident			OR	Perfil.Program_Ident		= -1)
				AND (Emp.Contract_Type_Ident	= Perfil.Contract_Type_Ident	OR	Perfil.Contract_Type_Ident	= -1)

				AND (Loc.country_ident			= Perfil.Country_Ident			OR	Perfil.Country_Ident		= -1)
			JOIN [app620].[RelPerfilEmpleadosConceptos] REC WITH(NOLOCK)
				ON REC.Perfil_Ident = Perfil.Perfil_Ident
			LEFT JOIN [app620].[CatConceptos] CC WITH(NOLOCK)
				ON CC.ConceptoId = REC.ConceptoId			
			JOIN app620.CatRelLocationBiosCCMSVw LocBIOS
				ON	(LocBIOS.[location_bios]	= Perfil.City_Ident				OR	Perfil.City_Ident			= -1)
				AND	(LocBIOS.[location_ccms]	= Loc.Location_Ident)
			LEFT JOIN [app620].[CatEmpleadosSolicitudes] CES 
				ON CES.Empleado_Ident = Emp.Ident
				AND CES.FolioSolicitud = @Solicitud AND CES.Active = 1			

			--WHERE CES.FolioSolicitud = @Solicitud
		GROUP BY
			Emp.Ident
			, Emp.Nombre
			, Emp.First_Name
			, Emp.Last_Name
			, Emp.Manager_Ident
			, Emp.Manager_First_Name
			, Emp.Manager_Last_Name
			, Emp.Program_Ident
			, Emp.Program_Name
			, Emp.Client_Ident
			, Emp.Client_Name
			, Emp.Company_Ident
			, Emp.Company_Name
			, Emp.Contract_Type_Ident
			, Emp.Contract_Type
			, Emp.Position_Code_Ident
			, Emp.Position_Code_Title
			, Loc.Location_Ident
			, Loc.full_name
			, Loc.country_ident
			, Loc.country_full_name
			, LocBIOS.[location_bios]
			, LocBIOS.LocationName
			, Emp.Current_Status
			,CES.FolioSolicitud
			,Perfil.Perfil_Ident
		ORDER BY CES.FolioSolicitud DESC
END
GO
PRINT N'Creating [app620].[ToDoSolicitantesAutorizantesResponsables]...';


GO

CREATE PROCEDURE [app620].[ToDoSolicitantesAutorizantesResponsables]

AS

BEGIN

	SELECT    S.FolioSolicitud
			, S.CreatedBy			Ident_Solicitante	, EmpSol.Nombre			Nombre_Solicitante	, EmpSol.email1			eMailSolicitante		, S.EstatusSolicitudId
			--, EmpSolicitud.Ident	Ident_Empleado		, EmpSolicitud.Nombre	Nombre_Empleado		, EmpSolicitud.email1	eMailEmpleado
			, SEA.Autorizador_Ident	Ident_Autorizante	, EmpAut.Nombre			Nombre_Autorizante	, EmpAut.email1			eMailAutorizante		
			, SEA.Autorizado, SEA.Rechazado, SEA.Cancelado

	INTO #SolicitantesAutorizantes
	FROM CatSolicitudes S 

	LEFT JOIN CatEmpleadosSolicitudes ES
	ON ES.FolioSolicitud = S.FolioSolicitud

	--AND	S.EstatusSolicitudId IN ('EB', 'R')
	
	JOIN [app620].[CatEmployeeCCMSVw] EmpSol
	ON EmpSol.Ident = S.CreatedBy

	JOIN [app620].[CatEmployeeCCMSVw] EmpSolicitud
	ON EmpSolicitud.Ident = ES.Empleado_Ident

	LEFT JOIN app620.CatSolicitudEmpleadosAutorizantes SEA
	ON SEA.FolioSolicitud = ES.FolioSolicitud
	AND SEA.Empleado_Ident = ES.Empleado_Ident

	LEFT JOIN [app620].[CatEmployeeCCMSVw] EmpAut
	ON EmpAut.Ident = SEA.Autorizador_Ident
	AND
		SEA.Autorizado = 0
	AND
		SEA.Rechazado = 0
	AND
		SEA.Cancelado = 0

	WHERE ES.Active = 1

	--AND	S.EstatusSolicitudId IN ('EB', 'R')
	
	SELECT	DISTINCT  FolioSolicitud
			, Ident_Solicitante			, Nombre_Solicitante		, eMailSolicitante		, EstatusSolicitudId
			--, NULL Ident_Empleado		, NULL Nombre_Empleado		, NULL eMailEmpleado
			, NULL Ident_Autorizante	, NULL Nombre_Autorizante	, NULL eMailAutorizante		
			, NULL Autorizado			, NULL Rechazado			, NULL Cancelado
			, NULL Ident_Responsable	, NULL Nombre_Responsable	, NULL eMailResponsable		
	FROM	#SolicitantesAutorizantes
	WHERE
			EstatusSolicitudId IN ('EB', 'R')
	UNION
	SELECT	DISTINCT  FolioSolicitud
			, NULL Ident_Solicitante	, NULL Nombre_Solicitante	, NULL eMailSolicitante		, EstatusSolicitudId
			--, NULL Ident_Empleado		, NULL Nombre_Empleado		, NULL eMailEmpleado
			, Ident_Autorizante			, Nombre_Autorizante		, eMailAutorizante		
			, Autorizado				, Rechazado					, Cancelado
			, NULL Ident_Responsable	, NULL Nombre_Responsable	, NULL eMailResponsable		
	FROM	#SolicitantesAutorizantes
	WHERE
			EstatusSolicitudId IN ('E', 'PA')
	AND
			Autorizado <> 1
	AND
			Rechazado <> 1					
	AND
			Cancelado <> 1
END
GO
PRINT N'Creating [app620].[TraCommentSel]...';


GO
CREATE PROC [app620].[TraCommentSel]
@FolioId int, -- El Id del Folio
@EID int, --EL employeeId al que le esta haciendo el movimiento
@ConceptoId int -- EL conceptoId del registro
AS
BEGIN
	SELECT 
		a.TraCommentId
		,a.Comment As Comentario
		,a.FolioId
		,a.CreatedDate AS FechaComentario
		,CASE WHEN c.Middle_Name IS NULL OR LEN(c.Middle_Name) = 0 THEN c.First_Name + ' ' + c.Last_Name ELSE c.First_Name + ' ' + isnull(c.Middle_Name,'') + ' ' + c.Last_Name END AS Nombre
		,a.CreatedBy AS CCMSIDAutor
		,0 AS EmployeeId
		,0 AS ConceptoId
	FROM [app620].[TraComment] a
	INNER JOIN [app620].[CatEmployeeCCMSVw] c on a.CreatedBy = c.Ident
	WHERE 
	a.FolioId = @FolioId
	AND
	a.EmployeeId = @EID
	AND
	a.ConceptoId = @ConceptoId
	order by a.CreatedDate desc
END
GO
PRINT N'Creating [app620].[TraCommentSi]...';


GO
CREATE PROC [app620].[TraCommentSi]
@UserCCMSID int, --El usuario que hace el movimiento
@FolioId int, -- El Id del Folio
@EID int, --EL employeeId al que le esta haciendo el movimiento
@ConceptoId int, -- EL conceptoId del registro
@Comentario nvarchar(MAX)
AS
BEGIN
	if EXISTS(SELECT 1 FROM [app620].[CatEmpleadosSolicitudes] WHERE FolioSolicitud = @FolioId AND Empleado_Ident = @EID AND ConceptoId = @ConceptoId)
	BEGIN
		INSERT INTO [app620].[TraComment] (
			[FolioId]
			,[EmployeeId]
			,[ConceptoId]
			,[Comment]
			,[Active]
			,[CreatedDate]
			,[CreatedBy]
			,[LastModifiedDate]
			,[LastModifiedBy]
			,[DeactivatedBy]
			,[DeactivationDate]
			,[LastModifiedFromPCName])
		VALUES (
			@FolioId
			,@EID
			,@ConceptoId
			,@Comentario
			,1
			,GETDATE()
			,@UserCCMSID
			,GETDATE()
			,@UserCCMSID
			,NULL
			,NULL
			,HOST_NAME())
	END
END
GO
PRINT N'Creating [app620].[ValidaSolicitud]...';


GO
CREATE PROC [app620].[ValidaSolicitud]
(
@FolioSolicitud INT
,@Estatus INT = 0 OUTPUT
) AS
BEGIN

DECLARE @ConceptoMotivo INT = 0
		,@PeriodoOriginalId INT =0
		,@EstatusPeriodo VARCHAR(10)
		,@EstatusSolicitud VARCHAR(10)


	SELECT 
		@PeriodoOriginalId = DSE.PeriodoOriginalId
		,@EstatusSolicitud = CS.EstatusSolicitudId
		--,@ConceptoMotivo = CS.ConceptoMotivoId
	 FROM [app620].[CatSolicitudEmpleadosDetalle] DSE 
	 JOIN [app620].CatSolicitudes CS ON DSE.FolioSolicitud = CS.FolioSolicitud
	WHERE DSE.FolioSolicitud = @FolioSolicitud

 SET @EstatusPeriodo = (SELECT (CASE 
								WHEN (PN.FechaInicio >= GETDATE() AND PN.FechaFin<= GETDATE()) THEN 'En Curso' 
								WHEN (PN.FechaInicio < GETDATE() OR PN.FechaFin< GETDATE()) THEN 'Cerrado'
								WHEN (PN.FechaInicio > GETDATE() AND PN.FechaFin> GETDATE()) THEN 'Futuro'  
								END) AS Estatus 
							FROM [app620].[CatPeriodosNomina] PN
							WHERE PeriodoNominaId = @PeriodoOriginalId)

 IF((@EstatusPeriodo = 'En Curso'  OR  @EstatusPeriodo = 'Futuro') AND @EstatusSolicitud <> 'EB')
 BEGIN
	SELECT 
		CSED.Empleado_Ident 	
		,count(ConceptoMotivoId) as totalSolicitud
	FROM  [app620].[CatSolicitudes] CS
	left JOIN [app620].[CatSolicitudEmpleadosDetalle] CSED ON CS.FolioSolicitud = CSED.FolioSolicitud --AND CSED.FolioSolicitud <> 89 --
	WHERE
		CSED.ConceptoMotivoId = @ConceptoMotivo
		and CSED.Active = 1		
		AND ( CS.PeriodoNominaId = CSED.PeriodoOriginalId)
		--AND CSED.Empleado_Ident = 117253--AND CS.EstatusSolicitudId <> 'EB' --AND CSED.Empleado_Ident = 117253 	
		AND CSED.FolioSolicitud <> @FolioSolicitud AND CS.EstatusSolicitudId <> 'EB'
	GROUP BY CSED.Empleado_Ident, ConceptoMotivoId,CS.FolioSolicitud, CSED.FolioSolicitud  
 END

 END
--having count(CatConceptoMotivoId) > 1
GO
PRINT N'Creating [app620].[CatSolicitudEmpleadosAutorizantesSu]...';


GO

CREATE PROC [app620].[CatSolicitudEmpleadosAutorizantesSu]
	 @FolioSolicitud INT = 0
	,@Empleado_Ident INT = 0
	,@Concepto_Id INT = 0
	,@NivelAutorizacion INT =0
	,@Autorizador_Ident INT = 0
	,@Accion INT = 0
	,@UserEmployeeId INT
	,@Estatus INT = 0 OUTPUT
AS
BEGIN

	DECLARE
		 @CantidadTotal		INT = 0
		,@CantidadTotalAC	INT = 0
		,@CantidadTotalR	INT = 0

	IF NOT EXISTS(
		SELECT 1 
		FROM app620.CatSolicitudEmpleadosAutorizantes 
		WHERE FolioSolicitud	= @FolioSolicitud 
		AND Empleado_Ident		= @Empleado_Ident 
		AND Autorizador_Ident	= @Autorizador_Ident
		AND NivelAutorizacion	= @NivelAutorizacion
	)
	SET @Estatus =-1

	IF(@Estatus =0)
		BEGIN
			UPDATE app620.CatSolicitudEmpleadosAutorizantes
			SET 
				 Pendiente	= (CASE WHEN @Accion = 1 THEN 1 ELSE 0 END)--Pendiente
				,Autorizado	= (CASE WHEN @Accion = 2 THEN 1 ELSE 0 END)--Autorizado
				,Rechazado	= (CASE WHEN @Accion = 3 THEN 1 ELSE 0 END)--Rechazado
				,Cancelado	= (CASE WHEN @Accion = 4 THEN 1 ELSE 0 END)--Cancelado
			WHERE
				FolioSolicitud		= @FolioSolicitud
			AND
				Empleado_Ident		= @Empleado_Ident
			AND
				ConceptoId			= @Concepto_Id
			AND
				NivelAutorizacion	= @NivelAutorizacion
			AND
				Autorizador_Ident	= @Autorizador_Ident
		END

		IF (@Accion <> 3)
			-- Se actualiza la nueva solicitud Pendiente
			BEGIN

				IF (@Accion = 2)
					BEGIN

						--Se calcula la cantidad de conceptos rechazados en la solicitud
						SELECT	@CantidadTotalR		= COUNT(1) 
						FROM	app620.CatEmpleadosSolicitudes 
						WHERE	FolioSolicitud		= @FolioSolicitud
						--AND		Empleado_Ident		= @Empleado_Ident
						AND		EstatusSolicitudId	= 'R'

						-- En esta sección se revisa si la solicitud Completa pasa a Pendiente de Autorizar (No existen Conceptos en estatus Rechazado)
						IF (@CantidadTotalR = 0) 
						BEGIN
							UPDATE app620.CatSolicitudes 
							SET EstatusSolicitudId = 'PA'
							WHERE FolioSolicitud = @FolioSolicitud
						END
					END

				-- En esta sección se revisa si el concepto de la solicitud pasa a Autorizado
				SELECT	@CantidadTotalAC =	COUNT(1) 
				FROM	app620.CatSolicitudEmpleadosAutorizantes 
				WHERE	FolioSolicitud		= @FolioSolicitud
				AND		Empleado_Ident		= @Empleado_Ident
				AND		ConceptoId			= @Concepto_Id
				AND		(Autorizado = 1		OR Cancelado = 1)
				AND		Autorizador_Ident	IS NOT NULL					

				SELECT	@CantidadTotal =	COUNT(1)
				FROM	app620.CatSolicitudEmpleadosAutorizantes 
				WHERE	FolioSolicitud		= @FolioSolicitud
				AND		Empleado_Ident		= @Empleado_Ident
				AND		ConceptoId			= @Concepto_Id	
				AND		Autorizador_Ident	IS NOT NULL					

				IF (
						@CantidadTotal = @CantidadTotalAC 
					AND 
						(ISNULL(@CantidadTotal, 0) <> 0)
					)
					BEGIN
						UPDATE CatEmpleadosSolicitudes
						SET EstatusSolicitudId	= 'A'
						WHERE	FolioSolicitud	= @FolioSolicitud
						AND		Empleado_Ident	= @Empleado_Ident
						AND		ConceptoId		= @Concepto_Id	
					END

				-- En esta sección se revisa si la solicitud Completa pasa a Autorizada				
				SELECT	 @CantidadTotal		= 0
						,@CantidadTotalAC	= 0

				SELECT	@CantidadTotalAC =	COUNT(1) 
				FROM	app620.CatEmpleadosSolicitudes 
				WHERE	FolioSolicitud		= @FolioSolicitud
				AND		EstatusSolicitudId	IN ('A', 'C')
				AND		Active				= 1

				SELECT	@CantidadTotal		= COUNT(1)
				FROM	app620.CatEmpleadosSolicitudes 
				WHERE	FolioSolicitud		= @FolioSolicitud
				AND		Active				= 1

				IF (
						@CantidadTotal = @CantidadTotalAC 
					AND 
						(ISNULL(@CantidadTotal, 0) <> 0)
					)
					BEGIN
						UPDATE app620.CatSolicitudes
						SET EstatusSolicitudId = 'A'
						WHERE	FolioSolicitud		= @FolioSolicitud
					END

				EXEC	[app620].[EnviaSolicitud] @FolioSolicitud
				--SELECT 'Se ejecuta EnviaSolicitud'
			END
		ELSE
			BEGIN
				UPDATE app620.CatEmpleadosSolicitudes
				SET EstatusSolicitudId	= 'R'
				FROM app620.CatSolicitudEmpleadosAutorizantes SEA 
				WHERE
					SEA.FolioSolicitud	= CatEmpleadosSolicitudes.FolioSolicitud
				AND SEA.Empleado_Ident	= CatEmpleadosSolicitudes.Empleado_Ident
				AND SEA.ConceptoId		= CatEmpleadosSolicitudes.ConceptoId
				AND SEA.Rechazado		= 1

				UPDATE app620.CatSolicitudes 
				SET EstatusSolicitudId = 'R'
				WHERE FolioSolicitud = @FolioSolicitud
			END

		---- En esta sección se revisa si la la solicitud Completa pasa a Autorizada

		--SELECT	@CantidadTotalAC =	COUNT(1) 
		--FROM	CatEmpleadosSolicitudes 
		--WHERE	FolioSolicitud		= @FolioSolicitud
		--AND		Empleado_Ident		= @Empleado_Ident
		--AND		ConceptoId			= @Concepto_Id
		--AND		EstatusSolicitudId	IN ('A', 'C')

		--SELECT	@CantidadTotal =	COUNT(1)
		--FROM	CatEmpleadosSolicitudes 
		--WHERE	FolioSolicitud		= @FolioSolicitud
		--AND		Empleado_Ident		= @Empleado_Ident
		--AND		ConceptoId			= @Concepto_Id						

		--IF (@CantidadTotal = @CantidadTotalAC)
		--	BEGIN
		--		UPDATE CatSolicitudes
		--		SET EstatusSolicitudId = 'A'
		--		WHERE	FolioSolicitud		= @FolioSolicitud
		--	END

	SELECT @Estatus

END
GO
PRINT N'Update complete.';


GO
